
Timberman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003820  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08003a3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08003a3c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6fc  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bce  00000000  00000000  0002a77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000812  00000000  00000000  0002ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000256d  00000000  00000000  0002d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb12  00000000  00000000  0002fb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f595f  00000000  00000000  0003b699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b60  00000000  00000000  00130ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00133b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003990 	.word	0x08003990

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003990 	.word	0x08003990

080001c8 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 80001d0:	e002      	b.n	80001d8 <Delay+0x10>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3b01      	subs	r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1f9      	bne.n	80001d2 <Delay+0xa>
}
 80001de:	bf00      	nop
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr

080001ec <lcd_delay>:
void lcd_delay(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	Delay(200);
 80001f0:	20c8      	movs	r0, #200	; 0xc8
 80001f2:	f7ff ffe9 	bl	80001c8 <Delay>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800020e:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000210:	4b5e      	ldr	r3, [pc, #376]	; (800038c <lcd_cmd+0x190>)
 8000212:	2280      	movs	r2, #128	; 0x80
 8000214:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000216:	4b5e      	ldr	r3, [pc, #376]	; (8000390 <lcd_cmd+0x194>)
 8000218:	2220      	movs	r2, #32
 800021a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800021c:	4b5c      	ldr	r3, [pc, #368]	; (8000390 <lcd_cmd+0x194>)
 800021e:	2210      	movs	r2, #16
 8000220:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000222:	4b5b      	ldr	r3, [pc, #364]	; (8000390 <lcd_cmd+0x194>)
 8000224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000228:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800022a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000232:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000234:	f7ff ffda 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000238:	4b54      	ldr	r3, [pc, #336]	; (800038c <lcd_cmd+0x190>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a53      	ldr	r2, [pc, #332]	; (800038c <lcd_cmd+0x190>)
 800023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000242:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 0310 	and.w	r3, r3, #16
 800024a:	2b00      	cmp	r3, #0
 800024c:	d003      	beq.n	8000256 <lcd_cmd+0x5a>
 800024e:	4b50      	ldr	r3, [pc, #320]	; (8000390 <lcd_cmd+0x194>)
 8000250:	2220      	movs	r2, #32
 8000252:	619a      	str	r2, [r3, #24]
 8000254:	e003      	b.n	800025e <lcd_cmd+0x62>
 8000256:	4b4e      	ldr	r3, [pc, #312]	; (8000390 <lcd_cmd+0x194>)
 8000258:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800025c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	2b00      	cmp	r3, #0
 8000266:	d003      	beq.n	8000270 <lcd_cmd+0x74>
 8000268:	4b49      	ldr	r3, [pc, #292]	; (8000390 <lcd_cmd+0x194>)
 800026a:	2210      	movs	r2, #16
 800026c:	619a      	str	r2, [r3, #24]
 800026e:	e003      	b.n	8000278 <lcd_cmd+0x7c>
 8000270:	4b47      	ldr	r3, [pc, #284]	; (8000390 <lcd_cmd+0x194>)
 8000272:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000276:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800027e:	2b00      	cmp	r3, #0
 8000280:	d004      	beq.n	800028c <lcd_cmd+0x90>
 8000282:	4b43      	ldr	r3, [pc, #268]	; (8000390 <lcd_cmd+0x194>)
 8000284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000288:	619a      	str	r2, [r3, #24]
 800028a:	e003      	b.n	8000294 <lcd_cmd+0x98>
 800028c:	4b40      	ldr	r3, [pc, #256]	; (8000390 <lcd_cmd+0x194>)
 800028e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000292:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000298:	2b00      	cmp	r3, #0
 800029a:	da05      	bge.n	80002a8 <lcd_cmd+0xac>
 800029c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a4:	619a      	str	r2, [r3, #24]
 80002a6:	e004      	b.n	80002b2 <lcd_cmd+0xb6>
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002b0:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80002b2:	f7ff ff9b 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80002b6:	4b35      	ldr	r3, [pc, #212]	; (800038c <lcd_cmd+0x190>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80002bc:	4b34      	ldr	r3, [pc, #208]	; (8000390 <lcd_cmd+0x194>)
 80002be:	2220      	movs	r2, #32
 80002c0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80002c2:	4b33      	ldr	r3, [pc, #204]	; (8000390 <lcd_cmd+0x194>)
 80002c4:	2210      	movs	r2, #16
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80002c8:	4b31      	ldr	r3, [pc, #196]	; (8000390 <lcd_cmd+0x194>)
 80002ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d8:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80002da:	f7ff ff87 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80002de:	4b2b      	ldr	r3, [pc, #172]	; (800038c <lcd_cmd+0x190>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a2a      	ldr	r2, [pc, #168]	; (800038c <lcd_cmd+0x190>)
 80002e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e8:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f003 0301 	and.w	r3, r3, #1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d003      	beq.n	80002fc <lcd_cmd+0x100>
 80002f4:	4b26      	ldr	r3, [pc, #152]	; (8000390 <lcd_cmd+0x194>)
 80002f6:	2220      	movs	r2, #32
 80002f8:	619a      	str	r2, [r3, #24]
 80002fa:	e003      	b.n	8000304 <lcd_cmd+0x108>
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <lcd_cmd+0x194>)
 80002fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000302:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <lcd_cmd+0x11a>
 800030e:	4b20      	ldr	r3, [pc, #128]	; (8000390 <lcd_cmd+0x194>)
 8000310:	2210      	movs	r2, #16
 8000312:	619a      	str	r2, [r3, #24]
 8000314:	e003      	b.n	800031e <lcd_cmd+0x122>
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <lcd_cmd+0x194>)
 8000318:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800031c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	2b00      	cmp	r3, #0
 8000326:	d004      	beq.n	8000332 <lcd_cmd+0x136>
 8000328:	4b19      	ldr	r3, [pc, #100]	; (8000390 <lcd_cmd+0x194>)
 800032a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032e:	619a      	str	r2, [r3, #24]
 8000330:	e003      	b.n	800033a <lcd_cmd+0x13e>
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <lcd_cmd+0x194>)
 8000334:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000338:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0308 	and.w	r3, r3, #8
 8000340:	2b00      	cmp	r3, #0
 8000342:	d005      	beq.n	8000350 <lcd_cmd+0x154>
 8000344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800034c:	619a      	str	r2, [r3, #24]
 800034e:	e004      	b.n	800035a <lcd_cmd+0x15e>
 8000350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000358:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800035a:	f7ff ff47 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <lcd_cmd+0x190>)
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <lcd_cmd+0x194>)
 8000366:	2220      	movs	r2, #32
 8000368:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <lcd_cmd+0x194>)
 800036c:	2210      	movs	r2, #16
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <lcd_cmd+0x194>)
 8000372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	48000800 	.word	0x48000800
 8000390:	48000400 	.word	0x48000400

08000394 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800039e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ac:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80003ae:	4b5e      	ldr	r3, [pc, #376]	; (8000528 <lcd_char_cp+0x194>)
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80003b4:	4b5d      	ldr	r3, [pc, #372]	; (800052c <lcd_char_cp+0x198>)
 80003b6:	2220      	movs	r2, #32
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80003ba:	4b5c      	ldr	r3, [pc, #368]	; (800052c <lcd_char_cp+0x198>)
 80003bc:	2210      	movs	r2, #16
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80003c0:	4b5a      	ldr	r3, [pc, #360]	; (800052c <lcd_char_cp+0x198>)
 80003c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d0:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80003d2:	f7ff ff0b 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003d6:	4b54      	ldr	r3, [pc, #336]	; (8000528 <lcd_char_cp+0x194>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a53      	ldr	r2, [pc, #332]	; (8000528 <lcd_char_cp+0x194>)
 80003dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e0:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d003      	beq.n	80003f4 <lcd_char_cp+0x60>
 80003ec:	4b4f      	ldr	r3, [pc, #316]	; (800052c <lcd_char_cp+0x198>)
 80003ee:	2220      	movs	r2, #32
 80003f0:	619a      	str	r2, [r3, #24]
 80003f2:	e003      	b.n	80003fc <lcd_char_cp+0x68>
 80003f4:	4b4d      	ldr	r3, [pc, #308]	; (800052c <lcd_char_cp+0x198>)
 80003f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003fa:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 0320 	and.w	r3, r3, #32
 8000402:	2b00      	cmp	r3, #0
 8000404:	d003      	beq.n	800040e <lcd_char_cp+0x7a>
 8000406:	4b49      	ldr	r3, [pc, #292]	; (800052c <lcd_char_cp+0x198>)
 8000408:	2210      	movs	r2, #16
 800040a:	619a      	str	r2, [r3, #24]
 800040c:	e003      	b.n	8000416 <lcd_char_cp+0x82>
 800040e:	4b47      	ldr	r3, [pc, #284]	; (800052c <lcd_char_cp+0x198>)
 8000410:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000414:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800041c:	2b00      	cmp	r3, #0
 800041e:	d004      	beq.n	800042a <lcd_char_cp+0x96>
 8000420:	4b42      	ldr	r3, [pc, #264]	; (800052c <lcd_char_cp+0x198>)
 8000422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <lcd_char_cp+0x9e>
 800042a:	4b40      	ldr	r3, [pc, #256]	; (800052c <lcd_char_cp+0x198>)
 800042c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000430:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000436:	2b00      	cmp	r3, #0
 8000438:	da05      	bge.n	8000446 <lcd_char_cp+0xb2>
 800043a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800043e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000442:	619a      	str	r2, [r3, #24]
 8000444:	e004      	b.n	8000450 <lcd_char_cp+0xbc>
 8000446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800044e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000450:	f7ff fecc 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000454:	4b34      	ldr	r3, [pc, #208]	; (8000528 <lcd_char_cp+0x194>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800045a:	4b34      	ldr	r3, [pc, #208]	; (800052c <lcd_char_cp+0x198>)
 800045c:	2220      	movs	r2, #32
 800045e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <lcd_char_cp+0x198>)
 8000462:	2210      	movs	r2, #16
 8000464:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000466:	4b31      	ldr	r3, [pc, #196]	; (800052c <lcd_char_cp+0x198>)
 8000468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800046e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000476:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000478:	f7ff feb8 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800047c:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <lcd_char_cp+0x194>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a29      	ldr	r2, [pc, #164]	; (8000528 <lcd_char_cp+0x194>)
 8000482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000486:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	2b00      	cmp	r3, #0
 8000490:	d003      	beq.n	800049a <lcd_char_cp+0x106>
 8000492:	4b26      	ldr	r3, [pc, #152]	; (800052c <lcd_char_cp+0x198>)
 8000494:	2220      	movs	r2, #32
 8000496:	619a      	str	r2, [r3, #24]
 8000498:	e003      	b.n	80004a2 <lcd_char_cp+0x10e>
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <lcd_char_cp+0x198>)
 800049c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004a0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f003 0302 	and.w	r3, r3, #2
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d003      	beq.n	80004b4 <lcd_char_cp+0x120>
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <lcd_char_cp+0x198>)
 80004ae:	2210      	movs	r2, #16
 80004b0:	619a      	str	r2, [r3, #24]
 80004b2:	e003      	b.n	80004bc <lcd_char_cp+0x128>
 80004b4:	4b1d      	ldr	r3, [pc, #116]	; (800052c <lcd_char_cp+0x198>)
 80004b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004ba:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d004      	beq.n	80004d0 <lcd_char_cp+0x13c>
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <lcd_char_cp+0x198>)
 80004c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	e003      	b.n	80004d8 <lcd_char_cp+0x144>
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <lcd_char_cp+0x198>)
 80004d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80004d6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	f003 0308 	and.w	r3, r3, #8
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d005      	beq.n	80004ee <lcd_char_cp+0x15a>
 80004e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	e004      	b.n	80004f8 <lcd_char_cp+0x164>
 80004ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004f6:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80004f8:	f7ff fe78 	bl	80001ec <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <lcd_char_cp+0x194>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <lcd_char_cp+0x198>)
 8000504:	2220      	movs	r2, #32
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <lcd_char_cp+0x198>)
 800050a:	2210      	movs	r2, #16
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <lcd_char_cp+0x198>)
 8000510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	48000800 	.word	0x48000800
 800052c:	48000400 	.word	0x48000400

08000530 <lcd_init>:

}


void lcd_init(char bits, char font, char lines)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
 800053a:	460b      	mov	r3, r1
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	4613      	mov	r3, r2
 8000540:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000542:	20fa      	movs	r0, #250	; 0xfa
 8000544:	f000 fc50 	bl	8000de8 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8000548:	2002      	movs	r0, #2
 800054a:	f7ff fe57 	bl	80001fc <lcd_cmd>
    HAL_Delay(50);
 800054e:	2032      	movs	r0, #50	; 0x32
 8000550:	f000 fc4a 	bl	8000de8 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	4313      	orrs	r3, r2
 800055a:	b2da      	uxtb	r2, r3
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	4313      	orrs	r3, r2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f043 0320 	orr.w	r3, r3, #32
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe47 	bl	80001fc <lcd_cmd>
    HAL_Delay(50);
 800056e:	2032      	movs	r0, #50	; 0x32
 8000570:	f000 fc3a 	bl	8000de8 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000574:	2006      	movs	r0, #6
 8000576:	f7ff fe41 	bl	80001fc <lcd_cmd>
    HAL_Delay(50);
 800057a:	2032      	movs	r0, #50	; 0x32
 800057c:	f000 fc34 	bl	8000de8 <HAL_Delay>
    lcd_cmd(0x0E);
 8000580:	200e      	movs	r0, #14
 8000582:	f7ff fe3b 	bl	80001fc <lcd_cmd>
    HAL_Delay(50);
 8000586:	2032      	movs	r0, #50	; 0x32
 8000588:	f000 fc2e 	bl	8000de8 <HAL_Delay>
    lcd_cmd(0x0C);
 800058c:	200c      	movs	r0, #12
 800058e:	f7ff fe35 	bl	80001fc <lcd_cmd>
    HAL_Delay(50);
 8000592:	2032      	movs	r0, #50	; 0x32
 8000594:	f000 fc28 	bl	8000de8 <HAL_Delay>
    lcd_cmd(0x01);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff fe2f 	bl	80001fc <lcd_cmd>
    HAL_Delay(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 fc22 	bl	8000de8 <HAL_Delay>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d106      	bne.n	80005d0 <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	337f      	adds	r3, #127	; 0x7f
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe17 	bl	80001fc <lcd_cmd>
 80005ce:	e008      	b.n	80005e2 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d105      	bne.n	80005e2 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	3b41      	subs	r3, #65	; 0x41
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe0d 	bl	80001fc <lcd_cmd>
	}
    HAL_Delay(5);
 80005e2:	2005      	movs	r0, #5
 80005e4:	f000 fc00 	bl	8000de8 <HAL_Delay>

}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <lcd_clear>:
{
	lcd_gotoxy(row, column);
	lcd_out_cp(out_char);
    HAL_Delay(5);
}
void lcd_clear(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff fe01 	bl	80001fc <lcd_cmd>
    HAL_Delay(5);
 80005fa:	2005      	movs	r0, #5
 80005fc:	f000 fbf4 	bl	8000de8 <HAL_Delay>

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b098      	sub	sp, #96	; 0x60
 8000608:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char rightManHit[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x04, 0x1F, 0x1F };
 800060a:	4a90      	ldr	r2, [pc, #576]	; (800084c <main+0x248>)
 800060c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000614:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftManHit[] = { 0x1F, 0x1F, 0x04, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 8000618:	4a8d      	ldr	r2, [pc, #564]	; (8000850 <main+0x24c>)
 800061a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	e883 0003 	stmia.w	r3, {r0, r1}

	char rightMan[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x00, 0x1F, 0x1F };
 8000626:	4a8b      	ldr	r2, [pc, #556]	; (8000854 <main+0x250>)
 8000628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftMan[] = { 0x1F, 0x1F, 0x00, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 8000634:	4a88      	ldr	r2, [pc, #544]	; (8000858 <main+0x254>)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063e:	e883 0003 	stmia.w	r3, {r0, r1}

	char branchRight[] = { 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x1F, 0x1F };
 8000642:	4a86      	ldr	r2, [pc, #536]	; (800085c <main+0x258>)
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064c:	e883 0003 	stmia.w	r3, {r0, r1}
	char branchLeft[] = { 0x1F, 0x1F, 0x03, 0x02, 0x02, 0x02, 0x02, 0x00 };
 8000650:	4a83      	ldr	r2, [pc, #524]	; (8000860 <main+0x25c>)
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	e883 0003 	stmia.w	r3, {r0, r1}

	char logRight[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F };
 800065e:	4a81      	ldr	r2, [pc, #516]	; (8000864 <main+0x260>)
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000668:	e883 0003 	stmia.w	r3, {r0, r1}
	char logLeft[] = { 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800066c:	4a7e      	ldr	r2, [pc, #504]	; (8000868 <main+0x264>)
 800066e:	463b      	mov	r3, r7
 8000670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000674:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000678:	f000 fb41 	bl	8000cfe <HAL_Init>

	/* USER CODE BEGIN Init */
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 800067c:	2208      	movs	r2, #8
 800067e:	2100      	movs	r1, #0
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff ff55 	bl	8000530 <lcd_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000686:	f000 f8f1 	bl	800086c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800068a:	f000 f9ab 	bl	80009e4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800068e:	f000 f933 	bl	80008f8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	lcd_clear();
 8000692:	f7ff ffad 	bl	80005f0 <lcd_clear>
	// lcd_print(1,1,"Hello World 2");
	lcd_cmd(0x40);
 8000696:	2040      	movs	r0, #64	; 0x40
 8000698:	f7ff fdb0 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006a0:	e00a      	b.n	80006b8 <main+0xb4>
		lcd_char_cp(rightManHit[i]);
 80006a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe71 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80006b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006b4:	3301      	adds	r3, #1
 80006b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ba:	2b07      	cmp	r3, #7
 80006bc:	ddf1      	ble.n	80006a2 <main+0x9e>

	lcd_cmd(0x40 + 8);
 80006be:	2048      	movs	r0, #72	; 0x48
 80006c0:	f7ff fd9c 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80006c8:	e00a      	b.n	80006e0 <main+0xdc>
		lcd_char_cp(leftManHit[i]);
 80006ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fe5d 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80006da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006dc:	3301      	adds	r3, #1
 80006de:	65bb      	str	r3, [r7, #88]	; 0x58
 80006e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	ddf1      	ble.n	80006ca <main+0xc6>

	lcd_cmd(0x40 + 16);
 80006e6:	2050      	movs	r0, #80	; 0x50
 80006e8:	f7ff fd88 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
 80006f0:	e00a      	b.n	8000708 <main+0x104>
		lcd_char_cp(rightMan[i]);
 80006f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80006f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fe49 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000704:	3301      	adds	r3, #1
 8000706:	657b      	str	r3, [r7, #84]	; 0x54
 8000708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800070a:	2b07      	cmp	r3, #7
 800070c:	ddf1      	ble.n	80006f2 <main+0xee>

	lcd_cmd(0x40 + 24);
 800070e:	2058      	movs	r0, #88	; 0x58
 8000710:	f7ff fd74 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	653b      	str	r3, [r7, #80]	; 0x50
 8000718:	e00a      	b.n	8000730 <main+0x12c>
		lcd_char_cp(leftMan[i]);
 800071a:	f107 0220 	add.w	r2, r7, #32
 800071e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fe35 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 800072a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800072c:	3301      	adds	r3, #1
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
 8000730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000732:	2b07      	cmp	r3, #7
 8000734:	ddf1      	ble.n	800071a <main+0x116>

	lcd_cmd(0x40 + 32);
 8000736:	2060      	movs	r0, #96	; 0x60
 8000738:	f7ff fd60 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000740:	e00a      	b.n	8000758 <main+0x154>
		lcd_char_cp(branchRight[i]);
 8000742:	f107 0218 	add.w	r2, r7, #24
 8000746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fe21 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000754:	3301      	adds	r3, #1
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800075a:	2b07      	cmp	r3, #7
 800075c:	ddf1      	ble.n	8000742 <main+0x13e>

	lcd_cmd(0x40 + 40);
 800075e:	2068      	movs	r0, #104	; 0x68
 8000760:	f7ff fd4c 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
 8000768:	e00a      	b.n	8000780 <main+0x17c>
		lcd_char_cp(branchLeft[i]);
 800076a:	f107 0210 	add.w	r2, r7, #16
 800076e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fe0d 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 800077a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800077c:	3301      	adds	r3, #1
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000782:	2b07      	cmp	r3, #7
 8000784:	ddf1      	ble.n	800076a <main+0x166>

	lcd_cmd(0x40 + 48);
 8000786:	2070      	movs	r0, #112	; 0x70
 8000788:	f7ff fd38 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
 8000790:	e00a      	b.n	80007a8 <main+0x1a4>
		lcd_char_cp(logRight[i]);
 8000792:	f107 0208 	add.w	r2, r7, #8
 8000796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf9 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80007a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007a4:	3301      	adds	r3, #1
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
 80007a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007aa:	2b07      	cmp	r3, #7
 80007ac:	ddf1      	ble.n	8000792 <main+0x18e>

	lcd_cmd(0x40 + 56);
 80007ae:	2078      	movs	r0, #120	; 0x78
 80007b0:	f7ff fd24 	bl	80001fc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
 80007b8:	e009      	b.n	80007ce <main+0x1ca>
		lcd_char_cp(logLeft[i]);
 80007ba:	463a      	mov	r2, r7
 80007bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fde6 	bl	8000394 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80007c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ca:	3301      	adds	r3, #1
 80007cc:	643b      	str	r3, [r7, #64]	; 0x40
 80007ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007d0:	2b07      	cmp	r3, #7
 80007d2:	ddf2      	ble.n	80007ba <main+0x1b6>

	lcd_cmd(0x80);
 80007d4:	2080      	movs	r0, #128	; 0x80
 80007d6:	f7ff fd11 	bl	80001fc <lcd_cmd>

	lcd_gotoxy(1, 1);
 80007da:	2101      	movs	r1, #1
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fee5 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(0);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fdd6 	bl	8000394 <lcd_char_cp>

	lcd_gotoxy(2, 1);
 80007e8:	2101      	movs	r1, #1
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff fede 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fdcf 	bl	8000394 <lcd_char_cp>

	lcd_gotoxy(1, 2);
 80007f6:	2102      	movs	r1, #2
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff fed7 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(2);
 80007fe:	2002      	movs	r0, #2
 8000800:	f7ff fdc8 	bl	8000394 <lcd_char_cp>

	lcd_gotoxy(2, 2);
 8000804:	2102      	movs	r1, #2
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff fed0 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(3);
 800080c:	2003      	movs	r0, #3
 800080e:	f7ff fdc1 	bl	8000394 <lcd_char_cp>

	lcd_gotoxy(1, 3);
 8000812:	2103      	movs	r1, #3
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fec9 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(4);
 800081a:	2004      	movs	r0, #4
 800081c:	f7ff fdba 	bl	8000394 <lcd_char_cp>

	lcd_gotoxy(2, 3);
 8000820:	2103      	movs	r1, #3
 8000822:	2002      	movs	r0, #2
 8000824:	f7ff fec2 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(5);
 8000828:	2005      	movs	r0, #5
 800082a:	f7ff fdb3 	bl	8000394 <lcd_char_cp>

	lcd_gotoxy(1, 4);
 800082e:	2104      	movs	r1, #4
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff febb 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(6);
 8000836:	2006      	movs	r0, #6
 8000838:	f7ff fdac 	bl	8000394 <lcd_char_cp>

	lcd_gotoxy(2, 4);
 800083c:	2104      	movs	r1, #4
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff feb4 	bl	80005ac <lcd_gotoxy>
	lcd_char_cp(7);
 8000844:	2007      	movs	r0, #7
 8000846:	f7ff fda5 	bl	8000394 <lcd_char_cp>
	//lcd_print(1, 1, "HelloTest123");
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800084a:	e7fe      	b.n	800084a <main+0x246>
 800084c:	080039a8 	.word	0x080039a8
 8000850:	080039b0 	.word	0x080039b0
 8000854:	080039b8 	.word	0x080039b8
 8000858:	080039c0 	.word	0x080039c0
 800085c:	080039c8 	.word	0x080039c8
 8000860:	080039d0 	.word	0x080039d0
 8000864:	080039d8 	.word	0x080039d8
 8000868:	080039e0 	.word	0x080039e0

0800086c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b096      	sub	sp, #88	; 0x58
 8000870:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2244      	movs	r2, #68	; 0x44
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f003 f85c 	bl	8003938 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800088e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000892:	f001 fd77 	bl	8002384 <HAL_PWREx_ControlVoltageScaling>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800089c:	f000 f930 	bl	8000b00 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008a0:	2310      	movs	r3, #16
 80008a2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fdb9 	bl	8002430 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x5c>
		Error_Handler();
 80008c4:	f000 f91c 	bl	8000b00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80008dc:	463b      	mov	r3, r7
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 f981 	bl	8002be8 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x84>
		Error_Handler();
 80008ec:	f000 f908 	bl	8000b00 <Error_Handler>
	}
}
 80008f0:	bf00      	nop
 80008f2:	3758      	adds	r7, #88	; 0x58
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_ADC1_Init+0xe0>)
 800091c:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <MX_ADC1_Init+0xe4>)
 800091e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_ADC1_Init+0xe0>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_ADC1_Init+0xe0>)
 800093a:	2204      	movs	r2, #4
 800093c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000940:	2200      	movs	r2, #0
 8000942:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000946:	2200      	movs	r2, #0
 8000948:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_ADC1_Init+0xe0>)
 800094c:	2201      	movs	r2, #1
 800094e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_ADC1_Init+0xe0>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_ADC1_Init+0xe0>)
 800096e:	2200      	movs	r2, #0
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800097a:	4817      	ldr	r0, [pc, #92]	; (80009d8 <MX_ADC1_Init+0xe0>)
 800097c:	f000 fbe4 	bl	8001148 <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x92>
		Error_Handler();
 8000986:	f000 f8bb 	bl	8000b00 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <MX_ADC1_Init+0xe0>)
 8000996:	f001 f93f 	bl	8001c18 <HAL_ADCEx_MultiModeConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0xac>
		Error_Handler();
 80009a0:	f000 f8ae 	bl	8000b00 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_ADC1_Init+0xe8>)
 80009a6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a8:	2306      	movs	r3, #6
 80009aa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009b0:	237f      	movs	r3, #127	; 0x7f
 80009b2:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_ADC1_Init+0xe0>)
 80009c2:	f000 fd11 	bl	80013e8 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0xd8>
		Error_Handler();
 80009cc:	f000 f898 	bl	8000b00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000028 	.word	0x20000028
 80009dc:	50040000 	.word	0x50040000
 80009e0:	14f00020 	.word	0x14f00020

080009e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <MX_GPIO_Init+0x110>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a37      	ldr	r2, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <MX_GPIO_Init+0x110>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin,
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000a48:	482b      	ldr	r0, [pc, #172]	; (8000af8 <MX_GPIO_Init+0x114>)
 8000a4a:	f001 fc51 	bl	80022f0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	482a      	ldr	r0, [pc, #168]	; (8000afc <MX_GPIO_Init+0x118>)
 8000a54:	f001 fc4c 	bl	80022f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin | LCD_RS_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f001 fc45 	bl	80022f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481f      	ldr	r0, [pc, #124]	; (8000afc <MX_GPIO_Init+0x118>)
 8000a7e:	f001 fa8d 	bl	8001f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin;
 8000a82:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000a86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MX_GPIO_Init+0x114>)
 8000a9c:	f001 fa7e 	bl	8001f9c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_EN_Pin */
	GPIO_InitStruct.Pin = LCD_EN_Pin;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4811      	ldr	r0, [pc, #68]	; (8000afc <MX_GPIO_Init+0x118>)
 8000ab8:	f001 fa70 	bl	8001f9c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = LCD_D7_Pin | LCD_RS_Pin;
 8000abc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f001 fa60 	bl	8001f9c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2028      	movs	r0, #40	; 0x28
 8000ae2:	f001 fa24 	bl	8001f2e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae6:	2028      	movs	r0, #40	; 0x28
 8000ae8:	f001 fa3d 	bl	8001f66 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48000800 	.word	0x48000800

08000b00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ac      	sub	sp, #176	; 0xb0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2288      	movs	r2, #136	; 0x88
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fedf 	bl	8003938 <memset>
  if(hadc->Instance==ADC1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <HAL_ADC_MspInit+0xc8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d147      	bne.n	8000c14 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 fa03 	bl	8002fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000bc0:	f7ff ff9e 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000bca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LCD_Pin;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f001 f9c4 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	37b0      	adds	r7, #176	; 0xb0
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	50040000 	.word	0x50040000
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f89a 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c80:	f001 fb4e 	bl	8002320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff ffea 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f002 fe35 	bl	8003948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fc91 	bl	8000604 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf0:	08003a30 	.word	0x08003a30
  ldr r2, =_sbss
 8000cf4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf8:	20000090 	.word	0x20000090

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>

08000cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f001 f905 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f000 f80e 	bl	8000d30 <HAL_InitTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	e001      	b.n	8000d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d20:	f7ff fef4 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_InitTick+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d023      	beq.n	8000d8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_InitTick+0x70>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_InitTick+0x6c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 f911 	bl	8001f82 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10f      	bne.n	8000d86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d809      	bhi.n	8000d80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f001 f8db 	bl	8001f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_InitTick+0x74>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e007      	b.n	8000d90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e004      	b.n	8000d90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e001      	b.n	8000d90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	2000008c 	.word	0x2000008c

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000008c 	.word	0x2000008c

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3360      	adds	r3, #96	; 0x60
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LL_ADC_SetOffset+0x44>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	03fff000 	.word	0x03fff000

08000ee0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3360      	adds	r3, #96	; 0x60
 8000eee:	461a      	mov	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3360      	adds	r3, #96	; 0x60
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f36:	bf00      	nop
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b087      	sub	sp, #28
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3330      	adds	r3, #48	; 0x30
 8000f52:	461a      	mov	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	211f      	movs	r1, #31
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	401a      	ands	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0e9b      	lsrs	r3, r3, #26
 8000f7a:	f003 011f 	and.w	r1, r3, #31
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b087      	sub	sp, #28
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3314      	adds	r3, #20
 8000faa:	461a      	mov	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	0e5b      	lsrs	r3, r3, #25
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	0d1b      	lsrs	r3, r3, #20
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2107      	movs	r1, #7
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	0d1b      	lsrs	r3, r3, #20
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0318 	and.w	r3, r3, #24
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001014:	40d9      	lsrs	r1, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	400b      	ands	r3, r1
 800101a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800101e:	431a      	orrs	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0007ffff 	.word	0x0007ffff

08001038 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6093      	str	r3, [r2, #8]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800106c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001070:	d101      	bne.n	8001076 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001098:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010c0:	d101      	bne.n	80010c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <LL_ADC_IsEnabled+0x18>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <LL_ADC_IsEnabled+0x1a>
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b04      	cmp	r3, #4
 800110c:	d101      	bne.n	8001112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b08      	cmp	r3, #8
 8001132:	d101      	bne.n	8001138 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e130      	b.n	80013c4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116c:	2b00      	cmp	r3, #0
 800116e:	d109      	bne.n	8001184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fcef 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff67 	bl	800105c <LL_ADC_IsDeepPowerDownEnabled>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff4d 	bl	8001038 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff82 	bl	80010ac <LL_ADC_IsInternalRegulatorEnabled>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d115      	bne.n	80011da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff66 	bl	8001084 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011b8:	4b84      	ldr	r3, [pc, #528]	; (80013cc <HAL_ADC_Init+0x284>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	099b      	lsrs	r3, r3, #6
 80011be:	4a84      	ldr	r2, [pc, #528]	; (80013d0 <HAL_ADC_Init+0x288>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	099b      	lsrs	r3, r3, #6
 80011c6:	3301      	adds	r3, #1
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011cc:	e002      	b.n	80011d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f9      	bne.n	80011ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff64 	bl	80010ac <LL_ADC_IsInternalRegulatorEnabled>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ee:	f043 0210 	orr.w	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f043 0201 	orr.w	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff75 	bl	80010fa <LL_ADC_REG_IsConversionOngoing>
 8001210:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 80c9 	bne.w	80013b2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 80c5 	bne.w	80013b2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001230:	f043 0202 	orr.w	r2, r3, #2
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff49 	bl	80010d4 <LL_ADC_IsEnabled>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d115      	bne.n	8001274 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001248:	4862      	ldr	r0, [pc, #392]	; (80013d4 <HAL_ADC_Init+0x28c>)
 800124a:	f7ff ff43 	bl	80010d4 <LL_ADC_IsEnabled>
 800124e:	4604      	mov	r4, r0
 8001250:	4861      	ldr	r0, [pc, #388]	; (80013d8 <HAL_ADC_Init+0x290>)
 8001252:	f7ff ff3f 	bl	80010d4 <LL_ADC_IsEnabled>
 8001256:	4603      	mov	r3, r0
 8001258:	431c      	orrs	r4, r3
 800125a:	4860      	ldr	r0, [pc, #384]	; (80013dc <HAL_ADC_Init+0x294>)
 800125c:	f7ff ff3a 	bl	80010d4 <LL_ADC_IsEnabled>
 8001260:	4603      	mov	r3, r0
 8001262:	4323      	orrs	r3, r4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4619      	mov	r1, r3
 800126e:	485c      	ldr	r0, [pc, #368]	; (80013e0 <HAL_ADC_Init+0x298>)
 8001270:	f7ff fdde 	bl	8000e30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7e5b      	ldrb	r3, [r3, #25]
 8001278:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800127e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001284:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800128a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001292:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d106      	bne.n	80012b0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	3b01      	subs	r3, #1
 80012a8:	045b      	lsls	r3, r3, #17
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <HAL_ADC_Init+0x29c>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	430b      	orrs	r3, r1
 80012de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff1b 	bl	8001120 <LL_ADC_INJ_IsConversionOngoing>
 80012ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d13d      	bne.n	800136e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d13a      	bne.n	800136e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001304:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001314:	f023 0302 	bic.w	r3, r3, #2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	69b9      	ldr	r1, [r7, #24]
 800131e:	430b      	orrs	r3, r1
 8001320:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001328:	2b01      	cmp	r3, #1
 800132a:	d118      	bne.n	800135e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001336:	f023 0304 	bic.w	r3, r3, #4
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001342:	4311      	orrs	r1, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001348:	4311      	orrs	r1, r2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800134e:	430a      	orrs	r2, r1
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	e007      	b.n	800136e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0201 	bic.w	r2, r2, #1
 800136c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10c      	bne.n	8001390 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	f023 010f 	bic.w	r1, r3, #15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	1e5a      	subs	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	631a      	str	r2, [r3, #48]	; 0x30
 800138e:	e007      	b.n	80013a0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 020f 	bic.w	r2, r2, #15
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a4:	f023 0303 	bic.w	r3, r3, #3
 80013a8:	f043 0201 	orr.w	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	655a      	str	r2, [r3, #84]	; 0x54
 80013b0:	e007      	b.n	80013c2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f043 0210 	orr.w	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	053e2d63 	.word	0x053e2d63
 80013d4:	50040000 	.word	0x50040000
 80013d8:	50040100 	.word	0x50040100
 80013dc:	50040200 	.word	0x50040200
 80013e0:	50040300 	.word	0x50040300
 80013e4:	fff0c007 	.word	0xfff0c007

080013e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b6      	sub	sp, #216	; 0xd8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_ADC_ConfigChannel+0x22>
 8001406:	2302      	movs	r3, #2
 8001408:	e3c9      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x7b6>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe6f 	bl	80010fa <LL_ADC_REG_IsConversionOngoing>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 83aa 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d824      	bhi.n	800147e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	3b02      	subs	r3, #2
 800143a:	2b03      	cmp	r3, #3
 800143c:	d81b      	bhi.n	8001476 <HAL_ADC_ConfigChannel+0x8e>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <HAL_ADC_ConfigChannel+0x5c>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	0800145d 	.word	0x0800145d
 800144c:	08001465 	.word	0x08001465
 8001450:	0800146d 	.word	0x0800146d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001454:	230c      	movs	r3, #12
 8001456:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800145a:	e010      	b.n	800147e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800145c:	2312      	movs	r3, #18
 800145e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001462:	e00c      	b.n	800147e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001464:	2318      	movs	r3, #24
 8001466:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800146a:	e008      	b.n	800147e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800146c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001474:	e003      	b.n	800147e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001476:	2306      	movs	r3, #6
 8001478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800147c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800148c:	f7ff fd59 	bl	8000f42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe30 	bl	80010fa <LL_ADC_REG_IsConversionOngoing>
 800149a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe3c 	bl	8001120 <LL_ADC_INJ_IsConversionOngoing>
 80014a8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 81a4 	bne.w	80017fe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 819f 	bne.w	80017fe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	461a      	mov	r2, r3
 80014ce:	f7ff fd64 	bl	8000f9a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d00a      	beq.n	800150a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6919      	ldr	r1, [r3, #16]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001504:	f7ff fcc8 	bl	8000e98 <LL_ADC_SetOffset>
 8001508:	e179      	b.n	80017fe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fce5 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10a      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x14e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fcda 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	0e9b      	lsrs	r3, r3, #26
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	e01e      	b.n	8001574 <HAL_ADC_ConfigChannel+0x18c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fccf 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800155c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001564:	2320      	movs	r3, #32
 8001566:	e004      	b.n	8001572 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1a4>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0e9b      	lsrs	r3, r3, #26
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	e018      	b.n	80015be <HAL_ADC_ConfigChannel+0x1d6>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80015a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80015a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80015b0:	2320      	movs	r3, #32
 80015b2:	e004      	b.n	80015be <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80015b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015be:	429a      	cmp	r2, r3
 80015c0:	d106      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fc9e 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fc82 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10a      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x214>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2101      	movs	r1, #1
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fc77 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	f003 021f 	and.w	r2, r3, #31
 80015fa:	e01e      	b.n	800163a <HAL_ADC_ConfigChannel+0x252>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc6c 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800161a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800161e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800162a:	2320      	movs	r3, #32
 800162c:	e004      	b.n	8001638 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800162e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x26a>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	e018      	b.n	8001684 <HAL_ADC_ConfigChannel+0x29c>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800166a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800166e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001676:	2320      	movs	r3, #32
 8001678:	e004      	b.n	8001684 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800167a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001684:	429a      	cmp	r2, r3
 8001686:	d106      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	2101      	movs	r1, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc3b 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2102      	movs	r1, #2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fc1f 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x2da>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2102      	movs	r1, #2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fc14 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	0e9b      	lsrs	r3, r3, #26
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	e01e      	b.n	8001700 <HAL_ADC_ConfigChannel+0x318>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2102      	movs	r1, #2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fc09 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80016e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80016e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80016f0:	2320      	movs	r3, #32
 80016f2:	e004      	b.n	80016fe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80016f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x330>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0e9b      	lsrs	r3, r3, #26
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	e014      	b.n	8001742 <HAL_ADC_ConfigChannel+0x35a>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800172c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001734:	2320      	movs	r3, #32
 8001736:	e004      	b.n	8001742 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001742:	429a      	cmp	r2, r3
 8001744:	d106      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	2102      	movs	r1, #2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fbdc 	bl	8000f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2103      	movs	r1, #3
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fbc0 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x398>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2103      	movs	r1, #3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fbb5 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	0e9b      	lsrs	r3, r3, #26
 800177a:	f003 021f 	and.w	r2, r3, #31
 800177e:	e017      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x3c8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2103      	movs	r1, #3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fbaa 	bl	8000ee0 <LL_ADC_GetOffsetChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800179a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800179c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80017a2:	2320      	movs	r3, #32
 80017a4:	e003      	b.n	80017ae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80017a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x3e0>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0e9b      	lsrs	r3, r3, #26
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	e011      	b.n	80017ec <HAL_ADC_ConfigChannel+0x404>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80017d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017d8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80017da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e003      	b.n	80017ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80017e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d106      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	2103      	movs	r1, #3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fb87 	bl	8000f0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fc66 	bl	80010d4 <LL_ADC_IsEnabled>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 8140 	bne.w	8001a90 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6819      	ldr	r1, [r3, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	461a      	mov	r2, r3
 800181e:	f7ff fbe7 	bl	8000ff0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	4a8f      	ldr	r2, [pc, #572]	; (8001a64 <HAL_ADC_ConfigChannel+0x67c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	f040 8131 	bne.w	8001a90 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10b      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x46e>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0e9b      	lsrs	r3, r3, #26
 8001844:	3301      	adds	r3, #1
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2b09      	cmp	r3, #9
 800184c:	bf94      	ite	ls
 800184e:	2301      	movls	r3, #1
 8001850:	2300      	movhi	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	e019      	b.n	800188a <HAL_ADC_ConfigChannel+0x4a2>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800186e:	2320      	movs	r3, #32
 8001870:	e003      	b.n	800187a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	2b09      	cmp	r3, #9
 8001882:	bf94      	ite	ls
 8001884:	2301      	movls	r3, #1
 8001886:	2300      	movhi	r3, #0
 8001888:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800188a:	2b00      	cmp	r3, #0
 800188c:	d079      	beq.n	8001982 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x4c2>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0e9b      	lsrs	r3, r3, #26
 80018a0:	3301      	adds	r3, #1
 80018a2:	069b      	lsls	r3, r3, #26
 80018a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018a8:	e015      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x4ee>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80018b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ba:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80018bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80018c2:	2320      	movs	r3, #32
 80018c4:	e003      	b.n	80018ce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80018c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	069b      	lsls	r3, r3, #26
 80018d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x50e>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0e9b      	lsrs	r3, r3, #26
 80018e8:	3301      	adds	r3, #1
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	e017      	b.n	8001926 <HAL_ADC_ConfigChannel+0x53e>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800190e:	2320      	movs	r3, #32
 8001910:	e003      	b.n	800191a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	ea42 0103 	orr.w	r1, r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_ADC_ConfigChannel+0x564>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0e9b      	lsrs	r3, r3, #26
 800193c:	3301      	adds	r3, #1
 800193e:	f003 021f 	and.w	r2, r3, #31
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	051b      	lsls	r3, r3, #20
 800194a:	e018      	b.n	800197e <HAL_ADC_ConfigChannel+0x596>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	e003      	b.n	8001970 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	f003 021f 	and.w	r2, r3, #31
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800197e:	430b      	orrs	r3, r1
 8001980:	e081      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_ADC_ConfigChannel+0x5b6>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	3301      	adds	r3, #1
 8001996:	069b      	lsls	r3, r3, #26
 8001998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800199c:	e015      	b.n	80019ca <HAL_ADC_ConfigChannel+0x5e2>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e003      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	069b      	lsls	r3, r3, #26
 80019c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x602>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0e9b      	lsrs	r3, r3, #26
 80019dc:	3301      	adds	r3, #1
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	e017      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x632>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	61bb      	str	r3, [r7, #24]
  return result;
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001a02:	2320      	movs	r3, #32
 8001a04:	e003      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	ea42 0103 	orr.w	r1, r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10d      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x65e>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	3301      	adds	r3, #1
 8001a32:	f003 021f 	and.w	r2, r3, #31
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b1e      	subs	r3, #30
 8001a3e:	051b      	lsls	r3, r3, #20
 8001a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a44:	e01e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x69c>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	60fb      	str	r3, [r7, #12]
  return result;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d104      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e006      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x688>
 8001a62:	bf00      	nop
 8001a64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	f003 021f 	and.w	r2, r3, #31
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b1e      	subs	r3, #30
 8001a7e:	051b      	lsls	r3, r3, #20
 8001a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff fa85 	bl	8000f9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d07a      	beq.n	8001b92 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a9c:	4843      	ldr	r0, [pc, #268]	; (8001bac <HAL_ADC_ConfigChannel+0x7c4>)
 8001a9e:	f7ff f9ed 	bl	8000e7c <LL_ADC_GetCommonPathInternalCh>
 8001aa2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a41      	ldr	r2, [pc, #260]	; (8001bb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d12c      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d126      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d004      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x6e8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a3b      	ldr	r2, [pc, #236]	; (8001bb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d15d      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4834      	ldr	r0, [pc, #208]	; (8001bac <HAL_ADC_ConfigChannel+0x7c4>)
 8001adc:	f7ff f9bb 	bl	8000e56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_ADC_ConfigChannel+0x7d4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	4a36      	ldr	r2, [pc, #216]	; (8001bc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001afa:	e002      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f9      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b08:	e040      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d118      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d112      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d004      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0x74c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d12d      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481b      	ldr	r0, [pc, #108]	; (8001bac <HAL_ADC_ConfigChannel+0x7c4>)
 8001b40:	f7ff f989 	bl	8000e56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b44:	e024      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d120      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11a      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d115      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480e      	ldr	r0, [pc, #56]	; (8001bac <HAL_ADC_ConfigChannel+0x7c4>)
 8001b72:	f7ff f970 	bl	8000e56 <LL_ADC_SetCommonPathInternalCh>
 8001b76:	e00c      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b8c:	bf00      	nop
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	37d8      	adds	r7, #216	; 0xd8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	80080000 	.word	0x80080000
 8001bac:	50040300 	.word	0x50040300
 8001bb0:	c7520000 	.word	0xc7520000
 8001bb4:	50040000 	.word	0x50040000
 8001bb8:	50040200 	.word	0x50040200
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	053e2d63 	.word	0x053e2d63
 8001bc4:	cb840000 	.word	0xcb840000
 8001bc8:	80000001 	.word	0x80000001

08001bcc <LL_ADC_IsEnabled>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <LL_ADC_IsEnabled+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_ADC_IsEnabled+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d101      	bne.n	8001c0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b09f      	sub	sp, #124	; 0x7c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e093      	b.n	8001d5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001c42:	2300      	movs	r3, #0
 8001c44:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d102      	bne.n	8001c56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c50:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	e001      	b.n	8001c5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10b      	bne.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e072      	b.n	8001d5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ffb9 	bl	8001bf2 <LL_ADC_REG_IsConversionOngoing>
 8001c80:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ffb3 	bl	8001bf2 <LL_ADC_REG_IsConversionOngoing>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d154      	bne.n	8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d151      	bne.n	8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001c9a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02c      	beq.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb6:	035b      	lsls	r3, r3, #13
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cc0:	4829      	ldr	r0, [pc, #164]	; (8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001cc2:	f7ff ff83 	bl	8001bcc <LL_ADC_IsEnabled>
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001cca:	f7ff ff7f 	bl	8001bcc <LL_ADC_IsEnabled>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	431c      	orrs	r4, r3
 8001cd2:	4828      	ldr	r0, [pc, #160]	; (8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001cd4:	f7ff ff7a 	bl	8001bcc <LL_ADC_IsEnabled>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4323      	orrs	r3, r4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d137      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ce8:	f023 030f 	bic.w	r3, r3, #15
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	6811      	ldr	r1, [r2, #0]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6892      	ldr	r2, [r2, #8]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001cfc:	e028      	b.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d08:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d0a:	4817      	ldr	r0, [pc, #92]	; (8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d0c:	f7ff ff5e 	bl	8001bcc <LL_ADC_IsEnabled>
 8001d10:	4604      	mov	r4, r0
 8001d12:	4816      	ldr	r0, [pc, #88]	; (8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d14:	f7ff ff5a 	bl	8001bcc <LL_ADC_IsEnabled>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	431c      	orrs	r4, r3
 8001d1c:	4815      	ldr	r0, [pc, #84]	; (8001d74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d1e:	f7ff ff55 	bl	8001bcc <LL_ADC_IsEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4323      	orrs	r3, r4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d112      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d32:	f023 030f 	bic.w	r3, r3, #15
 8001d36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d3a:	e009      	b.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d4e:	e000      	b.n	8001d52 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	377c      	adds	r7, #124	; 0x7c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	50040000 	.word	0x50040000
 8001d6c:	50040100 	.word	0x50040100
 8001d70:	50040300 	.word	0x50040300
 8001d74:	50040200 	.word	0x50040200

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	e17f      	b.n	80022ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8171 	beq.w	80022a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_GPIO_Init+0x40>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d130      	bne.n	800203e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002012:	2201      	movs	r2, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 0201 	and.w	r2, r3, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b03      	cmp	r3, #3
 8002048:	d118      	bne.n	800207c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002050:	2201      	movs	r2, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f003 0201 	and.w	r2, r3, #1
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b03      	cmp	r3, #3
 8002086:	d017      	beq.n	80020b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80ac 	beq.w	80022a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <HAL_GPIO_Init+0x330>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_GPIO_Init+0x330>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6613      	str	r3, [r2, #96]	; 0x60
 800215a:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_GPIO_Init+0x330>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002166:	4a5a      	ldr	r2, [pc, #360]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x242>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4f      	ldr	r2, [pc, #316]	; (80022d4 <HAL_GPIO_Init+0x338>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x23e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <HAL_GPIO_Init+0x33c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x23a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_GPIO_Init+0x340>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x236>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4c      	ldr	r2, [pc, #304]	; (80022e0 <HAL_GPIO_Init+0x344>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x232>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_GPIO_Init+0x348>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x22e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4a      	ldr	r2, [pc, #296]	; (80022e8 <HAL_GPIO_Init+0x34c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x22a>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021de:	2300      	movs	r3, #0
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021f0:	4937      	ldr	r1, [pc, #220]	; (80022d0 <HAL_GPIO_Init+0x334>)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002222:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_GPIO_Init+0x350>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_GPIO_Init+0x350>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_GPIO_Init+0x350>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_GPIO_Init+0x350>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f47f ae78 	bne.w	8001fac <HAL_GPIO_Init+0x10>
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000
 80022d4:	48000400 	.word	0x48000400
 80022d8:	48000800 	.word	0x48000800
 80022dc:	48000c00 	.word	0x48000c00
 80022e0:	48001000 	.word	0x48001000
 80022e4:	48001400 	.word	0x48001400
 80022e8:	48001800 	.word	0x48001800
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e002      	b.n	8002314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f806 	bl	8002350 <HAL_GPIO_EXTI_Callback>
  }
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_PWREx_GetVoltageRange+0x18>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002392:	d130      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800239c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a0:	d038      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2232      	movs	r2, #50	; 0x32
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c8:	e002      	b.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023dc:	d102      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f2      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f0:	d110      	bne.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e00f      	b.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002402:	d007      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40007000 	.word	0x40007000
 8002428:	20000000 	.word	0x20000000
 800242c:	431bde83 	.word	0x431bde83

08002430 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e3ca      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	4b97      	ldr	r3, [pc, #604]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244c:	4b94      	ldr	r3, [pc, #592]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80e4 	beq.w	800262c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_RCC_OscConfig+0x4a>
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	f040 808b 	bne.w	8002588 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 8087 	bne.w	8002588 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800247a:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x62>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e3a2      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	4b82      	ldr	r3, [pc, #520]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_RCC_OscConfig+0x7c>
 80024a2:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_OscConfig+0x88>
 80024ac:	4b7c      	ldr	r3, [pc, #496]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d223      	bcs.n	8002504 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fd1d 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e383      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d0:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	496d      	ldr	r1, [pc, #436]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ee:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4968      	ldr	r1, [pc, #416]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
 8002502:	e025      	b.n	8002550 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002504:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a65      	ldr	r2, [pc, #404]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4960      	ldr	r1, [pc, #384]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	495b      	ldr	r1, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fcdd 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e343      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002550:	f000 fc4a 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b52      	ldr	r3, [pc, #328]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	4950      	ldr	r1, [pc, #320]	; (80026a4 <HAL_RCC_OscConfig+0x274>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <HAL_RCC_OscConfig+0x278>)
 800256e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002570:	4b4e      	ldr	r3, [pc, #312]	; (80026ac <HAL_RCC_OscConfig+0x27c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fbdb 	bl	8000d30 <HAL_InitTick>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d052      	beq.n	800262a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	e327      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d032      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a42      	ldr	r2, [pc, #264]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800259c:	f7fe fc18 	bl	8000dd0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a4:	f7fe fc14 	bl	8000dd0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e310      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b6:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4931      	ldr	r1, [pc, #196]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	492c      	ldr	r1, [pc, #176]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e01a      	b.n	800262c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002602:	f7fe fbe5 	bl	8000dd0 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260a:	f7fe fbe1 	bl	8000dd0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e2dd      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x1da>
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800262a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d074      	beq.n	8002722 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b08      	cmp	r3, #8
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x21a>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d10e      	bne.n	8002662 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d064      	beq.n	8002720 <HAL_RCC_OscConfig+0x2f0>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d160      	bne.n	8002720 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e2ba      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x24a>
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e026      	b.n	80026c8 <HAL_RCC_OscConfig+0x298>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002682:	d115      	bne.n	80026b0 <HAL_RCC_OscConfig+0x280>
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a02      	ldr	r2, [pc, #8]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e014      	b.n	80026c8 <HAL_RCC_OscConfig+0x298>
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	080039e8 	.word	0x080039e8
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004
 80026b0:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a9f      	ldr	r2, [pc, #636]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b9d      	ldr	r3, [pc, #628]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a9c      	ldr	r2, [pc, #624]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fb7e 	bl	8000dd0 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fb7a 	bl	8000dd0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e276      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ea:	4b92      	ldr	r3, [pc, #584]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2a8>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fb6a 	bl	8000dd0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe fb66 	bl	8000dd0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e262      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002712:	4b88      	ldr	r3, [pc, #544]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x2d0>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d060      	beq.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d005      	beq.n	8002740 <HAL_RCC_OscConfig+0x310>
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d119      	bne.n	800276e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d116      	bne.n	800276e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	4b7c      	ldr	r3, [pc, #496]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_OscConfig+0x328>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e23f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b76      	ldr	r3, [pc, #472]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	4973      	ldr	r1, [pc, #460]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276c:	e040      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d023      	beq.n	80027be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002776:	4b6f      	ldr	r3, [pc, #444]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6e      	ldr	r2, [pc, #440]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fb25 	bl	8000dd0 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fb21 	bl	8000dd0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e21d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	4b65      	ldr	r3, [pc, #404]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b62      	ldr	r3, [pc, #392]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	495f      	ldr	r1, [pc, #380]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e018      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5c      	ldr	r2, [pc, #368]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe fb01 	bl	8000dd0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d2:	f7fe fafd 	bl	8000dd0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1f9      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d03c      	beq.n	8002876 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01c      	beq.n	800283e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280a:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe fadc 	bl	8000dd0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281c:	f7fe fad8 	bl	8000dd0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1d4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ef      	beq.n	800281c <HAL_RCC_OscConfig+0x3ec>
 800283c:	e01b      	b.n	8002876 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002844:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fabf 	bl	8000dd0 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002856:	f7fe fabb 	bl	8000dd0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1b7      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ef      	bne.n	8002856 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80a6 	beq.w	80029d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002884:	2300      	movs	r3, #0
 8002886:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	; 0x58
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_OscConfig+0x508>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d118      	bne.n	80028ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_RCC_OscConfig+0x508>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_RCC_OscConfig+0x508>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c8:	f7fe fa82 	bl	8000dd0 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d0:	f7fe fa7e 	bl	8000dd0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e17a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_RCC_OscConfig+0x508>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_RCC_OscConfig+0x4d8>
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002906:	e029      	b.n	800295c <HAL_RCC_OscConfig+0x52c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d115      	bne.n	800293c <HAL_RCC_OscConfig+0x50c>
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	4a03      	ldr	r2, [pc, #12]	; (8002934 <HAL_RCC_OscConfig+0x504>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002930:	e014      	b.n	800295c <HAL_RCC_OscConfig+0x52c>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	4b9c      	ldr	r3, [pc, #624]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	4a9b      	ldr	r2, [pc, #620]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800294c:	4b98      	ldr	r3, [pc, #608]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a97      	ldr	r2, [pc, #604]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fa34 	bl	8000dd0 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe fa30 	bl	8000dd0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e12a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002982:	4b8b      	ldr	r3, [pc, #556]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ed      	beq.n	800296c <HAL_RCC_OscConfig+0x53c>
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fa1d 	bl	8000dd0 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe fa19 	bl	8000dd0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e113      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b0:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ed      	bne.n	800299a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b7a      	ldr	r3, [pc, #488]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	4a79      	ldr	r2, [pc, #484]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80fe 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	2b02      	cmp	r3, #2
 80029e0:	f040 80d0 	bne.w	8002b84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029e4:	4b72      	ldr	r3, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d130      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	3b01      	subs	r3, #1
 8002a04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d127      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d11f      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a24:	2a07      	cmp	r2, #7
 8002a26:	bf14      	ite	ne
 8002a28:	2201      	movne	r2, #1
 8002a2a:	2200      	moveq	r2, #0
 8002a2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d113      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d06e      	beq.n	8002b38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	d069      	beq.n	8002b34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a6c:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ad      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a88:	f7fe f9a2 	bl	8000dd0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe f99e 	bl	8000dd0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e09a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa2:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aae:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_RCC_OscConfig+0x784>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ac8:	0212      	lsls	r2, r2, #8
 8002aca:	4311      	orrs	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ad0:	0852      	lsrs	r2, r2, #1
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0552      	lsls	r2, r2, #21
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002adc:	0852      	lsrs	r2, r2, #1
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0652      	lsls	r2, r2, #25
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae8:	0912      	lsrs	r2, r2, #4
 8002aea:	0452      	lsls	r2, r2, #17
 8002aec:	430a      	orrs	r2, r1
 8002aee:	4930      	ldr	r1, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b0c:	f7fe f960 	bl	8000dd0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe f95c 	bl	8000dd0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e058      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b32:	e050      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e04f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d148      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b5c:	f7fe f938 	bl	8000dd0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe f934 	bl	8000dd0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e030      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x734>
 8002b82:	e028      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d023      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_RCC_OscConfig+0x780>)
 8002b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe f91b 	bl	8000dd0 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	e00c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe f917 	bl	8000dd0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d905      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e013      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_OscConfig+0x7b0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ec      	bne.n	8002b9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_OscConfig+0x7b0>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4905      	ldr	r1, [pc, #20]	; (8002be0 <HAL_RCC_OscConfig+0x7b0>)
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_OscConfig+0x7b4>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
 8002bd0:	e001      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	feeefffc 	.word	0xfeeefffc

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0e7      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b72      	ldr	r3, [pc, #456]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 0207 	bic.w	r2, r3, #7
 8002c12:	4970      	ldr	r1, [pc, #448]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b6e      	ldr	r3, [pc, #440]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0cf      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b66      	ldr	r3, [pc, #408]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d908      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4960      	ldr	r1, [pc, #384]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d04c      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d121      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0a6      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d115      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e09a      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e08e      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e086      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4943      	ldr	r1, [pc, #268]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd0:	f7fe f87e 	bl	8000dd0 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe f87a 	bl	8000dd0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e06e      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 020c 	and.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1eb      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d208      	bcs.n	8002d2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	492b      	ldr	r1, [pc, #172]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d210      	bcs.n	8002d5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 0207 	bic.w	r2, r3, #7
 8002d44:	4923      	ldr	r1, [pc, #140]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e036      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4910      	ldr	r1, [pc, #64]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d9c:	f000 f824 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	490b      	ldr	r1, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002dba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1fc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd ffb5 	bl	8000d30 <HAL_InitTick>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	080039e8 	.word	0x080039e8
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df6:	4b3e      	ldr	r3, [pc, #248]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e00:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x34>
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d121      	bne.n	8002e5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d11e      	bne.n	8002e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e28:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	e005      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e44:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d102      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e60:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e004      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d134      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d003      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0xac>
 8002e8c:	e005      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e90:	617b      	str	r3, [r7, #20]
      break;
 8002e92:	e005      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e96:	617b      	str	r3, [r7, #20]
      break;
 8002e98:	e002      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	617b      	str	r3, [r7, #20]
      break;
 8002e9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	fb03 f202 	mul.w	r2, r3, r2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	0e5b      	lsrs	r3, r3, #25
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	; 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	080039f8 	.word	0x080039f8
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	007a1200 	.word	0x007a1200

08002f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f18:	f7ff fa26 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8002f1c:	6178      	str	r0, [r7, #20]
 8002f1e:	e014      	b.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff fa16 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f50:	d10b      	bne.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d919      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f5c:	d902      	bls.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5e:	2302      	movs	r3, #2
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e013      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f64:	2301      	movs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e010      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d902      	bls.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f70:	2303      	movs	r3, #3
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e00a      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d102      	bne.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e004      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d101      	bne.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f88:	2301      	movs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	4909      	ldr	r1, [pc, #36]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d041      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe4:	d02a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fea:	d824      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff6:	d81e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003000:	d010      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003002:	e018      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003004:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a85      	ldr	r2, [pc, #532]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fabb 	bl	8003594 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fba6 	bl	800377c <RCCEx_PLLSAI2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003044:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003052:	4973      	ldr	r1, [pc, #460]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d041      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003070:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003074:	d02a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003076:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800307a:	d824      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800307c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003086:	d81e      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d010      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003092:	e018      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003094:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a61      	ldr	r2, [pc, #388]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa73 	bl	8003594 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3320      	adds	r3, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fb5e 	bl	800377c <RCCEx_PLLSAI2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d4:	4b52      	ldr	r3, [pc, #328]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a0 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	6593      	str	r3, [r2, #88]	; 0x58
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003140:	f7fd fe46 	bl	8000dd0 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fd fe42 	bl	8000dd0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	74fb      	strb	r3, [r7, #19]
        break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d15c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003178:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d019      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fd fe01 	bl	8000dd0 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	e00b      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fd fdfd 	bl	8000dd0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d902      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	74fb      	strb	r3, [r7, #19]
            break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ec      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b9e      	ldr	r3, [pc, #632]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a9d      	ldr	r2, [pc, #628]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324a:	4b98      	ldr	r3, [pc, #608]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4994      	ldr	r1, [pc, #592]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 020c 	bic.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	498c      	ldr	r1, [pc, #560]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800328e:	4b87      	ldr	r3, [pc, #540]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4983      	ldr	r1, [pc, #524]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b0:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	497b      	ldr	r1, [pc, #492]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d2:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	4972      	ldr	r1, [pc, #456]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f4:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	496a      	ldr	r1, [pc, #424]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	4961      	ldr	r1, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003338:	4b5c      	ldr	r3, [pc, #368]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4959      	ldr	r1, [pc, #356]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4948      	ldr	r1, [pc, #288]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	493f      	ldr	r1, [pc, #252]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d028      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d106      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e011      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f8c8 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	491f      	ldr	r1, [pc, #124]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343c:	d106      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003448:	60d3      	str	r3, [r2, #12]
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f899 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02b      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349a:	d109      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
 80034a8:	e014      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f867 	bl	8003594 <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	4928      	ldr	r1, [pc, #160]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f844 	bl	8003594 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
 800351a:	e011      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3320      	adds	r3, #32
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f925 	bl	800377c <RCCEx_PLLSAI2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355a:	490d      	ldr	r1, [pc, #52]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003586:	7cbb      	ldrb	r3, [r7, #18]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035a2:	4b75      	ldr	r3, [pc, #468]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ae:	4b72      	ldr	r3, [pc, #456]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0203 	and.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10d      	bne.n	80035da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
       ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035c6:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
       ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d047      	beq.n	800366a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e044      	b.n	800366a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d018      	beq.n	800361a <RCCEx_PLLSAI1_Config+0x86>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d825      	bhi.n	8003638 <RCCEx_PLLSAI1_Config+0xa4>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x62>
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d009      	beq.n	8003608 <RCCEx_PLLSAI1_Config+0x74>
 80035f4:	e020      	b.n	8003638 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f6:	4b60      	ldr	r3, [pc, #384]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e01a      	b.n	800363e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003608:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e013      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361a:	4b57      	ldr	r3, [pc, #348]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003626:	4b54      	ldr	r3, [pc, #336]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003636:	e006      	b.n	8003646 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e004      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003646:	bf00      	nop
    }

    if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800364e:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	430b      	orrs	r3, r1
 8003664:	4944      	ldr	r1, [pc, #272]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d17d      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003670:	4b41      	ldr	r3, [pc, #260]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a40      	ldr	r2, [pc, #256]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800367a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fd fba8 	bl	8000dd0 <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003684:	f7fd fba4 	bl	8000dd0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
        break;
 8003696:	e005      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003698:	4b37      	ldr	r3, [pc, #220]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ef      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d160      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b0:	4b31      	ldr	r3, [pc, #196]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6892      	ldr	r2, [r2, #8]
 80036c0:	0211      	lsls	r1, r2, #8
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	0912      	lsrs	r2, r2, #4
 80036c8:	0452      	lsls	r2, r2, #17
 80036ca:	430a      	orrs	r2, r1
 80036cc:	492a      	ldr	r1, [pc, #168]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	610b      	str	r3, [r1, #16]
 80036d2:	e027      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d112      	bne.n	8003700 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6892      	ldr	r2, [r2, #8]
 80036ea:	0211      	lsls	r1, r2, #8
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6912      	ldr	r2, [r2, #16]
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0552      	lsls	r2, r2, #21
 80036f6:	430a      	orrs	r2, r1
 80036f8:	491f      	ldr	r1, [pc, #124]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
 80036fe:	e011      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003700:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6892      	ldr	r2, [r2, #8]
 8003710:	0211      	lsls	r1, r2, #8
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6952      	ldr	r2, [r2, #20]
 8003716:	0852      	lsrs	r2, r2, #1
 8003718:	3a01      	subs	r2, #1
 800371a:	0652      	lsls	r2, r2, #25
 800371c:	430a      	orrs	r2, r1
 800371e:	4916      	ldr	r1, [pc, #88]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800372e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fb4e 	bl	8000dd0 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003736:	e009      	b.n	800374c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003738:	f7fd fb4a 	bl	8000dd0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	73fb      	strb	r3, [r7, #15]
          break;
 800374a:	e005      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	4904      	ldr	r1, [pc, #16]	; (8003778 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800378a:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003796:	4b67      	ldr	r3, [pc, #412]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d10d      	bne.n	80037c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
       ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ae:	4b61      	ldr	r3, [pc, #388]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
       ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d047      	beq.n	8003852 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e044      	b.n	8003852 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d018      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0x86>
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d825      	bhi.n	8003820 <RCCEx_PLLSAI2_Config+0xa4>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d002      	beq.n	80037de <RCCEx_PLLSAI2_Config+0x62>
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d009      	beq.n	80037f0 <RCCEx_PLLSAI2_Config+0x74>
 80037dc:	e020      	b.n	8003820 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037de:	4b55      	ldr	r3, [pc, #340]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11d      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ee:	e01a      	b.n	8003826 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f0:	4b50      	ldr	r3, [pc, #320]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e013      	b.n	800382a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003802:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800380e:	4b49      	ldr	r3, [pc, #292]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800381e:	e006      	b.n	800382e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e004      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800382e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003836:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	430b      	orrs	r3, r1
 800384c:	4939      	ldr	r1, [pc, #228]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d167      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003858:	4b36      	ldr	r3, [pc, #216]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a35      	ldr	r2, [pc, #212]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003864:	f7fd fab4 	bl	8000dd0 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800386a:	e009      	b.n	8003880 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800386c:	f7fd fab0 	bl	8000dd0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	73fb      	strb	r3, [r7, #15]
        break;
 800387e:	e005      	b.n	800388c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1ef      	bne.n	800386c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d14a      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d111      	bne.n	80038bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6892      	ldr	r2, [r2, #8]
 80038a8:	0211      	lsls	r1, r2, #8
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	0912      	lsrs	r2, r2, #4
 80038b0:	0452      	lsls	r2, r2, #17
 80038b2:	430a      	orrs	r2, r1
 80038b4:	491f      	ldr	r1, [pc, #124]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	614b      	str	r3, [r1, #20]
 80038ba:	e011      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	0211      	lsls	r1, r2, #8
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6912      	ldr	r2, [r2, #16]
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0652      	lsls	r2, r2, #25
 80038d8:	430a      	orrs	r2, r1
 80038da:	4916      	ldr	r1, [pc, #88]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fd fa70 	bl	8000dd0 <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038f2:	e009      	b.n	8003908 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f4:	f7fd fa6c 	bl	8000dd0 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	73fb      	strb	r3, [r7, #15]
          break;
 8003906:	e005      	b.n	8003914 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <memset>:
 8003938:	4402      	add	r2, r0
 800393a:	4603      	mov	r3, r0
 800393c:	4293      	cmp	r3, r2
 800393e:	d100      	bne.n	8003942 <memset+0xa>
 8003940:	4770      	bx	lr
 8003942:	f803 1b01 	strb.w	r1, [r3], #1
 8003946:	e7f9      	b.n	800393c <memset+0x4>

08003948 <__libc_init_array>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	4d0d      	ldr	r5, [pc, #52]	; (8003980 <__libc_init_array+0x38>)
 800394c:	4c0d      	ldr	r4, [pc, #52]	; (8003984 <__libc_init_array+0x3c>)
 800394e:	1b64      	subs	r4, r4, r5
 8003950:	10a4      	asrs	r4, r4, #2
 8003952:	2600      	movs	r6, #0
 8003954:	42a6      	cmp	r6, r4
 8003956:	d109      	bne.n	800396c <__libc_init_array+0x24>
 8003958:	4d0b      	ldr	r5, [pc, #44]	; (8003988 <__libc_init_array+0x40>)
 800395a:	4c0c      	ldr	r4, [pc, #48]	; (800398c <__libc_init_array+0x44>)
 800395c:	f000 f818 	bl	8003990 <_init>
 8003960:	1b64      	subs	r4, r4, r5
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	2600      	movs	r6, #0
 8003966:	42a6      	cmp	r6, r4
 8003968:	d105      	bne.n	8003976 <__libc_init_array+0x2e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003970:	4798      	blx	r3
 8003972:	3601      	adds	r6, #1
 8003974:	e7ee      	b.n	8003954 <__libc_init_array+0xc>
 8003976:	f855 3b04 	ldr.w	r3, [r5], #4
 800397a:	4798      	blx	r3
 800397c:	3601      	adds	r6, #1
 800397e:	e7f2      	b.n	8003966 <__libc_init_array+0x1e>
 8003980:	08003a28 	.word	0x08003a28
 8003984:	08003a28 	.word	0x08003a28
 8003988:	08003a28 	.word	0x08003a28
 800398c:	08003a2c 	.word	0x08003a2c

08003990 <_init>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr

0800399c <_fini>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr
