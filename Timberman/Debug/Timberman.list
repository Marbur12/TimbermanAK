
Timberman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080060ac  080060ac  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060ac  080060ac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080060b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  0800611c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  0800611c  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d384  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231a  00000000  00000000  0002d45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002f780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c4  00000000  00000000  00030480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291ed  00000000  00000000  00030e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e903  00000000  00000000  0005a031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe5fd  00000000  00000000  00068934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f7c  00000000  00000000  00166f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ed0 	.word	0x08005ed0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005ed0 	.word	0x08005ed0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <KPAD_init>:

int KPAD_lastkey;
ADC_HandleTypeDef *KPAD_hadc;

void KPAD_init(ADC_HandleTypeDef *hadc)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	KPAD_lastkey = KPAD_KEYNONE;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <KPAD_init+0x20>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
	KPAD_hadc = hadc;
 800027e:	4a05      	ldr	r2, [pc, #20]	; (8000294 <KPAD_init+0x24>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	20000084 	.word	0x20000084
 8000294:	20000088 	.word	0x20000088

08000298 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 80002a0:	e002      	b.n	80002a8 <Delay+0x10>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d1f9      	bne.n	80002a2 <Delay+0xa>
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <lcd_delay>:
void lcd_delay(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	Delay(200);
 80002c0:	20c8      	movs	r0, #200	; 0xc8
 80002c2:	f7ff ffe9 	bl	8000298 <Delay>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80002d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002de:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002e0:	4b5e      	ldr	r3, [pc, #376]	; (800045c <lcd_cmd+0x190>)
 80002e2:	2280      	movs	r2, #128	; 0x80
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80002e6:	4b5e      	ldr	r3, [pc, #376]	; (8000460 <lcd_cmd+0x194>)
 80002e8:	2220      	movs	r2, #32
 80002ea:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80002ec:	4b5c      	ldr	r3, [pc, #368]	; (8000460 <lcd_cmd+0x194>)
 80002ee:	2210      	movs	r2, #16
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80002f2:	4b5b      	ldr	r3, [pc, #364]	; (8000460 <lcd_cmd+0x194>)
 80002f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002f8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80002fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000302:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000304:	f7ff ffda 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000308:	4b54      	ldr	r3, [pc, #336]	; (800045c <lcd_cmd+0x190>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a53      	ldr	r2, [pc, #332]	; (800045c <lcd_cmd+0x190>)
 800030e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000312:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	f003 0310 	and.w	r3, r3, #16
 800031a:	2b00      	cmp	r3, #0
 800031c:	d003      	beq.n	8000326 <lcd_cmd+0x5a>
 800031e:	4b50      	ldr	r3, [pc, #320]	; (8000460 <lcd_cmd+0x194>)
 8000320:	2220      	movs	r2, #32
 8000322:	619a      	str	r2, [r3, #24]
 8000324:	e003      	b.n	800032e <lcd_cmd+0x62>
 8000326:	4b4e      	ldr	r3, [pc, #312]	; (8000460 <lcd_cmd+0x194>)
 8000328:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800032c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d003      	beq.n	8000340 <lcd_cmd+0x74>
 8000338:	4b49      	ldr	r3, [pc, #292]	; (8000460 <lcd_cmd+0x194>)
 800033a:	2210      	movs	r2, #16
 800033c:	619a      	str	r2, [r3, #24]
 800033e:	e003      	b.n	8000348 <lcd_cmd+0x7c>
 8000340:	4b47      	ldr	r3, [pc, #284]	; (8000460 <lcd_cmd+0x194>)
 8000342:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000346:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800034e:	2b00      	cmp	r3, #0
 8000350:	d004      	beq.n	800035c <lcd_cmd+0x90>
 8000352:	4b43      	ldr	r3, [pc, #268]	; (8000460 <lcd_cmd+0x194>)
 8000354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000358:	619a      	str	r2, [r3, #24]
 800035a:	e003      	b.n	8000364 <lcd_cmd+0x98>
 800035c:	4b40      	ldr	r3, [pc, #256]	; (8000460 <lcd_cmd+0x194>)
 800035e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000362:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000368:	2b00      	cmp	r3, #0
 800036a:	da05      	bge.n	8000378 <lcd_cmd+0xac>
 800036c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000374:	619a      	str	r2, [r3, #24]
 8000376:	e004      	b.n	8000382 <lcd_cmd+0xb6>
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000380:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000382:	f7ff ff9b 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000386:	4b35      	ldr	r3, [pc, #212]	; (800045c <lcd_cmd+0x190>)
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800038c:	4b34      	ldr	r3, [pc, #208]	; (8000460 <lcd_cmd+0x194>)
 800038e:	2220      	movs	r2, #32
 8000390:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000392:	4b33      	ldr	r3, [pc, #204]	; (8000460 <lcd_cmd+0x194>)
 8000394:	2210      	movs	r2, #16
 8000396:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000398:	4b31      	ldr	r3, [pc, #196]	; (8000460 <lcd_cmd+0x194>)
 800039a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80003aa:	f7ff ff87 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003ae:	4b2b      	ldr	r3, [pc, #172]	; (800045c <lcd_cmd+0x190>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a2a      	ldr	r2, [pc, #168]	; (800045c <lcd_cmd+0x190>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b8:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d003      	beq.n	80003cc <lcd_cmd+0x100>
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <lcd_cmd+0x194>)
 80003c6:	2220      	movs	r2, #32
 80003c8:	619a      	str	r2, [r3, #24]
 80003ca:	e003      	b.n	80003d4 <lcd_cmd+0x108>
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <lcd_cmd+0x194>)
 80003ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003d2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d003      	beq.n	80003e6 <lcd_cmd+0x11a>
 80003de:	4b20      	ldr	r3, [pc, #128]	; (8000460 <lcd_cmd+0x194>)
 80003e0:	2210      	movs	r2, #16
 80003e2:	619a      	str	r2, [r3, #24]
 80003e4:	e003      	b.n	80003ee <lcd_cmd+0x122>
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <lcd_cmd+0x194>)
 80003e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003ec:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <lcd_cmd+0x136>
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <lcd_cmd+0x194>)
 80003fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003fe:	619a      	str	r2, [r3, #24]
 8000400:	e003      	b.n	800040a <lcd_cmd+0x13e>
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <lcd_cmd+0x194>)
 8000404:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000408:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	2b00      	cmp	r3, #0
 8000412:	d005      	beq.n	8000420 <lcd_cmd+0x154>
 8000414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800041c:	619a      	str	r2, [r3, #24]
 800041e:	e004      	b.n	800042a <lcd_cmd+0x15e>
 8000420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000428:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800042a:	f7ff ff47 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <lcd_cmd+0x190>)
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <lcd_cmd+0x194>)
 8000436:	2220      	movs	r2, #32
 8000438:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <lcd_cmd+0x194>)
 800043c:	2210      	movs	r2, #16
 800043e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <lcd_cmd+0x194>)
 8000442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	48000800 	.word	0x48000800
 8000460:	48000400 	.word	0x48000400

08000464 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800046e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800047c:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800047e:	4b5e      	ldr	r3, [pc, #376]	; (80005f8 <lcd_char_cp+0x194>)
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000484:	4b5d      	ldr	r3, [pc, #372]	; (80005fc <lcd_char_cp+0x198>)
 8000486:	2220      	movs	r2, #32
 8000488:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800048a:	4b5c      	ldr	r3, [pc, #368]	; (80005fc <lcd_char_cp+0x198>)
 800048c:	2210      	movs	r2, #16
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000490:	4b5a      	ldr	r3, [pc, #360]	; (80005fc <lcd_char_cp+0x198>)
 8000492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000496:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80004a2:	f7ff ff0b 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80004a6:	4b54      	ldr	r3, [pc, #336]	; (80005f8 <lcd_char_cp+0x194>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a53      	ldr	r2, [pc, #332]	; (80005f8 <lcd_char_cp+0x194>)
 80004ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b0:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d003      	beq.n	80004c4 <lcd_char_cp+0x60>
 80004bc:	4b4f      	ldr	r3, [pc, #316]	; (80005fc <lcd_char_cp+0x198>)
 80004be:	2220      	movs	r2, #32
 80004c0:	619a      	str	r2, [r3, #24]
 80004c2:	e003      	b.n	80004cc <lcd_char_cp+0x68>
 80004c4:	4b4d      	ldr	r3, [pc, #308]	; (80005fc <lcd_char_cp+0x198>)
 80004c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004ca:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d003      	beq.n	80004de <lcd_char_cp+0x7a>
 80004d6:	4b49      	ldr	r3, [pc, #292]	; (80005fc <lcd_char_cp+0x198>)
 80004d8:	2210      	movs	r2, #16
 80004da:	619a      	str	r2, [r3, #24]
 80004dc:	e003      	b.n	80004e6 <lcd_char_cp+0x82>
 80004de:	4b47      	ldr	r3, [pc, #284]	; (80005fc <lcd_char_cp+0x198>)
 80004e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004e4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d004      	beq.n	80004fa <lcd_char_cp+0x96>
 80004f0:	4b42      	ldr	r3, [pc, #264]	; (80005fc <lcd_char_cp+0x198>)
 80004f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f6:	619a      	str	r2, [r3, #24]
 80004f8:	e003      	b.n	8000502 <lcd_char_cp+0x9e>
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <lcd_char_cp+0x198>)
 80004fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000500:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	2b00      	cmp	r3, #0
 8000508:	da05      	bge.n	8000516 <lcd_char_cp+0xb2>
 800050a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000512:	619a      	str	r2, [r3, #24]
 8000514:	e004      	b.n	8000520 <lcd_char_cp+0xbc>
 8000516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800051e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000520:	f7ff fecc 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000524:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <lcd_char_cp+0x194>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800052a:	4b34      	ldr	r3, [pc, #208]	; (80005fc <lcd_char_cp+0x198>)
 800052c:	2220      	movs	r2, #32
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000530:	4b32      	ldr	r3, [pc, #200]	; (80005fc <lcd_char_cp+0x198>)
 8000532:	2210      	movs	r2, #16
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <lcd_char_cp+0x198>)
 8000538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800053e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000546:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000548:	f7ff feb8 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <lcd_char_cp+0x194>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <lcd_char_cp+0x194>)
 8000552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000556:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <lcd_char_cp+0x106>
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <lcd_char_cp+0x198>)
 8000564:	2220      	movs	r2, #32
 8000566:	619a      	str	r2, [r3, #24]
 8000568:	e003      	b.n	8000572 <lcd_char_cp+0x10e>
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <lcd_char_cp+0x198>)
 800056c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000570:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	2b00      	cmp	r3, #0
 800057a:	d003      	beq.n	8000584 <lcd_char_cp+0x120>
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <lcd_char_cp+0x198>)
 800057e:	2210      	movs	r2, #16
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	e003      	b.n	800058c <lcd_char_cp+0x128>
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <lcd_char_cp+0x198>)
 8000586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800058a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	2b00      	cmp	r3, #0
 8000594:	d004      	beq.n	80005a0 <lcd_char_cp+0x13c>
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <lcd_char_cp+0x198>)
 8000598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	e003      	b.n	80005a8 <lcd_char_cp+0x144>
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <lcd_char_cp+0x198>)
 80005a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005a6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d005      	beq.n	80005be <lcd_char_cp+0x15a>
 80005b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ba:	619a      	str	r2, [r3, #24]
 80005bc:	e004      	b.n	80005c8 <lcd_char_cp+0x164>
 80005be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005c6:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80005c8:	f7ff fe78 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <lcd_char_cp+0x194>)
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <lcd_char_cp+0x198>)
 80005d4:	2220      	movs	r2, #32
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <lcd_char_cp+0x198>)
 80005da:	2210      	movs	r2, #16
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <lcd_char_cp+0x198>)
 80005e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	48000800 	.word	0x48000800
 80005fc:	48000400 	.word	0x48000400

08000600 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000608:	e008      	b.n	800061c <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff26 	bl	8000464 <lcd_char_cp>
        lcd_delay();
 8000618:	f7ff fe50 	bl	80002bc <lcd_delay>
	while(*out_char)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f2      	bne.n	800060a <lcd_out_cp+0xa>
	}

}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	460b      	mov	r3, r1
 800063a:	71bb      	strb	r3, [r7, #6]
 800063c:	4613      	mov	r3, r2
 800063e:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000640:	20fa      	movs	r0, #250	; 0xfa
 8000642:	f000 fed1 	bl	80013e8 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff fe40 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 800064c:	2032      	movs	r0, #50	; 0x32
 800064e:	f000 fecb 	bl	80013e8 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2da      	uxtb	r2, r3
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	4313      	orrs	r3, r2
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe30 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	; 0x32
 800066e:	f000 febb 	bl	80013e8 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff fe2a 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f000 feb5 	bl	80013e8 <HAL_Delay>
    lcd_cmd(0x0E);
 800067e:	200e      	movs	r0, #14
 8000680:	f7ff fe24 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 8000684:	2032      	movs	r0, #50	; 0x32
 8000686:	f000 feaf 	bl	80013e8 <HAL_Delay>
    lcd_cmd(0x0C);
 800068a:	200c      	movs	r0, #12
 800068c:	f7ff fe1e 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 8000690:	2032      	movs	r0, #50	; 0x32
 8000692:	f000 fea9 	bl	80013e8 <HAL_Delay>
    lcd_cmd(0x01);
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff fe18 	bl	80002cc <lcd_cmd>
    HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fea3 	bl	80013e8 <HAL_Delay>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	460a      	mov	r2, r1
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	4613      	mov	r3, r2
 80006b8:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d106      	bne.n	80006ce <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	337f      	adds	r3, #127	; 0x7f
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fe00 	bl	80002cc <lcd_cmd>
 80006cc:	e008      	b.n	80006e0 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d105      	bne.n	80006e0 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	3b41      	subs	r3, #65	; 0x41
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fdf6 	bl	80002cc <lcd_cmd>
	}
    HAL_Delay(5);
 80006e0:	2005      	movs	r0, #5
 80006e2:	f000 fe81 	bl	80013e8 <HAL_Delay>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	603a      	str	r2, [r7, #0]
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	460b      	mov	r3, r1
 80006fc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffd0 	bl	80006aa <lcd_gotoxy>
	lcd_out_cp(out_char);
 800070a:	6838      	ldr	r0, [r7, #0]
 800070c:	f7ff ff78 	bl	8000600 <lcd_out_cp>
    HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f000 fe69 	bl	80013e8 <HAL_Delay>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lcd_clear>:
void lcd_clear(void) {
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff fdd2 	bl	80002cc <lcd_cmd>
    HAL_Delay(5);
 8000728:	2005      	movs	r0, #5
 800072a:	f000 fe5d 	bl	80013e8 <HAL_Delay>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <game>:
		}
	} while (value > 4000);
}
// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------- Game ----------------------------------------------------------
void game() {
 8000734:	b580      	push	{r7, lr}
 8000736:	b09a      	sub	sp, #104	; 0x68
 8000738:	af00      	add	r7, sp, #0
	lcd_clear();
 800073a:	f7ff fff0 	bl	800071e <lcd_clear>
	//srand(time(NULL));
	int randomNumber;
	int isAlive = true;
 800073e:	2301      	movs	r3, #1
 8000740:	65bb      	str	r3, [r7, #88]	; 0x58
	int display[2][6];
	char temp1[16];
	char temp2[16];

	/* ====== GENERATE TREE AT THE START ====== */
	for (int i = 0; i < 5; i++) {
 8000742:	2300      	movs	r3, #0
 8000744:	667b      	str	r3, [r7, #100]	; 0x64
 8000746:	e034      	b.n	80007b2 <game+0x7e>
		randomNumber = rand() % 100;
 8000748:	f004 fa04 	bl	8004b54 <rand>
 800074c:	4603      	mov	r3, r0
 800074e:	4a71      	ldr	r2, [pc, #452]	; (8000914 <game+0x1e0>)
 8000750:	fb82 1203 	smull	r1, r2, r2, r3
 8000754:	1151      	asrs	r1, r2, #5
 8000756:	17da      	asrs	r2, r3, #31
 8000758:	1a8a      	subs	r2, r1, r2
 800075a:	2164      	movs	r1, #100	; 0x64
 800075c:	fb01 f202 	mul.w	r2, r1, r2
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	657b      	str	r3, [r7, #84]	; 0x54
		if (randomNumber % 2 == 0) {
 8000764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d10f      	bne.n	800078e <game+0x5a>
			display[0][i] = 4; // set right part of tree on height i to branch
 800076e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	3368      	adds	r3, #104	; 0x68
 8000774:	443b      	add	r3, r7
 8000776:	2204      	movs	r2, #4
 8000778:	f843 2c44 	str.w	r2, [r3, #-68]
			display[1][i] = 7; // set left part of tree on height i to log
 800077c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800077e:	3306      	adds	r3, #6
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3368      	adds	r3, #104	; 0x68
 8000784:	443b      	add	r3, r7
 8000786:	2207      	movs	r2, #7
 8000788:	f843 2c44 	str.w	r2, [r3, #-68]
 800078c:	e00e      	b.n	80007ac <game+0x78>
		} else {
			display[0][i] = 6; // set right part of tree on height i to log
 800078e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	3368      	adds	r3, #104	; 0x68
 8000794:	443b      	add	r3, r7
 8000796:	2206      	movs	r2, #6
 8000798:	f843 2c44 	str.w	r2, [r3, #-68]
			display[1][i] = 5; // set left part of tree on height i to branch
 800079c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800079e:	3306      	adds	r3, #6
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	3368      	adds	r3, #104	; 0x68
 80007a4:	443b      	add	r3, r7
 80007a6:	2205      	movs	r2, #5
 80007a8:	f843 2c44 	str.w	r2, [r3, #-68]
	for (int i = 0; i < 5; i++) {
 80007ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007ae:	3301      	adds	r3, #1
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
 80007b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	ddc7      	ble.n	8000748 <game+0x14>
		}
	}
	display[0][5] = 2; // set right part of tree at the bottom to right man
 80007b8:	2302      	movs	r3, #2
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
	display[1][5] = 7; // set left part of tree at the bottom to log
 80007bc:	2307      	movs	r3, #7
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
	/*sprintf(temp1, "%d%d%d%d%d%d", display[0][0], display[0][1],
	 display[0][2], display[0][3], display[0][4], display[0][5]);
	 sprintf(temp2, "%d%d%d%d%d%d", display[1][0], display[1][1],
	 display[1][2], display[1][3], display[1][4], display[1][5]);*/
	/* ====== MAIN GAME LOOP ====== */
	while (isAlive) {
 80007c0:	e09e      	b.n	8000900 <game+0x1cc>

		// pressing the button to chop the tree
		HAL_Delay(50);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f000 fe10 	bl	80013e8 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 80007c8:	4853      	ldr	r0, [pc, #332]	; (8000918 <game+0x1e4>)
 80007ca:	f001 f965 	bl	8001a98 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80007ce:	210a      	movs	r1, #10
 80007d0:	4851      	ldr	r0, [pc, #324]	; (8000918 <game+0x1e4>)
 80007d2:	f001 fa1b 	bl	8001c0c <HAL_ADC_PollForConversion>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f040 8091 	bne.w	8000900 <game+0x1cc>
			value = HAL_ADC_GetValue(&hadc1);
 80007de:	484e      	ldr	r0, [pc, #312]	; (8000918 <game+0x1e4>)
 80007e0:	f001 faec 	bl	8001dbc <HAL_ADC_GetValue>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b4c      	ldr	r3, [pc, #304]	; (800091c <game+0x1e8>)
 80007ea:	801a      	strh	r2, [r3, #0]

			if (value > 700 && value < 820) { // move player to right
 80007ec:	4b4b      	ldr	r3, [pc, #300]	; (800091c <game+0x1e8>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80007f4:	d909      	bls.n	800080a <game+0xd6>
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <game+0x1e8>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80007fe:	d204      	bcs.n	800080a <game+0xd6>
				display[0][5] = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
				display[1][5] = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	653b      	str	r3, [r7, #80]	; 0x50
 8000808:	e00d      	b.n	8000826 <game+0xf2>
			} else if (value > 1800 && value < 1920) { // move player to left
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <game+0x1e8>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000812:	d908      	bls.n	8000826 <game+0xf2>
 8000814:	4b41      	ldr	r3, [pc, #260]	; (800091c <game+0x1e8>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800081c:	d203      	bcs.n	8000826 <game+0xf2>
				display[0][5] = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
				display[1][5] = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	653b      	str	r3, [r7, #80]	; 0x50
			}

			randomNumber = rand() % 100;
 8000826:	f004 f995 	bl	8004b54 <rand>
 800082a:	4603      	mov	r3, r0
 800082c:	4a39      	ldr	r2, [pc, #228]	; (8000914 <game+0x1e0>)
 800082e:	fb82 1203 	smull	r1, r2, r2, r3
 8000832:	1151      	asrs	r1, r2, #5
 8000834:	17da      	asrs	r2, r3, #31
 8000836:	1a8a      	subs	r2, r1, r2
 8000838:	2164      	movs	r1, #100	; 0x64
 800083a:	fb01 f202 	mul.w	r2, r1, r2
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
			 display[0][0] = 6; // set right part of tree on height i to log
			 display[1][0] = 5; // set left part of tree on height i to branch
			 }*/

			/* ====== DISPLAYING EVERYTHING ====== */
			if ((value > 700 && value < 820)
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <game+0x1e8>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800084a:	d904      	bls.n	8000856 <game+0x122>
 800084c:	4b33      	ldr	r3, [pc, #204]	; (800091c <game+0x1e8>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8000854:	d309      	bcc.n	800086a <game+0x136>
					|| (value > 1800 && value < 1920)) {
 8000856:	4b31      	ldr	r3, [pc, #196]	; (800091c <game+0x1e8>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800085e:	d94f      	bls.n	8000900 <game+0x1cc>
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <game+0x1e8>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000868:	d24a      	bcs.n	8000900 <game+0x1cc>
				lcd_clear();
 800086a:	f7ff ff58 	bl	800071e <lcd_clear>
				sprintf(scoreText, "%d", highScore);
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <game+0x1ec>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	492b      	ldr	r1, [pc, #172]	; (8000924 <game+0x1f0>)
 8000876:	482c      	ldr	r0, [pc, #176]	; (8000928 <game+0x1f4>)
 8000878:	f004 fa6c 	bl	8004d54 <siprintf>
				lcd_print(1, 1, "SCORE:");
 800087c:	4a2b      	ldr	r2, [pc, #172]	; (800092c <game+0x1f8>)
 800087e:	2101      	movs	r1, #1
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ff34 	bl	80006ee <lcd_print>
				lcd_print(2, 1, scoreText);
 8000886:	4a28      	ldr	r2, [pc, #160]	; (8000928 <game+0x1f4>)
 8000888:	2101      	movs	r1, #1
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff ff2f 	bl	80006ee <lcd_print>
				lcd_print(1, 16, "|");
 8000890:	4a27      	ldr	r2, [pc, #156]	; (8000930 <game+0x1fc>)
 8000892:	2110      	movs	r1, #16
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff ff2a 	bl	80006ee <lcd_print>
				lcd_print(2, 16, "|");
 800089a:	4a25      	ldr	r2, [pc, #148]	; (8000930 <game+0x1fc>)
 800089c:	2110      	movs	r1, #16
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff ff25 	bl	80006ee <lcd_print>
				for (int i = 0; i < 2; i++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	663b      	str	r3, [r7, #96]	; 0x60
 80008a8:	e027      	b.n	80008fa <game+0x1c6>
					for (int j = 0; j < 6; j++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008ae:	e01e      	b.n	80008ee <game+0x1ba>
						lcd_gotoxy(i + 1, j + 9);
 80008b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3309      	adds	r3, #9
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	4610      	mov	r0, r2
 80008c4:	f7ff fef1 	bl	80006aa <lcd_gotoxy>
						lcd_char_cp(display[i][j]);
 80008c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	3368      	adds	r3, #104	; 0x68
 80008da:	443b      	add	r3, r7
 80008dc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fdbe 	bl	8000464 <lcd_char_cp>
					for (int j = 0; j < 6; j++) {
 80008e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008ea:	3301      	adds	r3, #1
 80008ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	dddd      	ble.n	80008b0 <game+0x17c>
				for (int i = 0; i < 2; i++) {
 80008f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008f6:	3301      	adds	r3, #1
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
 80008fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	ddd4      	ble.n	80008aa <game+0x176>
	while (isAlive) {
 8000900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f af5d 	bne.w	80007c2 <game+0x8e>
		 lcd_print(2, 1, temp2);*/

		//HAL_Delay(300);
	}
	//gameOver();
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3768      	adds	r7, #104	; 0x68
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	51eb851f 	.word	0x51eb851f
 8000918:	2000008c 	.word	0x2000008c
 800091c:	20000114 	.word	0x20000114
 8000920:	20000118 	.word	0x20000118
 8000924:	08005f10 	.word	0x08005f10
 8000928:	2000011c 	.word	0x2000011c
 800092c:	08005f14 	.word	0x08005f14
 8000930:	08005f1c 	.word	0x08005f1c

08000934 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b098      	sub	sp, #96	; 0x60
 8000938:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// ----------------------------------------------------- Custom characters variables ----------------------------------------------------
	char rightManHit[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x04, 0x1F, 0x1F };
 800093a:	4a77      	ldr	r2, [pc, #476]	; (8000b18 <main+0x1e4>)
 800093c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000944:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftManHit[] = { 0x1F, 0x1F, 0x04, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 8000948:	4a74      	ldr	r2, [pc, #464]	; (8000b1c <main+0x1e8>)
 800094a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000952:	e883 0003 	stmia.w	r3, {r0, r1}

	char rightMan[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x00, 0x1F, 0x1F };
 8000956:	4a72      	ldr	r2, [pc, #456]	; (8000b20 <main+0x1ec>)
 8000958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000960:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftMan[] = { 0x1F, 0x1F, 0x00, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 8000964:	4a6f      	ldr	r2, [pc, #444]	; (8000b24 <main+0x1f0>)
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096e:	e883 0003 	stmia.w	r3, {r0, r1}

	char branchRight[] = { 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x1F, 0x1F };
 8000972:	4a6d      	ldr	r2, [pc, #436]	; (8000b28 <main+0x1f4>)
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097c:	e883 0003 	stmia.w	r3, {r0, r1}
	char branchLeft[] = { 0x1F, 0x1F, 0x03, 0x02, 0x02, 0x02, 0x02, 0x00 };
 8000980:	4a6a      	ldr	r2, [pc, #424]	; (8000b2c <main+0x1f8>)
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	e883 0003 	stmia.w	r3, {r0, r1}

	char logRight[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F };
 800098e:	4a68      	ldr	r2, [pc, #416]	; (8000b30 <main+0x1fc>)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000998:	e883 0003 	stmia.w	r3, {r0, r1}
	char logLeft[] = { 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800099c:	4a65      	ldr	r2, [pc, #404]	; (8000b34 <main+0x200>)
 800099e:	463b      	mov	r3, r7
 80009a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a4:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009a8:	f000 fca9 	bl	80012fe <HAL_Init>

	/* USER CODE BEGIN Init */

	// ---------------------------------------------------- Initialization of LCD screen -----------------------------------------------------
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 80009ac:	2208      	movs	r2, #8
 80009ae:	2100      	movs	r1, #0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fe3c 	bl	800062e <lcd_init>
	// ---------------------------------------------------------------------------------------------------------------------------------------

	KPAD_init(&hadc1);
 80009b6:	4860      	ldr	r0, [pc, #384]	; (8000b38 <main+0x204>)
 80009b8:	f7ff fc5a 	bl	8000270 <KPAD_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009bc:	f000 f8be 	bl	8000b3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009c0:	f000 fa18 	bl	8000df4 <MX_GPIO_Init>
	MX_ADC1_Init();
 80009c4:	f000 f90e 	bl	8000be4 <MX_ADC1_Init>
	MX_RTC_Init();
 80009c8:	f000 f982 	bl	8000cd0 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	// ------------------------------------------------ Assigning custom characters to memory ------------------------------------------------
	lcd_cmd(0x40);
 80009cc:	2040      	movs	r0, #64	; 0x40
 80009ce:	f7ff fc7d 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009d6:	e00a      	b.n	80009ee <main+0xba>
		lcd_char_cp(rightManHit[i]);
 80009d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80009dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fd3e 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80009e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009ea:	3301      	adds	r3, #1
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	ddf1      	ble.n	80009d8 <main+0xa4>
	lcd_cmd(0x40 + 8);
 80009f4:	2048      	movs	r0, #72	; 0x48
 80009f6:	f7ff fc69 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80009fe:	e00a      	b.n	8000a16 <main+0xe2>
		lcd_char_cp(leftManHit[i]);
 8000a00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a06:	4413      	add	r3, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fd2a 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a12:	3301      	adds	r3, #1
 8000a14:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a18:	2b07      	cmp	r3, #7
 8000a1a:	ddf1      	ble.n	8000a00 <main+0xcc>
	lcd_cmd(0x40 + 16);
 8000a1c:	2050      	movs	r0, #80	; 0x50
 8000a1e:	f7ff fc55 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	657b      	str	r3, [r7, #84]	; 0x54
 8000a26:	e00a      	b.n	8000a3e <main+0x10a>
		lcd_char_cp(rightMan[i]);
 8000a28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fd16 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8000a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	ddf1      	ble.n	8000a28 <main+0xf4>
	lcd_cmd(0x40 + 24);
 8000a44:	2058      	movs	r0, #88	; 0x58
 8000a46:	f7ff fc41 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8000a4e:	e00a      	b.n	8000a66 <main+0x132>
		lcd_char_cp(leftMan[i]);
 8000a50:	f107 0220 	add.w	r2, r7, #32
 8000a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd02 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a62:	3301      	adds	r3, #1
 8000a64:	653b      	str	r3, [r7, #80]	; 0x50
 8000a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	ddf1      	ble.n	8000a50 <main+0x11c>
	lcd_cmd(0x40 + 32);
 8000a6c:	2060      	movs	r0, #96	; 0x60
 8000a6e:	f7ff fc2d 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a76:	e00a      	b.n	8000a8e <main+0x15a>
		lcd_char_cp(branchRight[i]);
 8000a78:	f107 0218 	add.w	r2, r7, #24
 8000a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fcee 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a90:	2b07      	cmp	r3, #7
 8000a92:	ddf1      	ble.n	8000a78 <main+0x144>
	lcd_cmd(0x40 + 40);
 8000a94:	2068      	movs	r0, #104	; 0x68
 8000a96:	f7ff fc19 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a9e:	e00a      	b.n	8000ab6 <main+0x182>
		lcd_char_cp(branchLeft[i]);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fcda 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ab8:	2b07      	cmp	r3, #7
 8000aba:	ddf1      	ble.n	8000aa0 <main+0x16c>
	lcd_cmd(0x40 + 48);
 8000abc:	2070      	movs	r0, #112	; 0x70
 8000abe:	f7ff fc05 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ac6:	e00a      	b.n	8000ade <main+0x1aa>
		lcd_char_cp(logRight[i]);
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ace:	4413      	add	r3, r2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fcc6 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ada:	3301      	adds	r3, #1
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
 8000ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ae0:	2b07      	cmp	r3, #7
 8000ae2:	ddf1      	ble.n	8000ac8 <main+0x194>
	lcd_cmd(0x40 + 56);
 8000ae4:	2078      	movs	r0, #120	; 0x78
 8000ae6:	f7ff fbf1 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	643b      	str	r3, [r7, #64]	; 0x40
 8000aee:	e009      	b.n	8000b04 <main+0x1d0>
		lcd_char_cp(logLeft[i]);
 8000af0:	463a      	mov	r2, r7
 8000af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fcb3 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b00:	3301      	adds	r3, #1
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
 8000b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b06:	2b07      	cmp	r3, #7
 8000b08:	ddf2      	ble.n	8000af0 <main+0x1bc>

	lcd_cmd(0x80);
 8000b0a:	2080      	movs	r0, #128	; 0x80
 8000b0c:	f7ff fbde 	bl	80002cc <lcd_cmd>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//menu();
		game();
 8000b10:	f7ff fe10 	bl	8000734 <game>
 8000b14:	e7fc      	b.n	8000b10 <main+0x1dc>
 8000b16:	bf00      	nop
 8000b18:	08005f4c 	.word	0x08005f4c
 8000b1c:	08005f54 	.word	0x08005f54
 8000b20:	08005f5c 	.word	0x08005f5c
 8000b24:	08005f64 	.word	0x08005f64
 8000b28:	08005f6c 	.word	0x08005f6c
 8000b2c:	08005f74 	.word	0x08005f74
 8000b30:	08005f7c 	.word	0x08005f7c
 8000b34:	08005f84 	.word	0x08005f84
 8000b38:	2000008c 	.word	0x2000008c

08000b3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b096      	sub	sp, #88	; 0x58
 8000b40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2244      	movs	r2, #68	; 0x44
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 f965 	bl	8004e1a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b62:	f002 f98d 	bl	8002e80 <HAL_PWREx_ControlVoltageScaling>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000b6c:	f000 f9d0 	bl	8000f10 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000b70:	2318      	movs	r3, #24
 8000b72:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b80:	2360      	movs	r3, #96	; 0x60
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000b90:	2310      	movs	r3, #16
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 f9c1 	bl	8002f2c <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x78>
		Error_Handler();
 8000bb0:	f000 f9ae 	bl	8000f10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000bbc:	23a0      	movs	r3, #160	; 0xa0
 8000bbe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fd89 	bl	80036e4 <HAL_RCC_ClockConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xa0>
		Error_Handler();
 8000bd8:	f000 f99a 	bl	8000f10 <Error_Handler>
	}
}
 8000bdc:	bf00      	nop
 8000bde:	3758      	adds	r7, #88	; 0x58
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <MX_ADC1_Init+0xe4>)
 8000c0a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c18:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c66:	4817      	ldr	r0, [pc, #92]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c68:	f000 fdc6 	bl	80017f8 <HAL_ADC_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC1_Init+0x92>
		Error_Handler();
 8000c72:	f000 f94d 	bl	8000f10 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4810      	ldr	r0, [pc, #64]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000c82:	f001 fd47 	bl	8002714 <HAL_ADCEx_MultiModeConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000c8c:	f000 f940 	bl	8000f10 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_ADC1_Init+0xe8>)
 8000c92:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c94:	2306      	movs	r3, #6
 8000c96:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9c:	237f      	movs	r3, #127	; 0x7f
 8000c9e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_ADC1_Init+0xe0>)
 8000cae:	f001 f893 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000cb8:	f000 f92a 	bl	8000f10 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000008c 	.word	0x2000008c
 8000cc8:	50040000 	.word	0x50040000
 8000ccc:	14f00020 	.word	0x14f00020

08000cd0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b092      	sub	sp, #72	; 0x48
 8000cd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	222c      	movs	r2, #44	; 0x2c
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 f892 	bl	8004e1a <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000cf6:	4b3c      	ldr	r3, [pc, #240]	; (8000de8 <MX_RTC_Init+0x118>)
 8000cf8:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <MX_RTC_Init+0x11c>)
 8000cfa:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cfc:	4b3a      	ldr	r3, [pc, #232]	; (8000de8 <MX_RTC_Init+0x118>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d04:	227f      	movs	r2, #127	; 0x7f
 8000d06:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000d08:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000d26:	4830      	ldr	r0, [pc, #192]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d28:	f003 fb84 	bl	8004434 <HAL_RTC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_RTC_Init+0x66>
		Error_Handler();
 8000d32:	f000 f8ed 	bl	8000f10 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000d50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d5a:	f003 fbf3 	bl	8004544 <HAL_RTC_SetTime>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_RTC_Init+0x98>
		Error_Handler();
 8000d64:	f000 f8d4 	bl	8000f10 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	4817      	ldr	r0, [pc, #92]	; (8000de8 <MX_RTC_Init+0x118>)
 8000d8a:	f003 fc78 	bl	800467e <HAL_RTC_SetDate>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_RTC_Init+0xc8>
		Error_Handler();
 8000d94:	f000 f8bc 	bl	8000f10 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_RTC_Init+0x120>)
 8000db2:	61bb      	str	r3, [r7, #24]
			| RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_RTC_Init+0x118>)
 8000dd0:	f003 fcdc 	bl	800478c <HAL_RTC_SetAlarm>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_RTC_Init+0x10e>
		Error_Handler();
 8000dda:	f000 f899 	bl	8000f10 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3748      	adds	r7, #72	; 0x48
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000f0 	.word	0x200000f0
 8000dec:	40002800 	.word	0x40002800
 8000df0:	80808000 	.word	0x80808000

08000df4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a3d      	ldr	r2, [pc, #244]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a37      	ldr	r2, [pc, #220]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_GPIO_Init+0x110>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin,
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000e58:	482b      	ldr	r0, [pc, #172]	; (8000f08 <MX_GPIO_Init+0x114>)
 8000e5a:	f001 ffc7 	bl	8002dec <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	482a      	ldr	r0, [pc, #168]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e64:	f001 ffc2 	bl	8002dec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin | LCD_RS_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f001 ffbb 	bl	8002dec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e80:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481f      	ldr	r0, [pc, #124]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e8e:	f001 fe03 	bl	8002a98 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin;
 8000e92:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000e96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4817      	ldr	r0, [pc, #92]	; (8000f08 <MX_GPIO_Init+0x114>)
 8000eac:	f001 fdf4 	bl	8002a98 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_EN_Pin */
	GPIO_InitStruct.Pin = LCD_EN_Pin;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000ec8:	f001 fde6 	bl	8002a98 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = LCD_D7_Pin | LCD_RS_Pin;
 8000ecc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ed0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f001 fdd6 	bl	8002a98 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2028      	movs	r0, #40	; 0x28
 8000ef2:	f001 fd9a 	bl	8002a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef6:	2028      	movs	r0, #40	; 0x28
 8000ef8:	f001 fdb3 	bl	8002a62 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	48000800 	.word	0x48000800

08000f10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0ac      	sub	sp, #176	; 0xb0
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2288      	movs	r2, #136	; 0x88
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 ff48 	bl	8004e1a <memset>
  if(hadc->Instance==ADC1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a27      	ldr	r2, [pc, #156]	; (800102c <HAL_ADC_MspInit+0xc8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d147      	bne.n	8001024 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f98:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000faa:	2310      	movs	r3, #16
 8000fac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fd79 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000fd0:	f7ff ff9e 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_ADC_MspInit+0xcc>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0xcc>)
 8000fda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_ADC_MspInit+0xcc>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_ADC_MspInit+0xcc>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0xcc>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_ADC_MspInit+0xcc>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LCD_Pin;
 8001004:	2301      	movs	r3, #1
 8001006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800100a:	230b      	movs	r3, #11
 800100c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f001 fd3a 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	37b0      	adds	r7, #176	; 0xb0
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	50040000 	.word	0x50040000
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0a4      	sub	sp, #144	; 0x90
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	2288      	movs	r2, #136	; 0x88
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fee8 	bl	8004e1a <memset>
  if(hrtc->Instance==RTC)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_RTC_MspInit+0x5c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d118      	bne.n	8001086 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800105a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fd28 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001072:	f7ff ff4d 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_RTC_MspInit+0x60>)
 8001078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_RTC_MspInit+0x60>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3790      	adds	r7, #144	; 0x90
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40002800 	.word	0x40002800
 8001094:	40021000 	.word	0x40021000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 f960 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80010f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010f4:	f001 fe92 	bl	8002e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_kill>:

int _kill(int pid, int sig)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001116:	f003 fecf 	bl	8004eb8 <__errno>
 800111a:	4603      	mov	r3, r0
 800111c:	2216      	movs	r2, #22
 800111e:	601a      	str	r2, [r3, #0]
  return -1;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_exit>:

void _exit (int status)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ffe7 	bl	800110c <_kill>
  while (1) {}    /* Make sure we hang here */
 800113e:	e7fe      	b.n	800113e <_exit+0x12>

08001140 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e00a      	b.n	8001168 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001152:	f3af 8000 	nop.w
 8001156:	4601      	mov	r1, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbf0      	blt.n	8001152 <_read+0x12>
  }

  return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e009      	b.n	80011a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf1      	blt.n	800118c <_write+0x12>
  }
  return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_close>:

int _close(int file)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011da:	605a      	str	r2, [r3, #4]
  return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_isatty>:

int _isatty(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f003 fe34 	bl	8004eb8 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20018000 	.word	0x20018000
 800127c:	00000400 	.word	0x00000400
 8001280:	2000012c 	.word	0x2000012c
 8001284:	20000280 	.word	0x20000280

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b0:	f7ff ffea 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	; (80012ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	; (80012f8 <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f003 fdf3 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012de:	f7ff fb29 	bl	8000934 <main>

080012e2 <LoopForever>:

LoopForever:
    b LoopForever
 80012e2:	e7fe      	b.n	80012e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012f0:	080060b4 	.word	0x080060b4
  ldr r2, =_sbss
 80012f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012f8:	20000280 	.word	0x20000280

080012fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_2_IRQHandler>

080012fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f001 fb83 	bl	8002a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130e:	200f      	movs	r0, #15
 8001310:	f000 f80e 	bl	8001330 <HAL_InitTick>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	e001      	b.n	8001324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001320:	f7ff fdfc 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001324:	79fb      	ldrb	r3, [r7, #7]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_InitTick+0x6c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d023      	beq.n	800138c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_InitTick+0x70>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_InitTick+0x6c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fb8f 	bl	8002a7e <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d809      	bhi.n	8001380 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f001 fb59 	bl	8002a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_InitTick+0x74>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e007      	b.n	8001390 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e001      	b.n	8001390 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000130 	.word	0x20000130

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000130 	.word	0x20000130

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008

08001430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3360      	adds	r3, #96	; 0x60
 80014aa:	461a      	mov	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <LL_ADC_SetOffset+0x44>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	03fff000 	.word	0x03fff000

080014e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3360      	adds	r3, #96	; 0x60
 80014ee:	461a      	mov	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3360      	adds	r3, #96	; 0x60
 800151c:	461a      	mov	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	431a      	orrs	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3330      	adds	r3, #48	; 0x30
 8001578:	461a      	mov	r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	4413      	add	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	211f      	movs	r1, #31
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	401a      	ands	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	0e9b      	lsrs	r3, r3, #26
 80015a0:	f003 011f 	and.w	r1, r3, #31
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	431a      	orrs	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3314      	adds	r3, #20
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	0e5b      	lsrs	r3, r3, #25
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	0d1b      	lsrs	r3, r3, #20
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2107      	movs	r1, #7
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	401a      	ands	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	0d1b      	lsrs	r3, r3, #20
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0318 	and.w	r3, r3, #24
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <LL_ADC_SetChannelSingleDiff+0x44>)
 800163c:	40d9      	lsrs	r1, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	400b      	ands	r3, r1
 8001642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001646:	431a      	orrs	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	0007ffff 	.word	0x0007ffff

08001660 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6093      	str	r3, [r2, #8]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016d0:	d101      	bne.n	80016d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001720:	d101      	bne.n	8001726 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <LL_ADC_IsEnabled+0x18>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <LL_ADC_IsEnabled+0x1a>
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001792:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001796:	f043 0204 	orr.w	r2, r3, #4
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e130      	b.n	8001a74 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fb9f 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff3f 	bl	80016bc <LL_ADC_IsDeepPowerDownEnabled>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff25 	bl	8001698 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff5a 	bl	800170c <LL_ADC_IsInternalRegulatorEnabled>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d115      	bne.n	800188a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff3e 	bl	80016e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001868:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <HAL_ADC_Init+0x284>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	4a84      	ldr	r2, [pc, #528]	; (8001a80 <HAL_ADC_Init+0x288>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800187c:	e002      	b.n	8001884 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3b01      	subs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff3c 	bl	800170c <LL_ADC_IsInternalRegulatorEnabled>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f043 0210 	orr.w	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff75 	bl	80017aa <LL_ADC_REG_IsConversionOngoing>
 80018c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80c9 	bne.w	8001a62 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 80c5 	bne.w	8001a62 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018e0:	f043 0202 	orr.w	r2, r3, #2
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff35 	bl	800175c <LL_ADC_IsEnabled>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d115      	bne.n	8001924 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018f8:	4862      	ldr	r0, [pc, #392]	; (8001a84 <HAL_ADC_Init+0x28c>)
 80018fa:	f7ff ff2f 	bl	800175c <LL_ADC_IsEnabled>
 80018fe:	4604      	mov	r4, r0
 8001900:	4861      	ldr	r0, [pc, #388]	; (8001a88 <HAL_ADC_Init+0x290>)
 8001902:	f7ff ff2b 	bl	800175c <LL_ADC_IsEnabled>
 8001906:	4603      	mov	r3, r0
 8001908:	431c      	orrs	r4, r3
 800190a:	4860      	ldr	r0, [pc, #384]	; (8001a8c <HAL_ADC_Init+0x294>)
 800190c:	f7ff ff26 	bl	800175c <LL_ADC_IsEnabled>
 8001910:	4603      	mov	r3, r0
 8001912:	4323      	orrs	r3, r4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4619      	mov	r1, r3
 800191e:	485c      	ldr	r0, [pc, #368]	; (8001a90 <HAL_ADC_Init+0x298>)
 8001920:	f7ff fd86 	bl	8001430 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e5b      	ldrb	r3, [r3, #25]
 8001928:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800192e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001934:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800193a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001942:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d106      	bne.n	8001960 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	3b01      	subs	r3, #1
 8001958:	045b      	lsls	r3, r3, #17
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	d009      	beq.n	800197c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <HAL_ADC_Init+0x29c>)
 8001984:	4013      	ands	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	430b      	orrs	r3, r1
 800198e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff1b 	bl	80017d0 <LL_ADC_INJ_IsConversionOngoing>
 800199a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d13d      	bne.n	8001a1e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d13a      	bne.n	8001a1e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019c4:	f023 0302 	bic.w	r3, r3, #2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	69b9      	ldr	r1, [r7, #24]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d118      	bne.n	8001a0e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019f2:	4311      	orrs	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019f8:	4311      	orrs	r1, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019fe:	430a      	orrs	r2, r1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	e007      	b.n	8001a1e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10c      	bne.n	8001a40 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f023 010f 	bic.w	r1, r3, #15
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	1e5a      	subs	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3e:	e007      	b.n	8001a50 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 020f 	bic.w	r2, r2, #15
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f023 0303 	bic.w	r3, r3, #3
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a60:	e007      	b.n	8001a72 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3724      	adds	r7, #36	; 0x24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	053e2d63 	.word	0x053e2d63
 8001a84:	50040000 	.word	0x50040000
 8001a88:	50040100 	.word	0x50040100
 8001a8c:	50040200 	.word	0x50040200
 8001a90:	50040300 	.word	0x50040300
 8001a94:	fff0c007 	.word	0xfff0c007

08001a98 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aa0:	4857      	ldr	r0, [pc, #348]	; (8001c00 <HAL_ADC_Start+0x168>)
 8001aa2:	f7ff fddd 	bl	8001660 <LL_ADC_GetMultimode>
 8001aa6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fe7c 	bl	80017aa <LL_ADC_REG_IsConversionOngoing>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 809c 	bne.w	8001bf2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_Start+0x30>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e097      	b.n	8001bf8 <HAL_ADC_Start+0x160>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fd73 	bl	80025bc <ADC_Enable>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 8083 	bne.w	8001be8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a42      	ldr	r2, [pc, #264]	; (8001c04 <HAL_ADC_Start+0x16c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d002      	beq.n	8001b06 <HAL_ADC_Start+0x6e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e000      	b.n	8001b08 <HAL_ADC_Start+0x70>
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_ADC_Start+0x170>)
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d002      	beq.n	8001b16 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2e:	d106      	bne.n	8001b3e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	f023 0206 	bic.w	r2, r3, #6
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	221c      	movs	r2, #28
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <HAL_ADC_Start+0x16c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d002      	beq.n	8001b64 <HAL_ADC_Start+0xcc>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_Start+0xce>
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_ADC_Start+0x170>)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d008      	beq.n	8001b80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d002      	beq.n	8001b80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d114      	bne.n	8001baa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fded 	bl	8001782 <LL_ADC_REG_StartConversion>
 8001ba8:	e025      	b.n	8001bf6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_ADC_Start+0x16c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d002      	beq.n	8001bc6 <HAL_ADC_Start+0x12e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_Start+0x130>
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_ADC_Start+0x170>)
 8001bc8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00f      	beq.n	8001bf6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
 8001be6:	e006      	b.n	8001bf6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bf0:	e001      	b.n	8001bf6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	50040300 	.word	0x50040300
 8001c04:	50040100 	.word	0x50040100
 8001c08:	50040000 	.word	0x50040000

08001c0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c16:	4866      	ldr	r0, [pc, #408]	; (8001db0 <HAL_ADC_PollForConversion+0x1a4>)
 8001c18:	f7ff fd22 	bl	8001660 <LL_ADC_GetMultimode>
 8001c1c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d102      	bne.n	8001c2c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c26:	2308      	movs	r3, #8
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e02a      	b.n	8001c82 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d002      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	d111      	bne.n	8001c62 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0a4      	b.n	8001da6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c60:	e00f      	b.n	8001c82 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c62:	4853      	ldr	r0, [pc, #332]	; (8001db0 <HAL_ADC_PollForConversion+0x1a4>)
 8001c64:	f7ff fd0a 	bl	800167c <LL_ADC_GetMultiDMATransfer>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f043 0220 	orr.w	r2, r3, #32
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e093      	b.n	8001da6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c7e:	2304      	movs	r3, #4
 8001c80:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c82:	f7ff fba5 	bl	80013d0 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c88:	e021      	b.n	8001cce <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d01d      	beq.n	8001cce <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c92:	f7ff fb9d 	bl	80013d0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <HAL_ADC_PollForConversion+0x9c>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d112      	bne.n	8001cce <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10b      	bne.n	8001cce <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f043 0204 	orr.w	r2, r3, #4
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e06b      	b.n	8001da6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0d6      	beq.n	8001c8a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fc28 	bl	8001542 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01c      	beq.n	8001d32 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7e5b      	ldrb	r3, [r3, #25]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d118      	bne.n	8001d32 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d111      	bne.n	8001d32 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <HAL_ADC_PollForConversion+0x1a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_PollForConversion+0x136>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e000      	b.n	8001d44 <HAL_ADC_PollForConversion+0x138>
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_ADC_PollForConversion+0x1ac>)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d008      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d002      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b09      	cmp	r3, #9
 8001d5c:	d104      	bne.n	8001d68 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e00c      	b.n	8001d82 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <HAL_ADC_PollForConversion+0x1a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d002      	beq.n	8001d78 <HAL_ADC_PollForConversion+0x16c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_PollForConversion+0x16e>
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_ADC_PollForConversion+0x1ac>)
 8001d7a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d104      	bne.n	8001d92 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e008      	b.n	8001da4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	220c      	movs	r2, #12
 8001da2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	50040300 	.word	0x50040300
 8001db4:	50040100 	.word	0x50040100
 8001db8:	50040000 	.word	0x50040000

08001dbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b6      	sub	sp, #216	; 0xd8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x22>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e3c9      	b.n	800258e <HAL_ADC_ConfigChannel+0x7b6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fccf 	bl	80017aa <LL_ADC_REG_IsConversionOngoing>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 83aa 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d824      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	3b02      	subs	r3, #2
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d81b      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0x8e>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <HAL_ADC_ConfigChannel+0x5c>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e4d 	.word	0x08001e4d
 8001e3c:	08001e55 	.word	0x08001e55
 8001e40:	08001e5d 	.word	0x08001e5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e44:	230c      	movs	r3, #12
 8001e46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e4a:	e010      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e4c:	2312      	movs	r3, #18
 8001e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e52:	e00c      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e54:	2318      	movs	r3, #24
 8001e56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e5a:	e008      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e64:	e003      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e66:	2306      	movs	r3, #6
 8001e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e7c:	f7ff fb74 	bl	8001568 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fc90 	bl	80017aa <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fc9c 	bl	80017d0 <LL_ADC_INJ_IsConversionOngoing>
 8001e98:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 81a4 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 819f 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f7ff fb7f 	bl	80015c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00a      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6919      	ldr	r1, [r3, #16]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef4:	f7ff fad0 	bl	8001498 <LL_ADC_SetOffset>
 8001ef8:	e179      	b.n	80021ee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff faed 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x14e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fae2 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	e01e      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x18c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fad7 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e004      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1a4>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	e018      	b.n	8001fae <HAL_ADC_ConfigChannel+0x1d6>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001f90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e004      	b.n	8001fae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d106      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff faa6 	bl	800150c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fa8a 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x214>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fa7f 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	0e9b      	lsrs	r3, r3, #26
 8001fe6:	f003 021f 	and.w	r2, r3, #31
 8001fea:	e01e      	b.n	800202a <HAL_ADC_ConfigChannel+0x252>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fa74 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800200a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800200e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e004      	b.n	8002028 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800201e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x26a>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	e018      	b.n	8002074 <HAL_ADC_ConfigChannel+0x29c>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800205e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002066:	2320      	movs	r3, #32
 8002068:	e004      	b.n	8002074 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800206a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fa43 	bl	800150c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2102      	movs	r1, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fa27 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x2da>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2102      	movs	r1, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fa1c 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	e01e      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x318>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2102      	movs	r1, #2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fa11 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80020d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80020d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e004      	b.n	80020ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80020e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x330>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	e014      	b.n	8002132 <HAL_ADC_ConfigChannel+0x35a>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800211c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e004      	b.n	8002132 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002128:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002132:	429a      	cmp	r2, r3
 8002134:	d106      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f9e4 	bl	800150c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2103      	movs	r1, #3
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f9c8 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x398>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2103      	movs	r1, #3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff f9bd 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	f003 021f 	and.w	r2, r3, #31
 800216e:	e017      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x3c8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2103      	movs	r1, #3
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f9b2 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800218c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e003      	b.n	800219e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x3e0>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	e011      	b.n	80021dc <HAL_ADC_ConfigChannel+0x404>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80021c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80021ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021dc:	429a      	cmp	r2, r3
 80021de:	d106      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	2103      	movs	r1, #3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff f98f 	bl	800150c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fab2 	bl	800175c <LL_ADC_IsEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 8140 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	461a      	mov	r2, r3
 800220e:	f7ff fa03 	bl	8001618 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4a8f      	ldr	r2, [pc, #572]	; (8002454 <HAL_ADC_ConfigChannel+0x67c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f040 8131 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x46e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	3301      	adds	r3, #1
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b09      	cmp	r3, #9
 800223c:	bf94      	ite	ls
 800223e:	2301      	movls	r3, #1
 8002240:	2300      	movhi	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e019      	b.n	800227a <HAL_ADC_ConfigChannel+0x4a2>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002256:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e003      	b.n	800226a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b09      	cmp	r3, #9
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227a:	2b00      	cmp	r3, #0
 800227c:	d079      	beq.n	8002372 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_ADC_ConfigChannel+0x4c2>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	3301      	adds	r3, #1
 8002292:	069b      	lsls	r3, r3, #26
 8002294:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002298:	e015      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x4ee>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	069b      	lsls	r3, r3, #26
 80022c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x50e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	e017      	b.n	8002316 <HAL_ADC_ConfigChannel+0x53e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e003      	b.n	800230a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	ea42 0103 	orr.w	r1, r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x564>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	3301      	adds	r3, #1
 800232e:	f003 021f 	and.w	r2, r3, #31
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	e018      	b.n	800236e <HAL_ADC_ConfigChannel+0x596>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e003      	b.n	8002360 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236e:	430b      	orrs	r3, r1
 8002370:	e081      	b.n	8002476 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_ADC_ConfigChannel+0x5b6>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	3301      	adds	r3, #1
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238c:	e015      	b.n	80023ba <HAL_ADC_ConfigChannel+0x5e2>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e003      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	069b      	lsls	r3, r3, #26
 80023b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_ADC_ConfigChannel+0x602>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	e017      	b.n	800240a <HAL_ADC_ConfigChannel+0x632>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	61bb      	str	r3, [r7, #24]
  return result;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e003      	b.n	80023fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	ea42 0103 	orr.w	r1, r2, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x65e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	3301      	adds	r3, #1
 8002422:	f003 021f 	and.w	r2, r3, #31
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	3b1e      	subs	r3, #30
 800242e:	051b      	lsls	r3, r3, #20
 8002430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002434:	e01e      	b.n	8002474 <HAL_ADC_ConfigChannel+0x69c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	60fb      	str	r3, [r7, #12]
  return result;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d104      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e006      	b.n	8002460 <HAL_ADC_ConfigChannel+0x688>
 8002452:	bf00      	nop
 8002454:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	3b1e      	subs	r3, #30
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247a:	4619      	mov	r1, r3
 800247c:	f7ff f8a0 	bl	80015c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b44      	ldr	r3, [pc, #272]	; (8002598 <HAL_ADC_ConfigChannel+0x7c0>)
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d07a      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248c:	4843      	ldr	r0, [pc, #268]	; (800259c <HAL_ADC_ConfigChannel+0x7c4>)
 800248e:	f7fe fff5 	bl	800147c <LL_ADC_GetCommonPathInternalCh>
 8002492:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a41      	ldr	r2, [pc, #260]	; (80025a0 <HAL_ADC_ConfigChannel+0x7c8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d12c      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d126      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3c      	ldr	r2, [pc, #240]	; (80025a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x6e8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <HAL_ADC_ConfigChannel+0x7d0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d15d      	bne.n	800257c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024c8:	4619      	mov	r1, r3
 80024ca:	4834      	ldr	r0, [pc, #208]	; (800259c <HAL_ADC_ConfigChannel+0x7c4>)
 80024cc:	f7fe ffc3 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_ADC_ConfigChannel+0x7d4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	4a36      	ldr	r2, [pc, #216]	; (80025b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024ea:	e002      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024f8:	e040      	b.n	800257c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d118      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d112      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x74c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d12d      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252c:	4619      	mov	r1, r3
 800252e:	481b      	ldr	r0, [pc, #108]	; (800259c <HAL_ADC_ConfigChannel+0x7c4>)
 8002530:	f7fe ff91 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002534:	e024      	b.n	8002580 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_ADC_ConfigChannel+0x7e0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d120      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d11a      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d115      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002556:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800255a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800255e:	4619      	mov	r1, r3
 8002560:	480e      	ldr	r0, [pc, #56]	; (800259c <HAL_ADC_ConfigChannel+0x7c4>)
 8002562:	f7fe ff78 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
 8002566:	e00c      	b.n	8002582 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800257a:	e002      	b.n	8002582 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800257c:	bf00      	nop
 800257e:	e000      	b.n	8002582 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002580:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800258a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800258e:	4618      	mov	r0, r3
 8002590:	37d8      	adds	r7, #216	; 0xd8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	80080000 	.word	0x80080000
 800259c:	50040300 	.word	0x50040300
 80025a0:	c7520000 	.word	0xc7520000
 80025a4:	50040000 	.word	0x50040000
 80025a8:	50040200 	.word	0x50040200
 80025ac:	20000000 	.word	0x20000000
 80025b0:	053e2d63 	.word	0x053e2d63
 80025b4:	cb840000 	.word	0xcb840000
 80025b8:	80000001 	.word	0x80000001

080025bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f8c5 	bl	800175c <LL_ADC_IsEnabled>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d169      	bne.n	80026ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <ADC_Enable+0xfc>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e055      	b.n	80026ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f894 	bl	8001734 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800260c:	482b      	ldr	r0, [pc, #172]	; (80026bc <ADC_Enable+0x100>)
 800260e:	f7fe ff35 	bl	800147c <LL_ADC_GetCommonPathInternalCh>
 8002612:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <ADC_Enable+0x104>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <ADC_Enable+0x108>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002636:	e002      	b.n	800263e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3b01      	subs	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002644:	f7fe fec4 	bl	80013d0 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800264a:	e028      	b.n	800269e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff f883 	bl	800175c <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f867 	bl	8001734 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002666:	f7fe feb3 	bl	80013d0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d914      	bls.n	800269e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d00d      	beq.n	800269e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d1cf      	bne.n	800264c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	8000003f 	.word	0x8000003f
 80026bc:	50040300 	.word	0x50040300
 80026c0:	20000000 	.word	0x20000000
 80026c4:	053e2d63 	.word	0x053e2d63

080026c8 <LL_ADC_IsEnabled>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <LL_ADC_IsEnabled+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_ADC_IsEnabled+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_IsConversionOngoing>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d101      	bne.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b09f      	sub	sp, #124	; 0x7c
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800272e:	2302      	movs	r3, #2
 8002730:	e093      	b.n	800285a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800273a:	2300      	movs	r3, #0
 800273c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800273e:	2300      	movs	r3, #0
 8002740:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a47      	ldr	r2, [pc, #284]	; (8002864 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d102      	bne.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800274c:	4b46      	ldr	r3, [pc, #280]	; (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	e001      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e072      	b.n	800285a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffb9 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 800277c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffb3 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d154      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800278e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002790:	2b00      	cmp	r3, #0
 8002792:	d151      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002796:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02c      	beq.n	80027fa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027b2:	035b      	lsls	r3, r3, #13
 80027b4:	430b      	orrs	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027bc:	4829      	ldr	r0, [pc, #164]	; (8002864 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027be:	f7ff ff83 	bl	80026c8 <LL_ADC_IsEnabled>
 80027c2:	4604      	mov	r4, r0
 80027c4:	4828      	ldr	r0, [pc, #160]	; (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027c6:	f7ff ff7f 	bl	80026c8 <LL_ADC_IsEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	431c      	orrs	r4, r3
 80027ce:	4828      	ldr	r0, [pc, #160]	; (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80027d0:	f7ff ff7a 	bl	80026c8 <LL_ADC_IsEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4323      	orrs	r3, r4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d137      	bne.n	800284c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027e4:	f023 030f 	bic.w	r3, r3, #15
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	6811      	ldr	r1, [r2, #0]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	6892      	ldr	r2, [r2, #8]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027f8:	e028      	b.n	800284c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002804:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002806:	4817      	ldr	r0, [pc, #92]	; (8002864 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002808:	f7ff ff5e 	bl	80026c8 <LL_ADC_IsEnabled>
 800280c:	4604      	mov	r4, r0
 800280e:	4816      	ldr	r0, [pc, #88]	; (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002810:	f7ff ff5a 	bl	80026c8 <LL_ADC_IsEnabled>
 8002814:	4603      	mov	r3, r0
 8002816:	431c      	orrs	r4, r3
 8002818:	4815      	ldr	r0, [pc, #84]	; (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800281a:	f7ff ff55 	bl	80026c8 <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	4323      	orrs	r3, r4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d112      	bne.n	800284c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800282e:	f023 030f 	bic.w	r3, r3, #15
 8002832:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002834:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002836:	e009      	b.n	800284c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800284a:	e000      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800284c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002856:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800285a:	4618      	mov	r0, r3
 800285c:	377c      	adds	r7, #124	; 0x7c
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	50040000 	.word	0x50040000
 8002868:	50040100 	.word	0x50040100
 800286c:	50040300 	.word	0x50040300
 8002870:	50040200 	.word	0x50040200

08002874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800289c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db0b      	blt.n	8002902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	f003 021f 	and.w	r2, r3, #31
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <__NVIC_EnableIRQ+0x38>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2001      	movs	r0, #1
 80028fa:	fa00 f202 	lsl.w	r2, r0, r2
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	; (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
         );
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ff8e 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff29 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3c:	f7ff ff3e 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff8e 	bl	8002968 <NVIC_EncodePriority>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff5d 	bl	8002914 <__NVIC_SetPriority>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff31 	bl	80028d8 <__NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ffa2 	bl	80029d0 <SysTick_Config>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e17f      	b.n	8002da8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8171 	beq.w	8002da2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d005      	beq.n	8002ad8 <HAL_GPIO_Init+0x40>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d130      	bne.n	8002b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f003 0201 	and.w	r2, r3, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d118      	bne.n	8002b78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	f003 0201 	and.w	r2, r3, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d017      	beq.n	8002bb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d123      	bne.n	8002c08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	6939      	ldr	r1, [r7, #16]
 8002c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80ac 	beq.w	8002da2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4e:	4a5e      	ldr	r2, [pc, #376]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6613      	str	r3, [r2, #96]	; 0x60
 8002c56:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c62:	4a5a      	ldr	r2, [pc, #360]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_Init+0x242>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <HAL_GPIO_Init+0x338>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_Init+0x23e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_GPIO_Init+0x33c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x23a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_GPIO_Init+0x340>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x236>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_GPIO_Init+0x344>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x232>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <HAL_GPIO_Init+0x348>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x22e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_GPIO_Init+0x34c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x22a>
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	e00c      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	e00a      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	e008      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e004      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	f002 0203 	and.w	r2, r2, #3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cec:	4937      	ldr	r1, [pc, #220]	; (8002dcc <HAL_GPIO_Init+0x334>)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d1e:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d24:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <HAL_GPIO_Init+0x350>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f47f ae78 	bne.w	8002aa8 <HAL_GPIO_Init+0x10>
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48001000 	.word	0x48001000
 8002de0:	48001400 	.word	0x48001400
 8002de4:	48001800 	.word	0x48001800
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f806 	bl	8002e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40010400 	.word	0x40010400

08002e4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40007000 	.word	0x40007000

08002e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8e:	d130      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9c:	d038      	beq.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2232      	movs	r2, #50	; 0x32
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9b      	lsrs	r3, r3, #18
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec4:	e002      	b.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d102      	bne.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f2      	bne.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eec:	d110      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e00f      	b.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efe:	d007      	beq.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f08:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40007000 	.word	0x40007000
 8002f24:	20000000 	.word	0x20000000
 8002f28:	431bde83 	.word	0x431bde83

08002f2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e3ca      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4b97      	ldr	r3, [pc, #604]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4b94      	ldr	r3, [pc, #592]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80e4 	beq.w	8003128 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_RCC_OscConfig+0x4a>
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	f040 808b 	bne.w	8003084 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 8087 	bne.w	8003084 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f76:	4b89      	ldr	r3, [pc, #548]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x62>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e3a2      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	4b82      	ldr	r3, [pc, #520]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x7c>
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa6:	e005      	b.n	8002fb4 <HAL_RCC_OscConfig+0x88>
 8002fa8:	4b7c      	ldr	r3, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d223      	bcs.n	8003000 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fd1d 	bl	80039fc <RCC_SetFlashLatencyFromMSIRange>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e383      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fcc:	4b73      	ldr	r3, [pc, #460]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a72      	ldr	r2, [pc, #456]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f043 0308 	orr.w	r3, r3, #8
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b70      	ldr	r3, [pc, #448]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	496d      	ldr	r1, [pc, #436]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fea:	4b6c      	ldr	r3, [pc, #432]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	4968      	ldr	r1, [pc, #416]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
 8002ffe:	e025      	b.n	800304c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003000:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a65      	ldr	r2, [pc, #404]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003006:	f043 0308 	orr.w	r3, r3, #8
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4960      	ldr	r1, [pc, #384]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	495b      	ldr	r1, [pc, #364]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fcdd 	bl	80039fc <RCC_SetFlashLatencyFromMSIRange>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e343      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800304c:	f000 fc4a 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b52      	ldr	r3, [pc, #328]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	4950      	ldr	r1, [pc, #320]	; (80031a0 <HAL_RCC_OscConfig+0x274>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
 8003068:	4a4e      	ldr	r2, [pc, #312]	; (80031a4 <HAL_RCC_OscConfig+0x278>)
 800306a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800306c:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <HAL_RCC_OscConfig+0x27c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe f95d 	bl	8001330 <HAL_InitTick>
 8003076:	4603      	mov	r3, r0
 8003078:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d052      	beq.n	8003126 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	e327      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d032      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a42      	ldr	r2, [pc, #264]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003098:	f7fe f99a 	bl	80013d0 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a0:	f7fe f996 	bl	80013d0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e310      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	4b37      	ldr	r3, [pc, #220]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a36      	ldr	r2, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4931      	ldr	r1, [pc, #196]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	492c      	ldr	r1, [pc, #176]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
 80030f0:	e01a      	b.n	8003128 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030f2:	4b2a      	ldr	r3, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a29      	ldr	r2, [pc, #164]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030fe:	f7fe f967 	bl	80013d0 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003106:	f7fe f963 	bl	80013d0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e2dd      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003118:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x1da>
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003126:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d074      	beq.n	800321e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x21a>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	d10e      	bne.n	800315e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d10b      	bne.n	800315e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d064      	beq.n	800321c <HAL_RCC_OscConfig+0x2f0>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d160      	bne.n	800321c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e2ba      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x24a>
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e026      	b.n	80031c4 <HAL_RCC_OscConfig+0x298>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317e:	d115      	bne.n	80031ac <HAL_RCC_OscConfig+0x280>
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a05      	ldr	r2, [pc, #20]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a02      	ldr	r2, [pc, #8]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x298>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	08005f8c 	.word	0x08005f8c
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000004 	.word	0x20000004
 80031ac:	4ba0      	ldr	r3, [pc, #640]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a9f      	ldr	r2, [pc, #636]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b9d      	ldr	r3, [pc, #628]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a9c      	ldr	r2, [pc, #624]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe f900 	bl	80013d0 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe f8fc 	bl	80013d0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e276      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	4b92      	ldr	r3, [pc, #584]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2a8>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe f8ec 	bl	80013d0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe f8e8 	bl	80013d0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e262      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320e:	4b88      	ldr	r3, [pc, #544]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x2d0>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d060      	beq.n	80032ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d005      	beq.n	800323c <HAL_RCC_OscConfig+0x310>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d119      	bne.n	800326a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d116      	bne.n	800326a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800323c:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_OscConfig+0x328>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e23f      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4b76      	ldr	r3, [pc, #472]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	4973      	ldr	r1, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003268:	e040      	b.n	80032ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d023      	beq.n	80032ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003272:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe f8a7 	bl	80013d0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7fe f8a3 	bl	80013d0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e21d      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b62      	ldr	r3, [pc, #392]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	495f      	ldr	r1, [pc, #380]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
 80032b8:	e018      	b.n	80032ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5c      	ldr	r2, [pc, #368]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80032c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe f883 	bl	80013d0 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe f87f 	bl	80013d0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1f9      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d03c      	beq.n	8003372 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01c      	beq.n	800333a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003300:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003306:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fe f85e 	bl	80013d0 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe f85a 	bl	80013d0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1d4      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 800332c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ef      	beq.n	8003318 <HAL_RCC_OscConfig+0x3ec>
 8003338:	e01b      	b.n	8003372 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 800333c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003340:	4a3b      	ldr	r2, [pc, #236]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe f841 	bl	80013d0 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003352:	f7fe f83d 	bl	80013d0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e1b7      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ef      	bne.n	8003352 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a6 	beq.w	80034cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003380:	2300      	movs	r3, #0
 8003382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	4a26      	ldr	r2, [pc, #152]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339a:	6593      	str	r3, [r2, #88]	; 0x58
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a8:	2301      	movs	r3, #1
 80033aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <HAL_RCC_OscConfig+0x508>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d118      	bne.n	80033ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_OscConfig+0x508>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_RCC_OscConfig+0x508>)
 80033be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c4:	f7fe f804 	bl	80013d0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033cc:	f7fe f800 	bl	80013d0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e17a      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_RCC_OscConfig+0x508>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d108      	bne.n	8003404 <HAL_RCC_OscConfig+0x4d8>
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003402:	e029      	b.n	8003458 <HAL_RCC_OscConfig+0x52c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d115      	bne.n	8003438 <HAL_RCC_OscConfig+0x50c>
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	4a07      	ldr	r2, [pc, #28]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	4a03      	ldr	r2, [pc, #12]	; (8003430 <HAL_RCC_OscConfig+0x504>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x52c>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	40007000 	.word	0x40007000
 8003438:	4b9c      	ldr	r3, [pc, #624]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	4a9b      	ldr	r2, [pc, #620]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003448:	4b98      	ldr	r3, [pc, #608]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	4a97      	ldr	r2, [pc, #604]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d016      	beq.n	800348e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fd ffb6 	bl	80013d0 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fd ffb2 	bl	80013d0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e12a      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	4b8b      	ldr	r3, [pc, #556]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ed      	beq.n	8003468 <HAL_RCC_OscConfig+0x53c>
 800348c:	e015      	b.n	80034ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd ff9f 	bl	80013d0 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd ff9b 	bl	80013d0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e113      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ac:	4b7f      	ldr	r3, [pc, #508]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ed      	bne.n	8003496 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ba:	7ffb      	ldrb	r3, [r7, #31]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b7a      	ldr	r3, [pc, #488]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	4a79      	ldr	r2, [pc, #484]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80fe 	beq.w	80036d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	2b02      	cmp	r3, #2
 80034dc:	f040 80d0 	bne.w	8003680 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034e0:	4b72      	ldr	r3, [pc, #456]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d130      	bne.n	8003556 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	3b01      	subs	r3, #1
 8003500:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d127      	bne.n	8003556 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d11f      	bne.n	8003556 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003520:	2a07      	cmp	r2, #7
 8003522:	bf14      	ite	ne
 8003524:	2201      	movne	r2, #1
 8003526:	2200      	moveq	r2, #0
 8003528:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d109      	bne.n	8003556 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d06e      	beq.n	8003634 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b0c      	cmp	r3, #12
 800355a:	d069      	beq.n	8003630 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0ad      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a4b      	ldr	r2, [pc, #300]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800357e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003582:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003584:	f7fd ff24 	bl	80013d0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fd ff20 	bl	80013d0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e09a      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035aa:	4b40      	ldr	r3, [pc, #256]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <HAL_RCC_OscConfig+0x784>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035c4:	0212      	lsls	r2, r2, #8
 80035c6:	4311      	orrs	r1, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035cc:	0852      	lsrs	r2, r2, #1
 80035ce:	3a01      	subs	r2, #1
 80035d0:	0552      	lsls	r2, r2, #21
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035d8:	0852      	lsrs	r2, r2, #1
 80035da:	3a01      	subs	r2, #1
 80035dc:	0652      	lsls	r2, r2, #25
 80035de:	4311      	orrs	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035e4:	0912      	lsrs	r2, r2, #4
 80035e6:	0452      	lsls	r2, r2, #17
 80035e8:	430a      	orrs	r2, r1
 80035ea:	4930      	ldr	r1, [pc, #192]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035f0:	4b2e      	ldr	r3, [pc, #184]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80035f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035fc:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003606:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003608:	f7fd fee2 	bl	80013d0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fd fede 	bl	80013d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e058      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800362e:	e050      	b.n	80036d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e04f      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d148      	bne.n	80036d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800364c:	4b17      	ldr	r3, [pc, #92]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003656:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003658:	f7fd feba 	bl	80013d0 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7fd feb6 	bl	80013d0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e030      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x734>
 800367e:	e028      	b.n	80036d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d023      	beq.n	80036ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a08      	ldr	r2, [pc, #32]	; (80036ac <HAL_RCC_OscConfig+0x780>)
 800368c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fd fe9d 	bl	80013d0 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003698:	e00c      	b.n	80036b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369a:	f7fd fe99 	bl	80013d0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d905      	bls.n	80036b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e013      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_OscConfig+0x7b0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ec      	bne.n	800369a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_RCC_OscConfig+0x7b0>)
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	4905      	ldr	r1, [pc, #20]	; (80036dc <HAL_RCC_OscConfig+0x7b0>)
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x7b4>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	60cb      	str	r3, [r1, #12]
 80036cc:	e001      	b.n	80036d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	feeefffc 	.word	0xfeeefffc

080036e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0e7      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b75      	ldr	r3, [pc, #468]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d910      	bls.n	8003728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b72      	ldr	r3, [pc, #456]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	4970      	ldr	r1, [pc, #448]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b6e      	ldr	r3, [pc, #440]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0cf      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003740:	429a      	cmp	r2, r3
 8003742:	d908      	bls.n	8003756 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4960      	ldr	r1, [pc, #384]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04c      	beq.n	80037fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b5a      	ldr	r3, [pc, #360]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0a6      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003782:	4b54      	ldr	r3, [pc, #336]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d115      	bne.n	80037ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e09a      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800379a:	4b4e      	ldr	r3, [pc, #312]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e08e      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e086      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4943      	ldr	r1, [pc, #268]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037cc:	f7fd fe00 	bl	80013d0 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fd fdfc 	bl	80013d0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e06e      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003814:	429a      	cmp	r2, r3
 8003816:	d208      	bcs.n	800382a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	492b      	ldr	r1, [pc, #172]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382a:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d210      	bcs.n	800385a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 0207 	bic.w	r2, r3, #7
 8003840:	4923      	ldr	r1, [pc, #140]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <HAL_RCC_ClockConfig+0x1ec>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e036      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	4918      	ldr	r1, [pc, #96]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4910      	ldr	r1, [pc, #64]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003898:	f000 f824 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	490b      	ldr	r1, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1f4>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1f8>)
 80038b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1fc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fd37 	bl	8001330 <HAL_InitTick>
 80038c2:	4603      	mov	r3, r0
 80038c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80038c6:	7afb      	ldrb	r3, [r7, #11]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08005f8c 	.word	0x08005f8c
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d121      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d11e      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003924:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e005      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003940:	4a2b      	ldr	r2, [pc, #172]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003954:	e00a      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d102      	bne.n	8003962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e004      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d101      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003968:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800396a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d134      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0xa6>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d003      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0xac>
 8003988:	e005      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800398c:	617b      	str	r3, [r7, #20]
      break;
 800398e:	e005      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003992:	617b      	str	r3, [r7, #20]
      break;
 8003994:	e002      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	617b      	str	r3, [r7, #20]
      break;
 800399a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	fb03 f202 	mul.w	r2, r3, r2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	0e5b      	lsrs	r3, r3, #25
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	3301      	adds	r3, #1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039dc:	69bb      	ldr	r3, [r7, #24]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	; 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	08005f9c 	.word	0x08005f9c
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	007a1200 	.word	0x007a1200

080039fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a14:	f7ff fa26 	bl	8002e64 <HAL_PWREx_GetVoltageRange>
 8003a18:	6178      	str	r0, [r7, #20]
 8003a1a:	e014      	b.n	8003a46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a26:	6593      	str	r3, [r2, #88]	; 0x58
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a34:	f7ff fa16 	bl	8002e64 <HAL_PWREx_GetVoltageRange>
 8003a38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4c:	d10b      	bne.n	8003a66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d919      	bls.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2ba0      	cmp	r3, #160	; 0xa0
 8003a58:	d902      	bls.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e013      	b.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a60:	2301      	movs	r3, #1
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	e010      	b.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d902      	bls.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	e00a      	b.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b80      	cmp	r3, #128	; 0x80
 8003a76:	d102      	bne.n	8003a7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a78:	2302      	movs	r3, #2
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	e004      	b.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b70      	cmp	r3, #112	; 0x70
 8003a82:	d101      	bne.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a84:	2301      	movs	r3, #1
 8003a86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 0207 	bic.w	r2, r3, #7
 8003a90:	4909      	ldr	r1, [pc, #36]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40022000 	.word	0x40022000

08003abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac8:	2300      	movs	r3, #0
 8003aca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d041      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003adc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ae0:	d02a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ae2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ae6:	d824      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ae8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af2:	d81e      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d010      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003afe:	e018      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b00:	4b86      	ldr	r3, [pc, #536]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a85      	ldr	r2, [pc, #532]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b0c:	e015      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fabb 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1e:	e00c      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3320      	adds	r3, #32
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fba6 	bl	8004278 <RCCEx_PLLSAI2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b30:	e003      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	74fb      	strb	r3, [r7, #19]
      break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b40:	4b76      	ldr	r3, [pc, #472]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4e:	4973      	ldr	r1, [pc, #460]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d041      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b70:	d02a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b76:	d824      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b82:	d81e      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b8c:	d010      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b8e:	e018      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b90:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a61      	ldr	r2, [pc, #388]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b9c:	e015      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fa73 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bae:	e00c      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3320      	adds	r3, #32
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fb5e 	bl	8004278 <RCCEx_PLLSAI2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bc0:	e003      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bd0:	4b52      	ldr	r3, [pc, #328]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bde:	494f      	ldr	r1, [pc, #316]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003be6:	e001      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a0 	beq.w	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	4a40      	ldr	r2, [pc, #256]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c20:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c30:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a3a      	ldr	r2, [pc, #232]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c3c:	f7fd fbc8 	bl	80013d0 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c42:	e009      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c44:	f7fd fbc4 	bl	80013d0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d902      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	74fb      	strb	r3, [r7, #19]
        break;
 8003c56:	e005      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c58:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ef      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d15c      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c6a:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01f      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d019      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7fd fb83 	bl	80013d0 <HAL_GetTick>
 8003cca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ccc:	e00b      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fd fb7f 	bl	80013d0 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d902      	bls.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ce4:	e006      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ec      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0a:	4904      	ldr	r1, [pc, #16]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d12:	e009      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
 8003d18:	e006      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d28:	7c7b      	ldrb	r3, [r7, #17]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d105      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2e:	4b9e      	ldr	r3, [pc, #632]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	4a9d      	ldr	r2, [pc, #628]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d46:	4b98      	ldr	r3, [pc, #608]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f023 0203 	bic.w	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	4994      	ldr	r1, [pc, #592]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d68:	4b8f      	ldr	r3, [pc, #572]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f023 020c 	bic.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	498c      	ldr	r1, [pc, #560]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d8a:	4b87      	ldr	r3, [pc, #540]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	4983      	ldr	r1, [pc, #524]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dac:	4b7e      	ldr	r3, [pc, #504]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	497b      	ldr	r1, [pc, #492]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dce:	4b76      	ldr	r3, [pc, #472]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ddc:	4972      	ldr	r1, [pc, #456]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003df0:	4b6d      	ldr	r3, [pc, #436]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	496a      	ldr	r1, [pc, #424]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e12:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	4961      	ldr	r1, [pc, #388]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e34:	4b5c      	ldr	r3, [pc, #368]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e42:	4959      	ldr	r1, [pc, #356]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e56:	4b54      	ldr	r3, [pc, #336]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e64:	4950      	ldr	r1, [pc, #320]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e78:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	4948      	ldr	r1, [pc, #288]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e9a:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	493f      	ldr	r1, [pc, #252]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d028      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ebc:	4b3a      	ldr	r3, [pc, #232]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eca:	4937      	ldr	r1, [pc, #220]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eda:	d106      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003edc:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee6:	60d3      	str	r3, [r2, #12]
 8003ee8:	e011      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	2101      	movs	r1, #1
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f8c8 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d028      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f1a:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	491f      	ldr	r1, [pc, #124]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f38:	d106      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f44:	60d3      	str	r3, [r2, #12]
 8003f46:	e011      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f899 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d02b      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f86:	4908      	ldr	r1, [pc, #32]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f96:	d109      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a02      	ldr	r2, [pc, #8]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa2:	60d3      	str	r3, [r2, #12]
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f867 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d02f      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fea:	4928      	ldr	r1, [pc, #160]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ffa:	d10d      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	2102      	movs	r1, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f844 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d014      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	74bb      	strb	r3, [r7, #18]
 8004016:	e011      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3320      	adds	r3, #32
 8004026:	2102      	movs	r1, #2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f925 	bl	8004278 <RCCEx_PLLSAI2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004056:	490d      	ldr	r1, [pc, #52]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800407a:	4904      	ldr	r1, [pc, #16]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004082:	7cbb      	ldrb	r3, [r7, #18]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000

08004090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800409e:	4b75      	ldr	r3, [pc, #468]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040aa:	4b72      	ldr	r3, [pc, #456]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0203 	and.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d10d      	bne.n	80040d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
       ||
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040c2:	4b6c      	ldr	r3, [pc, #432]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
       ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d047      	beq.n	8004166 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	e044      	b.n	8004166 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d018      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0x86>
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d825      	bhi.n	8004134 <RCCEx_PLLSAI1_Config+0xa4>
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d002      	beq.n	80040f2 <RCCEx_PLLSAI1_Config+0x62>
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d009      	beq.n	8004104 <RCCEx_PLLSAI1_Config+0x74>
 80040f0:	e020      	b.n	8004134 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040f2:	4b60      	ldr	r3, [pc, #384]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11d      	bne.n	800413a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004102:	e01a      	b.n	800413a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004104:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004114:	e013      	b.n	800413e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004116:	4b57      	ldr	r3, [pc, #348]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004122:	4b54      	ldr	r3, [pc, #336]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004132:	e006      	b.n	8004142 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      break;
 8004138:	e004      	b.n	8004144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004142:	bf00      	nop
    }

    if(status == HAL_OK)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800414a:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	3b01      	subs	r3, #1
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	430b      	orrs	r3, r1
 8004160:	4944      	ldr	r1, [pc, #272]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d17d      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800416c:	4b41      	ldr	r3, [pc, #260]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a40      	ldr	r2, [pc, #256]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fd f92a 	bl	80013d0 <HAL_GetTick>
 800417c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800417e:	e009      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004180:	f7fd f926 	bl	80013d0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d902      	bls.n	8004194 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	73fb      	strb	r3, [r7, #15]
        break;
 8004192:	e005      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004194:	4b37      	ldr	r3, [pc, #220]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ef      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d160      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d111      	bne.n	80041d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6892      	ldr	r2, [r2, #8]
 80041bc:	0211      	lsls	r1, r2, #8
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68d2      	ldr	r2, [r2, #12]
 80041c2:	0912      	lsrs	r2, r2, #4
 80041c4:	0452      	lsls	r2, r2, #17
 80041c6:	430a      	orrs	r2, r1
 80041c8:	492a      	ldr	r1, [pc, #168]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	610b      	str	r3, [r1, #16]
 80041ce:	e027      	b.n	8004220 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d112      	bne.n	80041fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d6:	4b27      	ldr	r3, [pc, #156]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6892      	ldr	r2, [r2, #8]
 80041e6:	0211      	lsls	r1, r2, #8
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6912      	ldr	r2, [r2, #16]
 80041ec:	0852      	lsrs	r2, r2, #1
 80041ee:	3a01      	subs	r2, #1
 80041f0:	0552      	lsls	r2, r2, #21
 80041f2:	430a      	orrs	r2, r1
 80041f4:	491f      	ldr	r1, [pc, #124]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]
 80041fa:	e011      	b.n	8004220 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004204:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	0211      	lsls	r1, r2, #8
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6952      	ldr	r2, [r2, #20]
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0652      	lsls	r2, r2, #25
 8004218:	430a      	orrs	r2, r1
 800421a:	4916      	ldr	r1, [pc, #88]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	4313      	orrs	r3, r2
 800421e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a13      	ldr	r2, [pc, #76]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800422a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd f8d0 	bl	80013d0 <HAL_GetTick>
 8004230:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004232:	e009      	b.n	8004248 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004234:	f7fd f8cc 	bl	80013d0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d902      	bls.n	8004248 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	73fb      	strb	r3, [r7, #15]
          break;
 8004246:	e005      	b.n	8004254 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ef      	beq.n	8004234 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	4904      	ldr	r1, [pc, #16]	; (8004274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000

08004278 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004286:	4b6a      	ldr	r3, [pc, #424]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d018      	beq.n	80042c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004292:	4b67      	ldr	r3, [pc, #412]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0203 	and.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d10d      	bne.n	80042be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
       ||
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042aa:	4b61      	ldr	r3, [pc, #388]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
       ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d047      	beq.n	800434e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	e044      	b.n	800434e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d018      	beq.n	80042fe <RCCEx_PLLSAI2_Config+0x86>
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d825      	bhi.n	800431c <RCCEx_PLLSAI2_Config+0xa4>
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d002      	beq.n	80042da <RCCEx_PLLSAI2_Config+0x62>
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d009      	beq.n	80042ec <RCCEx_PLLSAI2_Config+0x74>
 80042d8:	e020      	b.n	800431c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042da:	4b55      	ldr	r3, [pc, #340]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11d      	bne.n	8004322 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ea:	e01a      	b.n	8004322 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042ec:	4b50      	ldr	r3, [pc, #320]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d116      	bne.n	8004326 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fc:	e013      	b.n	8004326 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042fe:	4b4c      	ldr	r3, [pc, #304]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800430a:	4b49      	ldr	r3, [pc, #292]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800431a:	e006      	b.n	800432a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	e004      	b.n	800432c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800432a:	bf00      	nop
    }

    if(status == HAL_OK)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10d      	bne.n	800434e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004332:	4b3f      	ldr	r3, [pc, #252]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6819      	ldr	r1, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	430b      	orrs	r3, r1
 8004348:	4939      	ldr	r1, [pc, #228]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d167      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004354:	4b36      	ldr	r3, [pc, #216]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a35      	ldr	r2, [pc, #212]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004360:	f7fd f836 	bl	80013d0 <HAL_GetTick>
 8004364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004366:	e009      	b.n	800437c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004368:	f7fd f832 	bl	80013d0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d902      	bls.n	800437c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	73fb      	strb	r3, [r7, #15]
        break;
 800437a:	e005      	b.n	8004388 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800437c:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1ef      	bne.n	8004368 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d14a      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004394:	4b26      	ldr	r3, [pc, #152]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800439c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6892      	ldr	r2, [r2, #8]
 80043a4:	0211      	lsls	r1, r2, #8
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68d2      	ldr	r2, [r2, #12]
 80043aa:	0912      	lsrs	r2, r2, #4
 80043ac:	0452      	lsls	r2, r2, #17
 80043ae:	430a      	orrs	r2, r1
 80043b0:	491f      	ldr	r1, [pc, #124]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	614b      	str	r3, [r1, #20]
 80043b6:	e011      	b.n	80043dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6892      	ldr	r2, [r2, #8]
 80043c8:	0211      	lsls	r1, r2, #8
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6912      	ldr	r2, [r2, #16]
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0652      	lsls	r2, r2, #25
 80043d4:	430a      	orrs	r2, r1
 80043d6:	4916      	ldr	r1, [pc, #88]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fc fff2 	bl	80013d0 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ee:	e009      	b.n	8004404 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043f0:	f7fc ffee 	bl	80013d0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d902      	bls.n	8004404 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	73fb      	strb	r3, [r7, #15]
          break;
 8004402:	e005      	b.n	8004410 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ef      	beq.n	80043f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4904      	ldr	r1, [pc, #16]	; (8004430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000

08004434 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d079      	beq.n	800453a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fdea 	bl	8001034 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d058      	beq.n	8004528 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	22ca      	movs	r2, #202	; 0xca
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2253      	movs	r2, #83	; 0x53
 8004484:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fad2 	bl	8004a30 <RTC_EnterInitMode>
 800448c:	4603      	mov	r3, r0
 800448e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d127      	bne.n	80044e6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68d2      	ldr	r2, [r2, #12]
 80044d0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6919      	ldr	r1, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	041a      	lsls	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fad6 	bl	8004a98 <RTC_ExitInitMode>
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d113      	bne.n	800451e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0203 	bic.w	r2, r2, #3
 8004504:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
 8004526:	e001      	b.n	800452c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_RTC_SetTime+0x1a>
 800455a:	2302      	movs	r3, #2
 800455c:	e08b      	b.n	8004676 <HAL_RTC_SetTime+0x132>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	22ca      	movs	r2, #202	; 0xca
 8004574:	625a      	str	r2, [r3, #36]	; 0x24
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2253      	movs	r2, #83	; 0x53
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fa56 	bl	8004a30 <RTC_EnterInitMode>
 8004584:	4603      	mov	r3, r0
 8004586:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d163      	bne.n	8004656 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d126      	bne.n	80045e2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2200      	movs	r2, #0
 80045a6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fab1 	bl	8004b14 <RTC_ByteToBcd2>
 80045b2:	4603      	mov	r3, r0
 80045b4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 faaa 	bl	8004b14 <RTC_ByteToBcd2>
 80045c0:	4603      	mov	r3, r0
 80045c2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045c4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	789b      	ldrb	r3, [r3, #2]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 faa2 	bl	8004b14 <RTC_ByteToBcd2>
 80045d0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045d2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	78db      	ldrb	r3, [r3, #3]
 80045da:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e018      	b.n	8004614 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004602:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004608:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	78db      	ldrb	r3, [r3, #3]
 800460e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800461e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004622:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004632:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6899      	ldr	r1, [r3, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	431a      	orrs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fa23 	bl	8004a98 <RTC_ExitInitMode>
 8004652:	4603      	mov	r3, r0
 8004654:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	22ff      	movs	r2, #255	; 0xff
 800465c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
}
 8004676:	4618      	mov	r0, r3
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd90      	pop	{r4, r7, pc}

0800467e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800467e:	b590      	push	{r4, r7, lr}
 8004680:	b087      	sub	sp, #28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_RTC_SetDate+0x1a>
 8004694:	2302      	movs	r3, #2
 8004696:	e075      	b.n	8004784 <HAL_RTC_SetDate+0x106>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10e      	bne.n	80046cc <HAL_RTC_SetDate+0x4e>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	330a      	adds	r3, #10
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11c      	bne.n	800470c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	78db      	ldrb	r3, [r3, #3]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fa1c 	bl	8004b14 <RTC_ByteToBcd2>
 80046dc:	4603      	mov	r3, r0
 80046de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fa15 	bl	8004b14 <RTC_ByteToBcd2>
 80046ea:	4603      	mov	r3, r0
 80046ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	789b      	ldrb	r3, [r3, #2]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa0d 	bl	8004b14 <RTC_ByteToBcd2>
 80046fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e00e      	b.n	800472a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	785b      	ldrb	r3, [r3, #1]
 8004716:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004718:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800471e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	22ca      	movs	r2, #202	; 0xca
 8004730:	625a      	str	r2, [r3, #36]	; 0x24
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2253      	movs	r2, #83	; 0x53
 8004738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f978 	bl	8004a30 <RTC_EnterInitMode>
 8004740:	4603      	mov	r3, r0
 8004742:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004758:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f99c 	bl	8004a98 <RTC_ExitInitMode>
 8004760:	4603      	mov	r3, r0
 8004762:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	22ff      	movs	r2, #255	; 0xff
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004782:	7cfb      	ldrb	r3, [r7, #19]
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd90      	pop	{r4, r7, pc}

0800478c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b089      	sub	sp, #36	; 0x24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_RTC_SetAlarm+0x1a>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e11b      	b.n	80049de <HAL_RTC_SetAlarm+0x252>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2202      	movs	r2, #2
 80047b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d137      	bne.n	800482c <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 f99d 	bl	8004b14 <RTC_ByteToBcd2>
 80047da:	4603      	mov	r3, r0
 80047dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f996 	bl	8004b14 <RTC_ByteToBcd2>
 80047e8:	4603      	mov	r3, r0
 80047ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	789b      	ldrb	r3, [r3, #2]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f98e 	bl	8004b14 <RTC_ByteToBcd2>
 80047f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	78db      	ldrb	r3, [r3, #3]
 8004802:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004804:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f980 	bl	8004b14 <RTC_ByteToBcd2>
 8004814:	4603      	mov	r3, r0
 8004816:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004818:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004820:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004826:	4313      	orrs	r3, r2
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e023      	b.n	8004874 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800484c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004852:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	78db      	ldrb	r3, [r3, #3]
 8004858:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800485a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004862:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004864:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800486a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004870:	4313      	orrs	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	22ca      	movs	r2, #202	; 0xca
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2253      	movs	r2, #83	; 0x53
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004898:	d14a      	bne.n	8004930 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a8:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80048ba:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048ca:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80048cc:	f7fc fd80 	bl	80013d0 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048d2:	e015      	b.n	8004900 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048d4:	f7fc fd7c 	bl	80013d0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e2:	d90d      	bls.n	8004900 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	22ff      	movs	r2, #255	; 0xff
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2203      	movs	r2, #3
 80048f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e06e      	b.n	80049de <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0e2      	beq.n	80048d4 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492c:	609a      	str	r2, [r3, #8]
 800492e:	e049      	b.n	80049c4 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800493e:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004950:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004960:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004962:	f7fc fd35 	bl	80013d0 <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004968:	e015      	b.n	8004996 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800496a:	f7fc fd31 	bl	80013d0 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004978:	d90d      	bls.n	8004996 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	22ff      	movs	r2, #255	; 0xff
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2203      	movs	r2, #3
 8004986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e023      	b.n	80049de <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0e2      	beq.n	800496a <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c2:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3724      	adds	r7, #36	; 0x24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd90      	pop	{r4, r7, pc}
	...

080049e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <HAL_RTC_WaitForSynchro+0x44>)
 80049f6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80049f8:	f7fc fcea 	bl	80013d0 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049fe:	e009      	b.n	8004a14 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a00:	f7fc fce6 	bl	80013d0 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a0e:	d901      	bls.n	8004a14 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e007      	b.n	8004a24 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ee      	beq.n	8004a00 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	0003ff5f 	.word	0x0003ff5f

08004a30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d120      	bne.n	8004a8c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a54:	f7fc fcbc 	bl	80013d0 <HAL_GetTick>
 8004a58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a5a:	e00d      	b.n	8004a78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004a5c:	f7fc fcb8 	bl	80013d0 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a6a:	d905      	bls.n	8004a78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2203      	movs	r2, #3
 8004a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <RTC_EnterInitMode+0x5c>
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d1e7      	bne.n	8004a5c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <RTC_ExitInitMode+0x78>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <RTC_ExitInitMode+0x78>)
 8004aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ab0:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <RTC_ExitInitMode+0x78>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10c      	bne.n	8004ad6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ff93 	bl	80049e8 <HAL_RTC_WaitForSynchro>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01e      	beq.n	8004b06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2203      	movs	r2, #3
 8004acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	e017      	b.n	8004b06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <RTC_ExitInitMode+0x78>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4a0d      	ldr	r2, [pc, #52]	; (8004b10 <RTC_ExitInitMode+0x78>)
 8004adc:	f023 0320 	bic.w	r3, r3, #32
 8004ae0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ff80 	bl	80049e8 <HAL_RTC_WaitForSynchro>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <RTC_ExitInitMode+0x78>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <RTC_ExitInitMode+0x78>)
 8004b00:	f043 0320 	orr.w	r3, r3, #32
 8004b04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40002800 	.word	0x40002800

08004b14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004b26:	e005      	b.n	8004b34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
 8004b30:	3b0a      	subs	r3, #10
 8004b32:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004b34:	7afb      	ldrb	r3, [r7, #11]
 8004b36:	2b09      	cmp	r3, #9
 8004b38:	d8f6      	bhi.n	8004b28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	7afb      	ldrb	r3, [r7, #11]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b2db      	uxtb	r3, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <rand>:
 8004b54:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <rand+0x5c>)
 8004b56:	b510      	push	{r4, lr}
 8004b58:	681c      	ldr	r4, [r3, #0]
 8004b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b5c:	b9b3      	cbnz	r3, 8004b8c <rand+0x38>
 8004b5e:	2018      	movs	r0, #24
 8004b60:	f000 fa42 	bl	8004fe8 <malloc>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6320      	str	r0, [r4, #48]	; 0x30
 8004b68:	b920      	cbnz	r0, 8004b74 <rand+0x20>
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <rand+0x60>)
 8004b6c:	4812      	ldr	r0, [pc, #72]	; (8004bb8 <rand+0x64>)
 8004b6e:	2152      	movs	r1, #82	; 0x52
 8004b70:	f000 f9d0 	bl	8004f14 <__assert_func>
 8004b74:	4911      	ldr	r1, [pc, #68]	; (8004bbc <rand+0x68>)
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <rand+0x6c>)
 8004b78:	e9c0 1300 	strd	r1, r3, [r0]
 8004b7c:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <rand+0x70>)
 8004b7e:	6083      	str	r3, [r0, #8]
 8004b80:	230b      	movs	r3, #11
 8004b82:	8183      	strh	r3, [r0, #12]
 8004b84:	2100      	movs	r1, #0
 8004b86:	2001      	movs	r0, #1
 8004b88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004b8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b8e:	480e      	ldr	r0, [pc, #56]	; (8004bc8 <rand+0x74>)
 8004b90:	690b      	ldr	r3, [r1, #16]
 8004b92:	694c      	ldr	r4, [r1, #20]
 8004b94:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <rand+0x78>)
 8004b96:	4358      	muls	r0, r3
 8004b98:	fb02 0004 	mla	r0, r2, r4, r0
 8004b9c:	fba3 3202 	umull	r3, r2, r3, r2
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	eb40 0002 	adc.w	r0, r0, r2
 8004ba6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004baa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004bae:	bd10      	pop	{r4, pc}
 8004bb0:	20000064 	.word	0x20000064
 8004bb4:	08005fcc 	.word	0x08005fcc
 8004bb8:	08005fe3 	.word	0x08005fe3
 8004bbc:	abcd330e 	.word	0xabcd330e
 8004bc0:	e66d1234 	.word	0xe66d1234
 8004bc4:	0005deec 	.word	0x0005deec
 8004bc8:	5851f42d 	.word	0x5851f42d
 8004bcc:	4c957f2d 	.word	0x4c957f2d

08004bd0 <std>:
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bde:	6083      	str	r3, [r0, #8]
 8004be0:	8181      	strh	r1, [r0, #12]
 8004be2:	6643      	str	r3, [r0, #100]	; 0x64
 8004be4:	81c2      	strh	r2, [r0, #14]
 8004be6:	6183      	str	r3, [r0, #24]
 8004be8:	4619      	mov	r1, r3
 8004bea:	2208      	movs	r2, #8
 8004bec:	305c      	adds	r0, #92	; 0x5c
 8004bee:	f000 f914 	bl	8004e1a <memset>
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <std+0x58>)
 8004bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <std+0x5c>)
 8004bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <std+0x60>)
 8004bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <std+0x64>)
 8004c00:	6323      	str	r3, [r4, #48]	; 0x30
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <std+0x68>)
 8004c04:	6224      	str	r4, [r4, #32]
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d006      	beq.n	8004c18 <std+0x48>
 8004c0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c0e:	4294      	cmp	r4, r2
 8004c10:	d002      	beq.n	8004c18 <std+0x48>
 8004c12:	33d0      	adds	r3, #208	; 0xd0
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d105      	bne.n	8004c24 <std+0x54>
 8004c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c20:	f000 b974 	b.w	8004f0c <__retarget_lock_init_recursive>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	08004d95 	.word	0x08004d95
 8004c2c:	08004db7 	.word	0x08004db7
 8004c30:	08004def 	.word	0x08004def
 8004c34:	08004e13 	.word	0x08004e13
 8004c38:	20000134 	.word	0x20000134

08004c3c <stdio_exit_handler>:
 8004c3c:	4a02      	ldr	r2, [pc, #8]	; (8004c48 <stdio_exit_handler+0xc>)
 8004c3e:	4903      	ldr	r1, [pc, #12]	; (8004c4c <stdio_exit_handler+0x10>)
 8004c40:	4803      	ldr	r0, [pc, #12]	; (8004c50 <stdio_exit_handler+0x14>)
 8004c42:	f000 b869 	b.w	8004d18 <_fwalk_sglue>
 8004c46:	bf00      	nop
 8004c48:	2000000c 	.word	0x2000000c
 8004c4c:	0800582d 	.word	0x0800582d
 8004c50:	20000018 	.word	0x20000018

08004c54 <cleanup_stdio>:
 8004c54:	6841      	ldr	r1, [r0, #4]
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <cleanup_stdio+0x34>)
 8004c58:	4299      	cmp	r1, r3
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	d001      	beq.n	8004c64 <cleanup_stdio+0x10>
 8004c60:	f000 fde4 	bl	800582c <_fflush_r>
 8004c64:	68a1      	ldr	r1, [r4, #8]
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <cleanup_stdio+0x38>)
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	d002      	beq.n	8004c72 <cleanup_stdio+0x1e>
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f000 fddd 	bl	800582c <_fflush_r>
 8004c72:	68e1      	ldr	r1, [r4, #12]
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <cleanup_stdio+0x3c>)
 8004c76:	4299      	cmp	r1, r3
 8004c78:	d004      	beq.n	8004c84 <cleanup_stdio+0x30>
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c80:	f000 bdd4 	b.w	800582c <_fflush_r>
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	bf00      	nop
 8004c88:	20000134 	.word	0x20000134
 8004c8c:	2000019c 	.word	0x2000019c
 8004c90:	20000204 	.word	0x20000204

08004c94 <global_stdio_init.part.0>:
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <global_stdio_init.part.0+0x30>)
 8004c98:	4c0b      	ldr	r4, [pc, #44]	; (8004cc8 <global_stdio_init.part.0+0x34>)
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <global_stdio_init.part.0+0x38>)
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	f7ff ff94 	bl	8004bd0 <std>
 8004ca8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cac:	2201      	movs	r2, #1
 8004cae:	2109      	movs	r1, #9
 8004cb0:	f7ff ff8e 	bl	8004bd0 <std>
 8004cb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004cb8:	2202      	movs	r2, #2
 8004cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cbe:	2112      	movs	r1, #18
 8004cc0:	f7ff bf86 	b.w	8004bd0 <std>
 8004cc4:	2000026c 	.word	0x2000026c
 8004cc8:	20000134 	.word	0x20000134
 8004ccc:	08004c3d 	.word	0x08004c3d

08004cd0 <__sfp_lock_acquire>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__sfp_lock_acquire+0x8>)
 8004cd2:	f000 b91c 	b.w	8004f0e <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000275 	.word	0x20000275

08004cdc <__sfp_lock_release>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__sfp_lock_release+0x8>)
 8004cde:	f000 b917 	b.w	8004f10 <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	20000275 	.word	0x20000275

08004ce8 <__sinit>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	f7ff fff0 	bl	8004cd0 <__sfp_lock_acquire>
 8004cf0:	6a23      	ldr	r3, [r4, #32]
 8004cf2:	b11b      	cbz	r3, 8004cfc <__sinit+0x14>
 8004cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf8:	f7ff bff0 	b.w	8004cdc <__sfp_lock_release>
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <__sinit+0x28>)
 8004cfe:	6223      	str	r3, [r4, #32]
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <__sinit+0x2c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f5      	bne.n	8004cf4 <__sinit+0xc>
 8004d08:	f7ff ffc4 	bl	8004c94 <global_stdio_init.part.0>
 8004d0c:	e7f2      	b.n	8004cf4 <__sinit+0xc>
 8004d0e:	bf00      	nop
 8004d10:	08004c55 	.word	0x08004c55
 8004d14:	2000026c 	.word	0x2000026c

08004d18 <_fwalk_sglue>:
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	4688      	mov	r8, r1
 8004d20:	4614      	mov	r4, r2
 8004d22:	2600      	movs	r6, #0
 8004d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d28:	f1b9 0901 	subs.w	r9, r9, #1
 8004d2c:	d505      	bpl.n	8004d3a <_fwalk_sglue+0x22>
 8004d2e:	6824      	ldr	r4, [r4, #0]
 8004d30:	2c00      	cmp	r4, #0
 8004d32:	d1f7      	bne.n	8004d24 <_fwalk_sglue+0xc>
 8004d34:	4630      	mov	r0, r6
 8004d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3a:	89ab      	ldrh	r3, [r5, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d907      	bls.n	8004d50 <_fwalk_sglue+0x38>
 8004d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d44:	3301      	adds	r3, #1
 8004d46:	d003      	beq.n	8004d50 <_fwalk_sglue+0x38>
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	47c0      	blx	r8
 8004d4e:	4306      	orrs	r6, r0
 8004d50:	3568      	adds	r5, #104	; 0x68
 8004d52:	e7e9      	b.n	8004d28 <_fwalk_sglue+0x10>

08004d54 <siprintf>:
 8004d54:	b40e      	push	{r1, r2, r3}
 8004d56:	b500      	push	{lr}
 8004d58:	b09c      	sub	sp, #112	; 0x70
 8004d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d5c:	9002      	str	r0, [sp, #8]
 8004d5e:	9006      	str	r0, [sp, #24]
 8004d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d64:	4809      	ldr	r0, [pc, #36]	; (8004d8c <siprintf+0x38>)
 8004d66:	9107      	str	r1, [sp, #28]
 8004d68:	9104      	str	r1, [sp, #16]
 8004d6a:	4909      	ldr	r1, [pc, #36]	; (8004d90 <siprintf+0x3c>)
 8004d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d70:	9105      	str	r1, [sp, #20]
 8004d72:	6800      	ldr	r0, [r0, #0]
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	a902      	add	r1, sp, #8
 8004d78:	f000 fa44 	bl	8005204 <_svfiprintf_r>
 8004d7c:	9b02      	ldr	r3, [sp, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	b01c      	add	sp, #112	; 0x70
 8004d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d88:	b003      	add	sp, #12
 8004d8a:	4770      	bx	lr
 8004d8c:	20000064 	.word	0x20000064
 8004d90:	ffff0208 	.word	0xffff0208

08004d94 <__sread>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	460c      	mov	r4, r1
 8004d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9c:	f000 f868 	bl	8004e70 <_read_r>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	bfab      	itete	ge
 8004da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004da6:	89a3      	ldrhlt	r3, [r4, #12]
 8004da8:	181b      	addge	r3, r3, r0
 8004daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dae:	bfac      	ite	ge
 8004db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004db2:	81a3      	strhlt	r3, [r4, #12]
 8004db4:	bd10      	pop	{r4, pc}

08004db6 <__swrite>:
 8004db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	461f      	mov	r7, r3
 8004dbc:	898b      	ldrh	r3, [r1, #12]
 8004dbe:	05db      	lsls	r3, r3, #23
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4616      	mov	r6, r2
 8004dc6:	d505      	bpl.n	8004dd4 <__swrite+0x1e>
 8004dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dcc:	2302      	movs	r3, #2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f000 f83c 	bl	8004e4c <_lseek_r>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	4632      	mov	r2, r6
 8004de2:	463b      	mov	r3, r7
 8004de4:	4628      	mov	r0, r5
 8004de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	f000 b853 	b.w	8004e94 <_write_r>

08004dee <__sseek>:
 8004dee:	b510      	push	{r4, lr}
 8004df0:	460c      	mov	r4, r1
 8004df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df6:	f000 f829 	bl	8004e4c <_lseek_r>
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	bf15      	itete	ne
 8004e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e0a:	81a3      	strheq	r3, [r4, #12]
 8004e0c:	bf18      	it	ne
 8004e0e:	81a3      	strhne	r3, [r4, #12]
 8004e10:	bd10      	pop	{r4, pc}

08004e12 <__sclose>:
 8004e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e16:	f000 b809 	b.w	8004e2c <_close_r>

08004e1a <memset>:
 8004e1a:	4402      	add	r2, r0
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d100      	bne.n	8004e24 <memset+0xa>
 8004e22:	4770      	bx	lr
 8004e24:	f803 1b01 	strb.w	r1, [r3], #1
 8004e28:	e7f9      	b.n	8004e1e <memset+0x4>
	...

08004e2c <_close_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d06      	ldr	r5, [pc, #24]	; (8004e48 <_close_r+0x1c>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fc f9bb 	bl	80011b2 <_close>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_close_r+0x1a>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_close_r+0x1a>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000270 	.word	0x20000270

08004e4c <_lseek_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d07      	ldr	r5, [pc, #28]	; (8004e6c <_lseek_r+0x20>)
 8004e50:	4604      	mov	r4, r0
 8004e52:	4608      	mov	r0, r1
 8004e54:	4611      	mov	r1, r2
 8004e56:	2200      	movs	r2, #0
 8004e58:	602a      	str	r2, [r5, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f7fc f9d0 	bl	8001200 <_lseek>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_lseek_r+0x1e>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_lseek_r+0x1e>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	20000270 	.word	0x20000270

08004e70 <_read_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d07      	ldr	r5, [pc, #28]	; (8004e90 <_read_r+0x20>)
 8004e74:	4604      	mov	r4, r0
 8004e76:	4608      	mov	r0, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	602a      	str	r2, [r5, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f7fc f95e 	bl	8001140 <_read>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d102      	bne.n	8004e8e <_read_r+0x1e>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	b103      	cbz	r3, 8004e8e <_read_r+0x1e>
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	20000270 	.word	0x20000270

08004e94 <_write_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d07      	ldr	r5, [pc, #28]	; (8004eb4 <_write_r+0x20>)
 8004e98:	4604      	mov	r4, r0
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fc f969 	bl	800117a <_write>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_write_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_write_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000270 	.word	0x20000270

08004eb8 <__errno>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <__errno+0x8>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000064 	.word	0x20000064

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4d0d      	ldr	r5, [pc, #52]	; (8004efc <__libc_init_array+0x38>)
 8004ec8:	4c0d      	ldr	r4, [pc, #52]	; (8004f00 <__libc_init_array+0x3c>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	2600      	movs	r6, #0
 8004ed0:	42a6      	cmp	r6, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	4d0b      	ldr	r5, [pc, #44]	; (8004f04 <__libc_init_array+0x40>)
 8004ed6:	4c0c      	ldr	r4, [pc, #48]	; (8004f08 <__libc_init_array+0x44>)
 8004ed8:	f000 fffa 	bl	8005ed0 <_init>
 8004edc:	1b64      	subs	r4, r4, r5
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	42a6      	cmp	r6, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eec:	4798      	blx	r3
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef6:	4798      	blx	r3
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	080060ac 	.word	0x080060ac
 8004f00:	080060ac 	.word	0x080060ac
 8004f04:	080060ac 	.word	0x080060ac
 8004f08:	080060b0 	.word	0x080060b0

08004f0c <__retarget_lock_init_recursive>:
 8004f0c:	4770      	bx	lr

08004f0e <__retarget_lock_acquire_recursive>:
 8004f0e:	4770      	bx	lr

08004f10 <__retarget_lock_release_recursive>:
 8004f10:	4770      	bx	lr
	...

08004f14 <__assert_func>:
 8004f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f16:	4614      	mov	r4, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <__assert_func+0x2c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4605      	mov	r5, r0
 8004f20:	68d8      	ldr	r0, [r3, #12]
 8004f22:	b14c      	cbz	r4, 8004f38 <__assert_func+0x24>
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <__assert_func+0x30>)
 8004f26:	9100      	str	r1, [sp, #0]
 8004f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f2c:	4906      	ldr	r1, [pc, #24]	; (8004f48 <__assert_func+0x34>)
 8004f2e:	462b      	mov	r3, r5
 8004f30:	f000 fca4 	bl	800587c <fiprintf>
 8004f34:	f000 fcec 	bl	8005910 <abort>
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <__assert_func+0x38>)
 8004f3a:	461c      	mov	r4, r3
 8004f3c:	e7f3      	b.n	8004f26 <__assert_func+0x12>
 8004f3e:	bf00      	nop
 8004f40:	20000064 	.word	0x20000064
 8004f44:	0800603b 	.word	0x0800603b
 8004f48:	08006048 	.word	0x08006048
 8004f4c:	08006076 	.word	0x08006076

08004f50 <_free_r>:
 8004f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f52:	2900      	cmp	r1, #0
 8004f54:	d044      	beq.n	8004fe0 <_free_r+0x90>
 8004f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f5a:	9001      	str	r0, [sp, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f62:	bfb8      	it	lt
 8004f64:	18e4      	addlt	r4, r4, r3
 8004f66:	f000 f8e7 	bl	8005138 <__malloc_lock>
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <_free_r+0x94>)
 8004f6c:	9801      	ldr	r0, [sp, #4]
 8004f6e:	6813      	ldr	r3, [r2, #0]
 8004f70:	b933      	cbnz	r3, 8004f80 <_free_r+0x30>
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	6014      	str	r4, [r2, #0]
 8004f76:	b003      	add	sp, #12
 8004f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f7c:	f000 b8e2 	b.w	8005144 <__malloc_unlock>
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d908      	bls.n	8004f96 <_free_r+0x46>
 8004f84:	6825      	ldr	r5, [r4, #0]
 8004f86:	1961      	adds	r1, r4, r5
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	bf01      	itttt	eq
 8004f8c:	6819      	ldreq	r1, [r3, #0]
 8004f8e:	685b      	ldreq	r3, [r3, #4]
 8004f90:	1949      	addeq	r1, r1, r5
 8004f92:	6021      	streq	r1, [r4, #0]
 8004f94:	e7ed      	b.n	8004f72 <_free_r+0x22>
 8004f96:	461a      	mov	r2, r3
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b10b      	cbz	r3, 8004fa0 <_free_r+0x50>
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d9fa      	bls.n	8004f96 <_free_r+0x46>
 8004fa0:	6811      	ldr	r1, [r2, #0]
 8004fa2:	1855      	adds	r5, r2, r1
 8004fa4:	42a5      	cmp	r5, r4
 8004fa6:	d10b      	bne.n	8004fc0 <_free_r+0x70>
 8004fa8:	6824      	ldr	r4, [r4, #0]
 8004faa:	4421      	add	r1, r4
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	6011      	str	r1, [r2, #0]
 8004fb2:	d1e0      	bne.n	8004f76 <_free_r+0x26>
 8004fb4:	681c      	ldr	r4, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	6053      	str	r3, [r2, #4]
 8004fba:	440c      	add	r4, r1
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	e7da      	b.n	8004f76 <_free_r+0x26>
 8004fc0:	d902      	bls.n	8004fc8 <_free_r+0x78>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	6003      	str	r3, [r0, #0]
 8004fc6:	e7d6      	b.n	8004f76 <_free_r+0x26>
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	1961      	adds	r1, r4, r5
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	bf04      	itt	eq
 8004fd0:	6819      	ldreq	r1, [r3, #0]
 8004fd2:	685b      	ldreq	r3, [r3, #4]
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	bf04      	itt	eq
 8004fd8:	1949      	addeq	r1, r1, r5
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	6054      	str	r4, [r2, #4]
 8004fde:	e7ca      	b.n	8004f76 <_free_r+0x26>
 8004fe0:	b003      	add	sp, #12
 8004fe2:	bd30      	pop	{r4, r5, pc}
 8004fe4:	20000278 	.word	0x20000278

08004fe8 <malloc>:
 8004fe8:	4b02      	ldr	r3, [pc, #8]	; (8004ff4 <malloc+0xc>)
 8004fea:	4601      	mov	r1, r0
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f000 b823 	b.w	8005038 <_malloc_r>
 8004ff2:	bf00      	nop
 8004ff4:	20000064 	.word	0x20000064

08004ff8 <sbrk_aligned>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	4e0e      	ldr	r6, [pc, #56]	; (8005034 <sbrk_aligned+0x3c>)
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	6831      	ldr	r1, [r6, #0]
 8005000:	4605      	mov	r5, r0
 8005002:	b911      	cbnz	r1, 800500a <sbrk_aligned+0x12>
 8005004:	f000 fc66 	bl	80058d4 <_sbrk_r>
 8005008:	6030      	str	r0, [r6, #0]
 800500a:	4621      	mov	r1, r4
 800500c:	4628      	mov	r0, r5
 800500e:	f000 fc61 	bl	80058d4 <_sbrk_r>
 8005012:	1c43      	adds	r3, r0, #1
 8005014:	d00a      	beq.n	800502c <sbrk_aligned+0x34>
 8005016:	1cc4      	adds	r4, r0, #3
 8005018:	f024 0403 	bic.w	r4, r4, #3
 800501c:	42a0      	cmp	r0, r4
 800501e:	d007      	beq.n	8005030 <sbrk_aligned+0x38>
 8005020:	1a21      	subs	r1, r4, r0
 8005022:	4628      	mov	r0, r5
 8005024:	f000 fc56 	bl	80058d4 <_sbrk_r>
 8005028:	3001      	adds	r0, #1
 800502a:	d101      	bne.n	8005030 <sbrk_aligned+0x38>
 800502c:	f04f 34ff 	mov.w	r4, #4294967295
 8005030:	4620      	mov	r0, r4
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	2000027c 	.word	0x2000027c

08005038 <_malloc_r>:
 8005038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800503c:	1ccd      	adds	r5, r1, #3
 800503e:	f025 0503 	bic.w	r5, r5, #3
 8005042:	3508      	adds	r5, #8
 8005044:	2d0c      	cmp	r5, #12
 8005046:	bf38      	it	cc
 8005048:	250c      	movcc	r5, #12
 800504a:	2d00      	cmp	r5, #0
 800504c:	4607      	mov	r7, r0
 800504e:	db01      	blt.n	8005054 <_malloc_r+0x1c>
 8005050:	42a9      	cmp	r1, r5
 8005052:	d905      	bls.n	8005060 <_malloc_r+0x28>
 8005054:	230c      	movs	r3, #12
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	2600      	movs	r6, #0
 800505a:	4630      	mov	r0, r6
 800505c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005060:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005134 <_malloc_r+0xfc>
 8005064:	f000 f868 	bl	8005138 <__malloc_lock>
 8005068:	f8d8 3000 	ldr.w	r3, [r8]
 800506c:	461c      	mov	r4, r3
 800506e:	bb5c      	cbnz	r4, 80050c8 <_malloc_r+0x90>
 8005070:	4629      	mov	r1, r5
 8005072:	4638      	mov	r0, r7
 8005074:	f7ff ffc0 	bl	8004ff8 <sbrk_aligned>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	4604      	mov	r4, r0
 800507c:	d155      	bne.n	800512a <_malloc_r+0xf2>
 800507e:	f8d8 4000 	ldr.w	r4, [r8]
 8005082:	4626      	mov	r6, r4
 8005084:	2e00      	cmp	r6, #0
 8005086:	d145      	bne.n	8005114 <_malloc_r+0xdc>
 8005088:	2c00      	cmp	r4, #0
 800508a:	d048      	beq.n	800511e <_malloc_r+0xe6>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	4631      	mov	r1, r6
 8005090:	4638      	mov	r0, r7
 8005092:	eb04 0903 	add.w	r9, r4, r3
 8005096:	f000 fc1d 	bl	80058d4 <_sbrk_r>
 800509a:	4581      	cmp	r9, r0
 800509c:	d13f      	bne.n	800511e <_malloc_r+0xe6>
 800509e:	6821      	ldr	r1, [r4, #0]
 80050a0:	1a6d      	subs	r5, r5, r1
 80050a2:	4629      	mov	r1, r5
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ffa7 	bl	8004ff8 <sbrk_aligned>
 80050aa:	3001      	adds	r0, #1
 80050ac:	d037      	beq.n	800511e <_malloc_r+0xe6>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	442b      	add	r3, r5
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	f8d8 3000 	ldr.w	r3, [r8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d038      	beq.n	800512e <_malloc_r+0xf6>
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	42a2      	cmp	r2, r4
 80050c0:	d12b      	bne.n	800511a <_malloc_r+0xe2>
 80050c2:	2200      	movs	r2, #0
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	e00f      	b.n	80050e8 <_malloc_r+0xb0>
 80050c8:	6822      	ldr	r2, [r4, #0]
 80050ca:	1b52      	subs	r2, r2, r5
 80050cc:	d41f      	bmi.n	800510e <_malloc_r+0xd6>
 80050ce:	2a0b      	cmp	r2, #11
 80050d0:	d917      	bls.n	8005102 <_malloc_r+0xca>
 80050d2:	1961      	adds	r1, r4, r5
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	6025      	str	r5, [r4, #0]
 80050d8:	bf18      	it	ne
 80050da:	6059      	strne	r1, [r3, #4]
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	bf08      	it	eq
 80050e0:	f8c8 1000 	streq.w	r1, [r8]
 80050e4:	5162      	str	r2, [r4, r5]
 80050e6:	604b      	str	r3, [r1, #4]
 80050e8:	4638      	mov	r0, r7
 80050ea:	f104 060b 	add.w	r6, r4, #11
 80050ee:	f000 f829 	bl	8005144 <__malloc_unlock>
 80050f2:	f026 0607 	bic.w	r6, r6, #7
 80050f6:	1d23      	adds	r3, r4, #4
 80050f8:	1af2      	subs	r2, r6, r3
 80050fa:	d0ae      	beq.n	800505a <_malloc_r+0x22>
 80050fc:	1b9b      	subs	r3, r3, r6
 80050fe:	50a3      	str	r3, [r4, r2]
 8005100:	e7ab      	b.n	800505a <_malloc_r+0x22>
 8005102:	42a3      	cmp	r3, r4
 8005104:	6862      	ldr	r2, [r4, #4]
 8005106:	d1dd      	bne.n	80050c4 <_malloc_r+0x8c>
 8005108:	f8c8 2000 	str.w	r2, [r8]
 800510c:	e7ec      	b.n	80050e8 <_malloc_r+0xb0>
 800510e:	4623      	mov	r3, r4
 8005110:	6864      	ldr	r4, [r4, #4]
 8005112:	e7ac      	b.n	800506e <_malloc_r+0x36>
 8005114:	4634      	mov	r4, r6
 8005116:	6876      	ldr	r6, [r6, #4]
 8005118:	e7b4      	b.n	8005084 <_malloc_r+0x4c>
 800511a:	4613      	mov	r3, r2
 800511c:	e7cc      	b.n	80050b8 <_malloc_r+0x80>
 800511e:	230c      	movs	r3, #12
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4638      	mov	r0, r7
 8005124:	f000 f80e 	bl	8005144 <__malloc_unlock>
 8005128:	e797      	b.n	800505a <_malloc_r+0x22>
 800512a:	6025      	str	r5, [r4, #0]
 800512c:	e7dc      	b.n	80050e8 <_malloc_r+0xb0>
 800512e:	605b      	str	r3, [r3, #4]
 8005130:	deff      	udf	#255	; 0xff
 8005132:	bf00      	nop
 8005134:	20000278 	.word	0x20000278

08005138 <__malloc_lock>:
 8005138:	4801      	ldr	r0, [pc, #4]	; (8005140 <__malloc_lock+0x8>)
 800513a:	f7ff bee8 	b.w	8004f0e <__retarget_lock_acquire_recursive>
 800513e:	bf00      	nop
 8005140:	20000274 	.word	0x20000274

08005144 <__malloc_unlock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_unlock+0x8>)
 8005146:	f7ff bee3 	b.w	8004f10 <__retarget_lock_release_recursive>
 800514a:	bf00      	nop
 800514c:	20000274 	.word	0x20000274

08005150 <__ssputs_r>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	688e      	ldr	r6, [r1, #8]
 8005156:	461f      	mov	r7, r3
 8005158:	42be      	cmp	r6, r7
 800515a:	680b      	ldr	r3, [r1, #0]
 800515c:	4682      	mov	sl, r0
 800515e:	460c      	mov	r4, r1
 8005160:	4690      	mov	r8, r2
 8005162:	d82c      	bhi.n	80051be <__ssputs_r+0x6e>
 8005164:	898a      	ldrh	r2, [r1, #12]
 8005166:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800516a:	d026      	beq.n	80051ba <__ssputs_r+0x6a>
 800516c:	6965      	ldr	r5, [r4, #20]
 800516e:	6909      	ldr	r1, [r1, #16]
 8005170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005174:	eba3 0901 	sub.w	r9, r3, r1
 8005178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800517c:	1c7b      	adds	r3, r7, #1
 800517e:	444b      	add	r3, r9
 8005180:	106d      	asrs	r5, r5, #1
 8005182:	429d      	cmp	r5, r3
 8005184:	bf38      	it	cc
 8005186:	461d      	movcc	r5, r3
 8005188:	0553      	lsls	r3, r2, #21
 800518a:	d527      	bpl.n	80051dc <__ssputs_r+0x8c>
 800518c:	4629      	mov	r1, r5
 800518e:	f7ff ff53 	bl	8005038 <_malloc_r>
 8005192:	4606      	mov	r6, r0
 8005194:	b360      	cbz	r0, 80051f0 <__ssputs_r+0xa0>
 8005196:	6921      	ldr	r1, [r4, #16]
 8005198:	464a      	mov	r2, r9
 800519a:	f000 fbab 	bl	80058f4 <memcpy>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a8:	81a3      	strh	r3, [r4, #12]
 80051aa:	6126      	str	r6, [r4, #16]
 80051ac:	6165      	str	r5, [r4, #20]
 80051ae:	444e      	add	r6, r9
 80051b0:	eba5 0509 	sub.w	r5, r5, r9
 80051b4:	6026      	str	r6, [r4, #0]
 80051b6:	60a5      	str	r5, [r4, #8]
 80051b8:	463e      	mov	r6, r7
 80051ba:	42be      	cmp	r6, r7
 80051bc:	d900      	bls.n	80051c0 <__ssputs_r+0x70>
 80051be:	463e      	mov	r6, r7
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	4632      	mov	r2, r6
 80051c4:	4641      	mov	r1, r8
 80051c6:	f000 fb6b 	bl	80058a0 <memmove>
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	60a3      	str	r3, [r4, #8]
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	4433      	add	r3, r6
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	2000      	movs	r0, #0
 80051d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051dc:	462a      	mov	r2, r5
 80051de:	f000 fb9e 	bl	800591e <_realloc_r>
 80051e2:	4606      	mov	r6, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1e0      	bne.n	80051aa <__ssputs_r+0x5a>
 80051e8:	6921      	ldr	r1, [r4, #16]
 80051ea:	4650      	mov	r0, sl
 80051ec:	f7ff feb0 	bl	8004f50 <_free_r>
 80051f0:	230c      	movs	r3, #12
 80051f2:	f8ca 3000 	str.w	r3, [sl]
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	e7e9      	b.n	80051d8 <__ssputs_r+0x88>

08005204 <_svfiprintf_r>:
 8005204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	4698      	mov	r8, r3
 800520a:	898b      	ldrh	r3, [r1, #12]
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	b09d      	sub	sp, #116	; 0x74
 8005210:	4607      	mov	r7, r0
 8005212:	460d      	mov	r5, r1
 8005214:	4614      	mov	r4, r2
 8005216:	d50e      	bpl.n	8005236 <_svfiprintf_r+0x32>
 8005218:	690b      	ldr	r3, [r1, #16]
 800521a:	b963      	cbnz	r3, 8005236 <_svfiprintf_r+0x32>
 800521c:	2140      	movs	r1, #64	; 0x40
 800521e:	f7ff ff0b 	bl	8005038 <_malloc_r>
 8005222:	6028      	str	r0, [r5, #0]
 8005224:	6128      	str	r0, [r5, #16]
 8005226:	b920      	cbnz	r0, 8005232 <_svfiprintf_r+0x2e>
 8005228:	230c      	movs	r3, #12
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	e0d0      	b.n	80053d4 <_svfiprintf_r+0x1d0>
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	616b      	str	r3, [r5, #20]
 8005236:	2300      	movs	r3, #0
 8005238:	9309      	str	r3, [sp, #36]	; 0x24
 800523a:	2320      	movs	r3, #32
 800523c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005240:	f8cd 800c 	str.w	r8, [sp, #12]
 8005244:	2330      	movs	r3, #48	; 0x30
 8005246:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053ec <_svfiprintf_r+0x1e8>
 800524a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800524e:	f04f 0901 	mov.w	r9, #1
 8005252:	4623      	mov	r3, r4
 8005254:	469a      	mov	sl, r3
 8005256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525a:	b10a      	cbz	r2, 8005260 <_svfiprintf_r+0x5c>
 800525c:	2a25      	cmp	r2, #37	; 0x25
 800525e:	d1f9      	bne.n	8005254 <_svfiprintf_r+0x50>
 8005260:	ebba 0b04 	subs.w	fp, sl, r4
 8005264:	d00b      	beq.n	800527e <_svfiprintf_r+0x7a>
 8005266:	465b      	mov	r3, fp
 8005268:	4622      	mov	r2, r4
 800526a:	4629      	mov	r1, r5
 800526c:	4638      	mov	r0, r7
 800526e:	f7ff ff6f 	bl	8005150 <__ssputs_r>
 8005272:	3001      	adds	r0, #1
 8005274:	f000 80a9 	beq.w	80053ca <_svfiprintf_r+0x1c6>
 8005278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527a:	445a      	add	r2, fp
 800527c:	9209      	str	r2, [sp, #36]	; 0x24
 800527e:	f89a 3000 	ldrb.w	r3, [sl]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80a1 	beq.w	80053ca <_svfiprintf_r+0x1c6>
 8005288:	2300      	movs	r3, #0
 800528a:	f04f 32ff 	mov.w	r2, #4294967295
 800528e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005292:	f10a 0a01 	add.w	sl, sl, #1
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	9307      	str	r3, [sp, #28]
 800529a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800529e:	931a      	str	r3, [sp, #104]	; 0x68
 80052a0:	4654      	mov	r4, sl
 80052a2:	2205      	movs	r2, #5
 80052a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a8:	4850      	ldr	r0, [pc, #320]	; (80053ec <_svfiprintf_r+0x1e8>)
 80052aa:	f7fa ff91 	bl	80001d0 <memchr>
 80052ae:	9a04      	ldr	r2, [sp, #16]
 80052b0:	b9d8      	cbnz	r0, 80052ea <_svfiprintf_r+0xe6>
 80052b2:	06d0      	lsls	r0, r2, #27
 80052b4:	bf44      	itt	mi
 80052b6:	2320      	movmi	r3, #32
 80052b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052bc:	0711      	lsls	r1, r2, #28
 80052be:	bf44      	itt	mi
 80052c0:	232b      	movmi	r3, #43	; 0x2b
 80052c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ca:	2b2a      	cmp	r3, #42	; 0x2a
 80052cc:	d015      	beq.n	80052fa <_svfiprintf_r+0xf6>
 80052ce:	9a07      	ldr	r2, [sp, #28]
 80052d0:	4654      	mov	r4, sl
 80052d2:	2000      	movs	r0, #0
 80052d4:	f04f 0c0a 	mov.w	ip, #10
 80052d8:	4621      	mov	r1, r4
 80052da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052de:	3b30      	subs	r3, #48	; 0x30
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	d94d      	bls.n	8005380 <_svfiprintf_r+0x17c>
 80052e4:	b1b0      	cbz	r0, 8005314 <_svfiprintf_r+0x110>
 80052e6:	9207      	str	r2, [sp, #28]
 80052e8:	e014      	b.n	8005314 <_svfiprintf_r+0x110>
 80052ea:	eba0 0308 	sub.w	r3, r0, r8
 80052ee:	fa09 f303 	lsl.w	r3, r9, r3
 80052f2:	4313      	orrs	r3, r2
 80052f4:	9304      	str	r3, [sp, #16]
 80052f6:	46a2      	mov	sl, r4
 80052f8:	e7d2      	b.n	80052a0 <_svfiprintf_r+0x9c>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	1d19      	adds	r1, r3, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	9103      	str	r1, [sp, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	bfbb      	ittet	lt
 8005306:	425b      	neglt	r3, r3
 8005308:	f042 0202 	orrlt.w	r2, r2, #2
 800530c:	9307      	strge	r3, [sp, #28]
 800530e:	9307      	strlt	r3, [sp, #28]
 8005310:	bfb8      	it	lt
 8005312:	9204      	strlt	r2, [sp, #16]
 8005314:	7823      	ldrb	r3, [r4, #0]
 8005316:	2b2e      	cmp	r3, #46	; 0x2e
 8005318:	d10c      	bne.n	8005334 <_svfiprintf_r+0x130>
 800531a:	7863      	ldrb	r3, [r4, #1]
 800531c:	2b2a      	cmp	r3, #42	; 0x2a
 800531e:	d134      	bne.n	800538a <_svfiprintf_r+0x186>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	9203      	str	r2, [sp, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	bfb8      	it	lt
 800532c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005330:	3402      	adds	r4, #2
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80053fc <_svfiprintf_r+0x1f8>
 8005338:	7821      	ldrb	r1, [r4, #0]
 800533a:	2203      	movs	r2, #3
 800533c:	4650      	mov	r0, sl
 800533e:	f7fa ff47 	bl	80001d0 <memchr>
 8005342:	b138      	cbz	r0, 8005354 <_svfiprintf_r+0x150>
 8005344:	9b04      	ldr	r3, [sp, #16]
 8005346:	eba0 000a 	sub.w	r0, r0, sl
 800534a:	2240      	movs	r2, #64	; 0x40
 800534c:	4082      	lsls	r2, r0
 800534e:	4313      	orrs	r3, r2
 8005350:	3401      	adds	r4, #1
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005358:	4825      	ldr	r0, [pc, #148]	; (80053f0 <_svfiprintf_r+0x1ec>)
 800535a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800535e:	2206      	movs	r2, #6
 8005360:	f7fa ff36 	bl	80001d0 <memchr>
 8005364:	2800      	cmp	r0, #0
 8005366:	d038      	beq.n	80053da <_svfiprintf_r+0x1d6>
 8005368:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <_svfiprintf_r+0x1f0>)
 800536a:	bb1b      	cbnz	r3, 80053b4 <_svfiprintf_r+0x1b0>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	3307      	adds	r3, #7
 8005370:	f023 0307 	bic.w	r3, r3, #7
 8005374:	3308      	adds	r3, #8
 8005376:	9303      	str	r3, [sp, #12]
 8005378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537a:	4433      	add	r3, r6
 800537c:	9309      	str	r3, [sp, #36]	; 0x24
 800537e:	e768      	b.n	8005252 <_svfiprintf_r+0x4e>
 8005380:	fb0c 3202 	mla	r2, ip, r2, r3
 8005384:	460c      	mov	r4, r1
 8005386:	2001      	movs	r0, #1
 8005388:	e7a6      	b.n	80052d8 <_svfiprintf_r+0xd4>
 800538a:	2300      	movs	r3, #0
 800538c:	3401      	adds	r4, #1
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	4619      	mov	r1, r3
 8005392:	f04f 0c0a 	mov.w	ip, #10
 8005396:	4620      	mov	r0, r4
 8005398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539c:	3a30      	subs	r2, #48	; 0x30
 800539e:	2a09      	cmp	r2, #9
 80053a0:	d903      	bls.n	80053aa <_svfiprintf_r+0x1a6>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0c6      	beq.n	8005334 <_svfiprintf_r+0x130>
 80053a6:	9105      	str	r1, [sp, #20]
 80053a8:	e7c4      	b.n	8005334 <_svfiprintf_r+0x130>
 80053aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ae:	4604      	mov	r4, r0
 80053b0:	2301      	movs	r3, #1
 80053b2:	e7f0      	b.n	8005396 <_svfiprintf_r+0x192>
 80053b4:	ab03      	add	r3, sp, #12
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	462a      	mov	r2, r5
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <_svfiprintf_r+0x1f4>)
 80053bc:	a904      	add	r1, sp, #16
 80053be:	4638      	mov	r0, r7
 80053c0:	f3af 8000 	nop.w
 80053c4:	1c42      	adds	r2, r0, #1
 80053c6:	4606      	mov	r6, r0
 80053c8:	d1d6      	bne.n	8005378 <_svfiprintf_r+0x174>
 80053ca:	89ab      	ldrh	r3, [r5, #12]
 80053cc:	065b      	lsls	r3, r3, #25
 80053ce:	f53f af2d 	bmi.w	800522c <_svfiprintf_r+0x28>
 80053d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053d4:	b01d      	add	sp, #116	; 0x74
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	462a      	mov	r2, r5
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <_svfiprintf_r+0x1f4>)
 80053e2:	a904      	add	r1, sp, #16
 80053e4:	4638      	mov	r0, r7
 80053e6:	f000 f879 	bl	80054dc <_printf_i>
 80053ea:	e7eb      	b.n	80053c4 <_svfiprintf_r+0x1c0>
 80053ec:	08006077 	.word	0x08006077
 80053f0:	08006081 	.word	0x08006081
 80053f4:	00000000 	.word	0x00000000
 80053f8:	08005151 	.word	0x08005151
 80053fc:	0800607d 	.word	0x0800607d

08005400 <_printf_common>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	4616      	mov	r6, r2
 8005406:	4699      	mov	r9, r3
 8005408:	688a      	ldr	r2, [r1, #8]
 800540a:	690b      	ldr	r3, [r1, #16]
 800540c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005410:	4293      	cmp	r3, r2
 8005412:	bfb8      	it	lt
 8005414:	4613      	movlt	r3, r2
 8005416:	6033      	str	r3, [r6, #0]
 8005418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800541c:	4607      	mov	r7, r0
 800541e:	460c      	mov	r4, r1
 8005420:	b10a      	cbz	r2, 8005426 <_printf_common+0x26>
 8005422:	3301      	adds	r3, #1
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	0699      	lsls	r1, r3, #26
 800542a:	bf42      	ittt	mi
 800542c:	6833      	ldrmi	r3, [r6, #0]
 800542e:	3302      	addmi	r3, #2
 8005430:	6033      	strmi	r3, [r6, #0]
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	f015 0506 	ands.w	r5, r5, #6
 8005438:	d106      	bne.n	8005448 <_printf_common+0x48>
 800543a:	f104 0a19 	add.w	sl, r4, #25
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	6832      	ldr	r2, [r6, #0]
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	42ab      	cmp	r3, r5
 8005446:	dc26      	bgt.n	8005496 <_printf_common+0x96>
 8005448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800544c:	1e13      	subs	r3, r2, #0
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	bf18      	it	ne
 8005452:	2301      	movne	r3, #1
 8005454:	0692      	lsls	r2, r2, #26
 8005456:	d42b      	bmi.n	80054b0 <_printf_common+0xb0>
 8005458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545c:	4649      	mov	r1, r9
 800545e:	4638      	mov	r0, r7
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d01e      	beq.n	80054a4 <_printf_common+0xa4>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	6922      	ldr	r2, [r4, #16]
 800546a:	f003 0306 	and.w	r3, r3, #6
 800546e:	2b04      	cmp	r3, #4
 8005470:	bf02      	ittt	eq
 8005472:	68e5      	ldreq	r5, [r4, #12]
 8005474:	6833      	ldreq	r3, [r6, #0]
 8005476:	1aed      	subeq	r5, r5, r3
 8005478:	68a3      	ldr	r3, [r4, #8]
 800547a:	bf0c      	ite	eq
 800547c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005480:	2500      	movne	r5, #0
 8005482:	4293      	cmp	r3, r2
 8005484:	bfc4      	itt	gt
 8005486:	1a9b      	subgt	r3, r3, r2
 8005488:	18ed      	addgt	r5, r5, r3
 800548a:	2600      	movs	r6, #0
 800548c:	341a      	adds	r4, #26
 800548e:	42b5      	cmp	r5, r6
 8005490:	d11a      	bne.n	80054c8 <_printf_common+0xc8>
 8005492:	2000      	movs	r0, #0
 8005494:	e008      	b.n	80054a8 <_printf_common+0xa8>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4649      	mov	r1, r9
 800549c:	4638      	mov	r0, r7
 800549e:	47c0      	blx	r8
 80054a0:	3001      	adds	r0, #1
 80054a2:	d103      	bne.n	80054ac <_printf_common+0xac>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ac:	3501      	adds	r5, #1
 80054ae:	e7c6      	b.n	800543e <_printf_common+0x3e>
 80054b0:	18e1      	adds	r1, r4, r3
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	2030      	movs	r0, #48	; 0x30
 80054b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ba:	4422      	add	r2, r4
 80054bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c4:	3302      	adds	r3, #2
 80054c6:	e7c7      	b.n	8005458 <_printf_common+0x58>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4622      	mov	r2, r4
 80054cc:	4649      	mov	r1, r9
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d0e6      	beq.n	80054a4 <_printf_common+0xa4>
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7d9      	b.n	800548e <_printf_common+0x8e>
	...

080054dc <_printf_i>:
 80054dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	7e0f      	ldrb	r7, [r1, #24]
 80054e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e4:	2f78      	cmp	r7, #120	; 0x78
 80054e6:	4691      	mov	r9, r2
 80054e8:	4680      	mov	r8, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	469a      	mov	sl, r3
 80054ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054f2:	d807      	bhi.n	8005504 <_printf_i+0x28>
 80054f4:	2f62      	cmp	r7, #98	; 0x62
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x32>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f000 80d4 	beq.w	80056a6 <_printf_i+0x1ca>
 80054fe:	2f58      	cmp	r7, #88	; 0x58
 8005500:	f000 80c0 	beq.w	8005684 <_printf_i+0x1a8>
 8005504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800550c:	e03a      	b.n	8005584 <_printf_i+0xa8>
 800550e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005512:	2b15      	cmp	r3, #21
 8005514:	d8f6      	bhi.n	8005504 <_printf_i+0x28>
 8005516:	a101      	add	r1, pc, #4	; (adr r1, 800551c <_printf_i+0x40>)
 8005518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800551c:	08005575 	.word	0x08005575
 8005520:	08005589 	.word	0x08005589
 8005524:	08005505 	.word	0x08005505
 8005528:	08005505 	.word	0x08005505
 800552c:	08005505 	.word	0x08005505
 8005530:	08005505 	.word	0x08005505
 8005534:	08005589 	.word	0x08005589
 8005538:	08005505 	.word	0x08005505
 800553c:	08005505 	.word	0x08005505
 8005540:	08005505 	.word	0x08005505
 8005544:	08005505 	.word	0x08005505
 8005548:	0800568d 	.word	0x0800568d
 800554c:	080055b5 	.word	0x080055b5
 8005550:	08005647 	.word	0x08005647
 8005554:	08005505 	.word	0x08005505
 8005558:	08005505 	.word	0x08005505
 800555c:	080056af 	.word	0x080056af
 8005560:	08005505 	.word	0x08005505
 8005564:	080055b5 	.word	0x080055b5
 8005568:	08005505 	.word	0x08005505
 800556c:	08005505 	.word	0x08005505
 8005570:	0800564f 	.word	0x0800564f
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	602a      	str	r2, [r5, #0]
 800557c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005584:	2301      	movs	r3, #1
 8005586:	e09f      	b.n	80056c8 <_printf_i+0x1ec>
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	0607      	lsls	r7, r0, #24
 800558e:	f103 0104 	add.w	r1, r3, #4
 8005592:	6029      	str	r1, [r5, #0]
 8005594:	d501      	bpl.n	800559a <_printf_i+0xbe>
 8005596:	681e      	ldr	r6, [r3, #0]
 8005598:	e003      	b.n	80055a2 <_printf_i+0xc6>
 800559a:	0646      	lsls	r6, r0, #25
 800559c:	d5fb      	bpl.n	8005596 <_printf_i+0xba>
 800559e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	da03      	bge.n	80055ae <_printf_i+0xd2>
 80055a6:	232d      	movs	r3, #45	; 0x2d
 80055a8:	4276      	negs	r6, r6
 80055aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ae:	485a      	ldr	r0, [pc, #360]	; (8005718 <_printf_i+0x23c>)
 80055b0:	230a      	movs	r3, #10
 80055b2:	e012      	b.n	80055da <_printf_i+0xfe>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	1d19      	adds	r1, r3, #4
 80055ba:	6029      	str	r1, [r5, #0]
 80055bc:	0605      	lsls	r5, r0, #24
 80055be:	d501      	bpl.n	80055c4 <_printf_i+0xe8>
 80055c0:	681e      	ldr	r6, [r3, #0]
 80055c2:	e002      	b.n	80055ca <_printf_i+0xee>
 80055c4:	0641      	lsls	r1, r0, #25
 80055c6:	d5fb      	bpl.n	80055c0 <_printf_i+0xe4>
 80055c8:	881e      	ldrh	r6, [r3, #0]
 80055ca:	4853      	ldr	r0, [pc, #332]	; (8005718 <_printf_i+0x23c>)
 80055cc:	2f6f      	cmp	r7, #111	; 0x6f
 80055ce:	bf0c      	ite	eq
 80055d0:	2308      	moveq	r3, #8
 80055d2:	230a      	movne	r3, #10
 80055d4:	2100      	movs	r1, #0
 80055d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055da:	6865      	ldr	r5, [r4, #4]
 80055dc:	60a5      	str	r5, [r4, #8]
 80055de:	2d00      	cmp	r5, #0
 80055e0:	bfa2      	ittt	ge
 80055e2:	6821      	ldrge	r1, [r4, #0]
 80055e4:	f021 0104 	bicge.w	r1, r1, #4
 80055e8:	6021      	strge	r1, [r4, #0]
 80055ea:	b90e      	cbnz	r6, 80055f0 <_printf_i+0x114>
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	d04b      	beq.n	8005688 <_printf_i+0x1ac>
 80055f0:	4615      	mov	r5, r2
 80055f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055f6:	fb03 6711 	mls	r7, r3, r1, r6
 80055fa:	5dc7      	ldrb	r7, [r0, r7]
 80055fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005600:	4637      	mov	r7, r6
 8005602:	42bb      	cmp	r3, r7
 8005604:	460e      	mov	r6, r1
 8005606:	d9f4      	bls.n	80055f2 <_printf_i+0x116>
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <_printf_i+0x148>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07de      	lsls	r6, r3, #31
 8005610:	d508      	bpl.n	8005624 <_printf_i+0x148>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	6861      	ldr	r1, [r4, #4]
 8005616:	4299      	cmp	r1, r3
 8005618:	bfde      	ittt	le
 800561a:	2330      	movle	r3, #48	; 0x30
 800561c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005624:	1b52      	subs	r2, r2, r5
 8005626:	6122      	str	r2, [r4, #16]
 8005628:	f8cd a000 	str.w	sl, [sp]
 800562c:	464b      	mov	r3, r9
 800562e:	aa03      	add	r2, sp, #12
 8005630:	4621      	mov	r1, r4
 8005632:	4640      	mov	r0, r8
 8005634:	f7ff fee4 	bl	8005400 <_printf_common>
 8005638:	3001      	adds	r0, #1
 800563a:	d14a      	bne.n	80056d2 <_printf_i+0x1f6>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	b004      	add	sp, #16
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f043 0320 	orr.w	r3, r3, #32
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	4833      	ldr	r0, [pc, #204]	; (800571c <_printf_i+0x240>)
 8005650:	2778      	movs	r7, #120	; 0x78
 8005652:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	6829      	ldr	r1, [r5, #0]
 800565a:	061f      	lsls	r7, r3, #24
 800565c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005660:	d402      	bmi.n	8005668 <_printf_i+0x18c>
 8005662:	065f      	lsls	r7, r3, #25
 8005664:	bf48      	it	mi
 8005666:	b2b6      	uxthmi	r6, r6
 8005668:	07df      	lsls	r7, r3, #31
 800566a:	bf48      	it	mi
 800566c:	f043 0320 	orrmi.w	r3, r3, #32
 8005670:	6029      	str	r1, [r5, #0]
 8005672:	bf48      	it	mi
 8005674:	6023      	strmi	r3, [r4, #0]
 8005676:	b91e      	cbnz	r6, 8005680 <_printf_i+0x1a4>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	f023 0320 	bic.w	r3, r3, #32
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	2310      	movs	r3, #16
 8005682:	e7a7      	b.n	80055d4 <_printf_i+0xf8>
 8005684:	4824      	ldr	r0, [pc, #144]	; (8005718 <_printf_i+0x23c>)
 8005686:	e7e4      	b.n	8005652 <_printf_i+0x176>
 8005688:	4615      	mov	r5, r2
 800568a:	e7bd      	b.n	8005608 <_printf_i+0x12c>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	6826      	ldr	r6, [r4, #0]
 8005690:	6961      	ldr	r1, [r4, #20]
 8005692:	1d18      	adds	r0, r3, #4
 8005694:	6028      	str	r0, [r5, #0]
 8005696:	0635      	lsls	r5, r6, #24
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	d501      	bpl.n	80056a0 <_printf_i+0x1c4>
 800569c:	6019      	str	r1, [r3, #0]
 800569e:	e002      	b.n	80056a6 <_printf_i+0x1ca>
 80056a0:	0670      	lsls	r0, r6, #25
 80056a2:	d5fb      	bpl.n	800569c <_printf_i+0x1c0>
 80056a4:	8019      	strh	r1, [r3, #0]
 80056a6:	2300      	movs	r3, #0
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	4615      	mov	r5, r2
 80056ac:	e7bc      	b.n	8005628 <_printf_i+0x14c>
 80056ae:	682b      	ldr	r3, [r5, #0]
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	602a      	str	r2, [r5, #0]
 80056b4:	681d      	ldr	r5, [r3, #0]
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	2100      	movs	r1, #0
 80056ba:	4628      	mov	r0, r5
 80056bc:	f7fa fd88 	bl	80001d0 <memchr>
 80056c0:	b108      	cbz	r0, 80056c6 <_printf_i+0x1ea>
 80056c2:	1b40      	subs	r0, r0, r5
 80056c4:	6060      	str	r0, [r4, #4]
 80056c6:	6863      	ldr	r3, [r4, #4]
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	2300      	movs	r3, #0
 80056cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d0:	e7aa      	b.n	8005628 <_printf_i+0x14c>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	462a      	mov	r2, r5
 80056d6:	4649      	mov	r1, r9
 80056d8:	4640      	mov	r0, r8
 80056da:	47d0      	blx	sl
 80056dc:	3001      	adds	r0, #1
 80056de:	d0ad      	beq.n	800563c <_printf_i+0x160>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	079b      	lsls	r3, r3, #30
 80056e4:	d413      	bmi.n	800570e <_printf_i+0x232>
 80056e6:	68e0      	ldr	r0, [r4, #12]
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	4298      	cmp	r0, r3
 80056ec:	bfb8      	it	lt
 80056ee:	4618      	movlt	r0, r3
 80056f0:	e7a6      	b.n	8005640 <_printf_i+0x164>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4632      	mov	r2, r6
 80056f6:	4649      	mov	r1, r9
 80056f8:	4640      	mov	r0, r8
 80056fa:	47d0      	blx	sl
 80056fc:	3001      	adds	r0, #1
 80056fe:	d09d      	beq.n	800563c <_printf_i+0x160>
 8005700:	3501      	adds	r5, #1
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	9903      	ldr	r1, [sp, #12]
 8005706:	1a5b      	subs	r3, r3, r1
 8005708:	42ab      	cmp	r3, r5
 800570a:	dcf2      	bgt.n	80056f2 <_printf_i+0x216>
 800570c:	e7eb      	b.n	80056e6 <_printf_i+0x20a>
 800570e:	2500      	movs	r5, #0
 8005710:	f104 0619 	add.w	r6, r4, #25
 8005714:	e7f5      	b.n	8005702 <_printf_i+0x226>
 8005716:	bf00      	nop
 8005718:	08006088 	.word	0x08006088
 800571c:	08006099 	.word	0x08006099

08005720 <__sflush_r>:
 8005720:	898a      	ldrh	r2, [r1, #12]
 8005722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005726:	4605      	mov	r5, r0
 8005728:	0710      	lsls	r0, r2, #28
 800572a:	460c      	mov	r4, r1
 800572c:	d458      	bmi.n	80057e0 <__sflush_r+0xc0>
 800572e:	684b      	ldr	r3, [r1, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc05      	bgt.n	8005740 <__sflush_r+0x20>
 8005734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	dc02      	bgt.n	8005740 <__sflush_r+0x20>
 800573a:	2000      	movs	r0, #0
 800573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005742:	2e00      	cmp	r6, #0
 8005744:	d0f9      	beq.n	800573a <__sflush_r+0x1a>
 8005746:	2300      	movs	r3, #0
 8005748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800574c:	682f      	ldr	r7, [r5, #0]
 800574e:	6a21      	ldr	r1, [r4, #32]
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	d032      	beq.n	80057ba <__sflush_r+0x9a>
 8005754:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	075a      	lsls	r2, r3, #29
 800575a:	d505      	bpl.n	8005768 <__sflush_r+0x48>
 800575c:	6863      	ldr	r3, [r4, #4]
 800575e:	1ac0      	subs	r0, r0, r3
 8005760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005762:	b10b      	cbz	r3, 8005768 <__sflush_r+0x48>
 8005764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005766:	1ac0      	subs	r0, r0, r3
 8005768:	2300      	movs	r3, #0
 800576a:	4602      	mov	r2, r0
 800576c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800576e:	6a21      	ldr	r1, [r4, #32]
 8005770:	4628      	mov	r0, r5
 8005772:	47b0      	blx	r6
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	d106      	bne.n	8005788 <__sflush_r+0x68>
 800577a:	6829      	ldr	r1, [r5, #0]
 800577c:	291d      	cmp	r1, #29
 800577e:	d82b      	bhi.n	80057d8 <__sflush_r+0xb8>
 8005780:	4a29      	ldr	r2, [pc, #164]	; (8005828 <__sflush_r+0x108>)
 8005782:	410a      	asrs	r2, r1
 8005784:	07d6      	lsls	r6, r2, #31
 8005786:	d427      	bmi.n	80057d8 <__sflush_r+0xb8>
 8005788:	2200      	movs	r2, #0
 800578a:	6062      	str	r2, [r4, #4]
 800578c:	04d9      	lsls	r1, r3, #19
 800578e:	6922      	ldr	r2, [r4, #16]
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	d504      	bpl.n	800579e <__sflush_r+0x7e>
 8005794:	1c42      	adds	r2, r0, #1
 8005796:	d101      	bne.n	800579c <__sflush_r+0x7c>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b903      	cbnz	r3, 800579e <__sflush_r+0x7e>
 800579c:	6560      	str	r0, [r4, #84]	; 0x54
 800579e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057a0:	602f      	str	r7, [r5, #0]
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d0c9      	beq.n	800573a <__sflush_r+0x1a>
 80057a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057aa:	4299      	cmp	r1, r3
 80057ac:	d002      	beq.n	80057b4 <__sflush_r+0x94>
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7ff fbce 	bl	8004f50 <_free_r>
 80057b4:	2000      	movs	r0, #0
 80057b6:	6360      	str	r0, [r4, #52]	; 0x34
 80057b8:	e7c0      	b.n	800573c <__sflush_r+0x1c>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4628      	mov	r0, r5
 80057be:	47b0      	blx	r6
 80057c0:	1c41      	adds	r1, r0, #1
 80057c2:	d1c8      	bne.n	8005756 <__sflush_r+0x36>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0c5      	beq.n	8005756 <__sflush_r+0x36>
 80057ca:	2b1d      	cmp	r3, #29
 80057cc:	d001      	beq.n	80057d2 <__sflush_r+0xb2>
 80057ce:	2b16      	cmp	r3, #22
 80057d0:	d101      	bne.n	80057d6 <__sflush_r+0xb6>
 80057d2:	602f      	str	r7, [r5, #0]
 80057d4:	e7b1      	b.n	800573a <__sflush_r+0x1a>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	e7ad      	b.n	800573c <__sflush_r+0x1c>
 80057e0:	690f      	ldr	r7, [r1, #16]
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	d0a9      	beq.n	800573a <__sflush_r+0x1a>
 80057e6:	0793      	lsls	r3, r2, #30
 80057e8:	680e      	ldr	r6, [r1, #0]
 80057ea:	bf08      	it	eq
 80057ec:	694b      	ldreq	r3, [r1, #20]
 80057ee:	600f      	str	r7, [r1, #0]
 80057f0:	bf18      	it	ne
 80057f2:	2300      	movne	r3, #0
 80057f4:	eba6 0807 	sub.w	r8, r6, r7
 80057f8:	608b      	str	r3, [r1, #8]
 80057fa:	f1b8 0f00 	cmp.w	r8, #0
 80057fe:	dd9c      	ble.n	800573a <__sflush_r+0x1a>
 8005800:	6a21      	ldr	r1, [r4, #32]
 8005802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005804:	4643      	mov	r3, r8
 8005806:	463a      	mov	r2, r7
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	2800      	cmp	r0, #0
 800580e:	dc06      	bgt.n	800581e <__sflush_r+0xfe>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	e78e      	b.n	800573c <__sflush_r+0x1c>
 800581e:	4407      	add	r7, r0
 8005820:	eba8 0800 	sub.w	r8, r8, r0
 8005824:	e7e9      	b.n	80057fa <__sflush_r+0xda>
 8005826:	bf00      	nop
 8005828:	dfbffffe 	.word	0xdfbffffe

0800582c <_fflush_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	690b      	ldr	r3, [r1, #16]
 8005830:	4605      	mov	r5, r0
 8005832:	460c      	mov	r4, r1
 8005834:	b913      	cbnz	r3, 800583c <_fflush_r+0x10>
 8005836:	2500      	movs	r5, #0
 8005838:	4628      	mov	r0, r5
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	b118      	cbz	r0, 8005846 <_fflush_r+0x1a>
 800583e:	6a03      	ldr	r3, [r0, #32]
 8005840:	b90b      	cbnz	r3, 8005846 <_fflush_r+0x1a>
 8005842:	f7ff fa51 	bl	8004ce8 <__sinit>
 8005846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f3      	beq.n	8005836 <_fflush_r+0xa>
 800584e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005850:	07d0      	lsls	r0, r2, #31
 8005852:	d404      	bmi.n	800585e <_fflush_r+0x32>
 8005854:	0599      	lsls	r1, r3, #22
 8005856:	d402      	bmi.n	800585e <_fflush_r+0x32>
 8005858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585a:	f7ff fb58 	bl	8004f0e <__retarget_lock_acquire_recursive>
 800585e:	4628      	mov	r0, r5
 8005860:	4621      	mov	r1, r4
 8005862:	f7ff ff5d 	bl	8005720 <__sflush_r>
 8005866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005868:	07da      	lsls	r2, r3, #31
 800586a:	4605      	mov	r5, r0
 800586c:	d4e4      	bmi.n	8005838 <_fflush_r+0xc>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	059b      	lsls	r3, r3, #22
 8005872:	d4e1      	bmi.n	8005838 <_fflush_r+0xc>
 8005874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005876:	f7ff fb4b 	bl	8004f10 <__retarget_lock_release_recursive>
 800587a:	e7dd      	b.n	8005838 <_fflush_r+0xc>

0800587c <fiprintf>:
 800587c:	b40e      	push	{r1, r2, r3}
 800587e:	b503      	push	{r0, r1, lr}
 8005880:	4601      	mov	r1, r0
 8005882:	ab03      	add	r3, sp, #12
 8005884:	4805      	ldr	r0, [pc, #20]	; (800589c <fiprintf+0x20>)
 8005886:	f853 2b04 	ldr.w	r2, [r3], #4
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f000 f89f 	bl	80059d0 <_vfiprintf_r>
 8005892:	b002      	add	sp, #8
 8005894:	f85d eb04 	ldr.w	lr, [sp], #4
 8005898:	b003      	add	sp, #12
 800589a:	4770      	bx	lr
 800589c:	20000064 	.word	0x20000064

080058a0 <memmove>:
 80058a0:	4288      	cmp	r0, r1
 80058a2:	b510      	push	{r4, lr}
 80058a4:	eb01 0402 	add.w	r4, r1, r2
 80058a8:	d902      	bls.n	80058b0 <memmove+0x10>
 80058aa:	4284      	cmp	r4, r0
 80058ac:	4623      	mov	r3, r4
 80058ae:	d807      	bhi.n	80058c0 <memmove+0x20>
 80058b0:	1e43      	subs	r3, r0, #1
 80058b2:	42a1      	cmp	r1, r4
 80058b4:	d008      	beq.n	80058c8 <memmove+0x28>
 80058b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058be:	e7f8      	b.n	80058b2 <memmove+0x12>
 80058c0:	4402      	add	r2, r0
 80058c2:	4601      	mov	r1, r0
 80058c4:	428a      	cmp	r2, r1
 80058c6:	d100      	bne.n	80058ca <memmove+0x2a>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058d2:	e7f7      	b.n	80058c4 <memmove+0x24>

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d06      	ldr	r5, [pc, #24]	; (80058f0 <_sbrk_r+0x1c>)
 80058d8:	2300      	movs	r3, #0
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb fc9c 	bl	800121c <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000270 	.word	0x20000270

080058f4 <memcpy>:
 80058f4:	440a      	add	r2, r1
 80058f6:	4291      	cmp	r1, r2
 80058f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058fc:	d100      	bne.n	8005900 <memcpy+0xc>
 80058fe:	4770      	bx	lr
 8005900:	b510      	push	{r4, lr}
 8005902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590a:	4291      	cmp	r1, r2
 800590c:	d1f9      	bne.n	8005902 <memcpy+0xe>
 800590e:	bd10      	pop	{r4, pc}

08005910 <abort>:
 8005910:	b508      	push	{r3, lr}
 8005912:	2006      	movs	r0, #6
 8005914:	f000 fa34 	bl	8005d80 <raise>
 8005918:	2001      	movs	r0, #1
 800591a:	f7fb fc07 	bl	800112c <_exit>

0800591e <_realloc_r>:
 800591e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005922:	4680      	mov	r8, r0
 8005924:	4614      	mov	r4, r2
 8005926:	460e      	mov	r6, r1
 8005928:	b921      	cbnz	r1, 8005934 <_realloc_r+0x16>
 800592a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800592e:	4611      	mov	r1, r2
 8005930:	f7ff bb82 	b.w	8005038 <_malloc_r>
 8005934:	b92a      	cbnz	r2, 8005942 <_realloc_r+0x24>
 8005936:	f7ff fb0b 	bl	8004f50 <_free_r>
 800593a:	4625      	mov	r5, r4
 800593c:	4628      	mov	r0, r5
 800593e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005942:	f000 fa39 	bl	8005db8 <_malloc_usable_size_r>
 8005946:	4284      	cmp	r4, r0
 8005948:	4607      	mov	r7, r0
 800594a:	d802      	bhi.n	8005952 <_realloc_r+0x34>
 800594c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005950:	d812      	bhi.n	8005978 <_realloc_r+0x5a>
 8005952:	4621      	mov	r1, r4
 8005954:	4640      	mov	r0, r8
 8005956:	f7ff fb6f 	bl	8005038 <_malloc_r>
 800595a:	4605      	mov	r5, r0
 800595c:	2800      	cmp	r0, #0
 800595e:	d0ed      	beq.n	800593c <_realloc_r+0x1e>
 8005960:	42bc      	cmp	r4, r7
 8005962:	4622      	mov	r2, r4
 8005964:	4631      	mov	r1, r6
 8005966:	bf28      	it	cs
 8005968:	463a      	movcs	r2, r7
 800596a:	f7ff ffc3 	bl	80058f4 <memcpy>
 800596e:	4631      	mov	r1, r6
 8005970:	4640      	mov	r0, r8
 8005972:	f7ff faed 	bl	8004f50 <_free_r>
 8005976:	e7e1      	b.n	800593c <_realloc_r+0x1e>
 8005978:	4635      	mov	r5, r6
 800597a:	e7df      	b.n	800593c <_realloc_r+0x1e>

0800597c <__sfputc_r>:
 800597c:	6893      	ldr	r3, [r2, #8]
 800597e:	3b01      	subs	r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	b410      	push	{r4}
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	da08      	bge.n	800599a <__sfputc_r+0x1e>
 8005988:	6994      	ldr	r4, [r2, #24]
 800598a:	42a3      	cmp	r3, r4
 800598c:	db01      	blt.n	8005992 <__sfputc_r+0x16>
 800598e:	290a      	cmp	r1, #10
 8005990:	d103      	bne.n	800599a <__sfputc_r+0x1e>
 8005992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005996:	f000 b935 	b.w	8005c04 <__swbuf_r>
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	1c58      	adds	r0, r3, #1
 800599e:	6010      	str	r0, [r2, #0]
 80059a0:	7019      	strb	r1, [r3, #0]
 80059a2:	4608      	mov	r0, r1
 80059a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <__sfputs_r>:
 80059aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	18d5      	adds	r5, r2, r3
 80059b4:	42ac      	cmp	r4, r5
 80059b6:	d101      	bne.n	80059bc <__sfputs_r+0x12>
 80059b8:	2000      	movs	r0, #0
 80059ba:	e007      	b.n	80059cc <__sfputs_r+0x22>
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	463a      	mov	r2, r7
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff ffda 	bl	800597c <__sfputc_r>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d1f3      	bne.n	80059b4 <__sfputs_r+0xa>
 80059cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059d0 <_vfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	460d      	mov	r5, r1
 80059d6:	b09d      	sub	sp, #116	; 0x74
 80059d8:	4614      	mov	r4, r2
 80059da:	4698      	mov	r8, r3
 80059dc:	4606      	mov	r6, r0
 80059de:	b118      	cbz	r0, 80059e8 <_vfiprintf_r+0x18>
 80059e0:	6a03      	ldr	r3, [r0, #32]
 80059e2:	b90b      	cbnz	r3, 80059e8 <_vfiprintf_r+0x18>
 80059e4:	f7ff f980 	bl	8004ce8 <__sinit>
 80059e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059ea:	07d9      	lsls	r1, r3, #31
 80059ec:	d405      	bmi.n	80059fa <_vfiprintf_r+0x2a>
 80059ee:	89ab      	ldrh	r3, [r5, #12]
 80059f0:	059a      	lsls	r2, r3, #22
 80059f2:	d402      	bmi.n	80059fa <_vfiprintf_r+0x2a>
 80059f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059f6:	f7ff fa8a 	bl	8004f0e <__retarget_lock_acquire_recursive>
 80059fa:	89ab      	ldrh	r3, [r5, #12]
 80059fc:	071b      	lsls	r3, r3, #28
 80059fe:	d501      	bpl.n	8005a04 <_vfiprintf_r+0x34>
 8005a00:	692b      	ldr	r3, [r5, #16]
 8005a02:	b99b      	cbnz	r3, 8005a2c <_vfiprintf_r+0x5c>
 8005a04:	4629      	mov	r1, r5
 8005a06:	4630      	mov	r0, r6
 8005a08:	f000 f93a 	bl	8005c80 <__swsetup_r>
 8005a0c:	b170      	cbz	r0, 8005a2c <_vfiprintf_r+0x5c>
 8005a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a10:	07dc      	lsls	r4, r3, #31
 8005a12:	d504      	bpl.n	8005a1e <_vfiprintf_r+0x4e>
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	b01d      	add	sp, #116	; 0x74
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	0598      	lsls	r0, r3, #22
 8005a22:	d4f7      	bmi.n	8005a14 <_vfiprintf_r+0x44>
 8005a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a26:	f7ff fa73 	bl	8004f10 <__retarget_lock_release_recursive>
 8005a2a:	e7f3      	b.n	8005a14 <_vfiprintf_r+0x44>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	2320      	movs	r3, #32
 8005a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a3a:	2330      	movs	r3, #48	; 0x30
 8005a3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005bf0 <_vfiprintf_r+0x220>
 8005a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a44:	f04f 0901 	mov.w	r9, #1
 8005a48:	4623      	mov	r3, r4
 8005a4a:	469a      	mov	sl, r3
 8005a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a50:	b10a      	cbz	r2, 8005a56 <_vfiprintf_r+0x86>
 8005a52:	2a25      	cmp	r2, #37	; 0x25
 8005a54:	d1f9      	bne.n	8005a4a <_vfiprintf_r+0x7a>
 8005a56:	ebba 0b04 	subs.w	fp, sl, r4
 8005a5a:	d00b      	beq.n	8005a74 <_vfiprintf_r+0xa4>
 8005a5c:	465b      	mov	r3, fp
 8005a5e:	4622      	mov	r2, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff ffa1 	bl	80059aa <__sfputs_r>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f000 80a9 	beq.w	8005bc0 <_vfiprintf_r+0x1f0>
 8005a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a70:	445a      	add	r2, fp
 8005a72:	9209      	str	r2, [sp, #36]	; 0x24
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a1 	beq.w	8005bc0 <_vfiprintf_r+0x1f0>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295
 8005a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a88:	f10a 0a01 	add.w	sl, sl, #1
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	9307      	str	r3, [sp, #28]
 8005a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a94:	931a      	str	r3, [sp, #104]	; 0x68
 8005a96:	4654      	mov	r4, sl
 8005a98:	2205      	movs	r2, #5
 8005a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a9e:	4854      	ldr	r0, [pc, #336]	; (8005bf0 <_vfiprintf_r+0x220>)
 8005aa0:	f7fa fb96 	bl	80001d0 <memchr>
 8005aa4:	9a04      	ldr	r2, [sp, #16]
 8005aa6:	b9d8      	cbnz	r0, 8005ae0 <_vfiprintf_r+0x110>
 8005aa8:	06d1      	lsls	r1, r2, #27
 8005aaa:	bf44      	itt	mi
 8005aac:	2320      	movmi	r3, #32
 8005aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ab2:	0713      	lsls	r3, r2, #28
 8005ab4:	bf44      	itt	mi
 8005ab6:	232b      	movmi	r3, #43	; 0x2b
 8005ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005abc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac2:	d015      	beq.n	8005af0 <_vfiprintf_r+0x120>
 8005ac4:	9a07      	ldr	r2, [sp, #28]
 8005ac6:	4654      	mov	r4, sl
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f04f 0c0a 	mov.w	ip, #10
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ad4:	3b30      	subs	r3, #48	; 0x30
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	d94d      	bls.n	8005b76 <_vfiprintf_r+0x1a6>
 8005ada:	b1b0      	cbz	r0, 8005b0a <_vfiprintf_r+0x13a>
 8005adc:	9207      	str	r2, [sp, #28]
 8005ade:	e014      	b.n	8005b0a <_vfiprintf_r+0x13a>
 8005ae0:	eba0 0308 	sub.w	r3, r0, r8
 8005ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	46a2      	mov	sl, r4
 8005aee:	e7d2      	b.n	8005a96 <_vfiprintf_r+0xc6>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	1d19      	adds	r1, r3, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	9103      	str	r1, [sp, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bfbb      	ittet	lt
 8005afc:	425b      	neglt	r3, r3
 8005afe:	f042 0202 	orrlt.w	r2, r2, #2
 8005b02:	9307      	strge	r3, [sp, #28]
 8005b04:	9307      	strlt	r3, [sp, #28]
 8005b06:	bfb8      	it	lt
 8005b08:	9204      	strlt	r2, [sp, #16]
 8005b0a:	7823      	ldrb	r3, [r4, #0]
 8005b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b0e:	d10c      	bne.n	8005b2a <_vfiprintf_r+0x15a>
 8005b10:	7863      	ldrb	r3, [r4, #1]
 8005b12:	2b2a      	cmp	r3, #42	; 0x2a
 8005b14:	d134      	bne.n	8005b80 <_vfiprintf_r+0x1b0>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	9203      	str	r2, [sp, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfb8      	it	lt
 8005b22:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b26:	3402      	adds	r4, #2
 8005b28:	9305      	str	r3, [sp, #20]
 8005b2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c00 <_vfiprintf_r+0x230>
 8005b2e:	7821      	ldrb	r1, [r4, #0]
 8005b30:	2203      	movs	r2, #3
 8005b32:	4650      	mov	r0, sl
 8005b34:	f7fa fb4c 	bl	80001d0 <memchr>
 8005b38:	b138      	cbz	r0, 8005b4a <_vfiprintf_r+0x17a>
 8005b3a:	9b04      	ldr	r3, [sp, #16]
 8005b3c:	eba0 000a 	sub.w	r0, r0, sl
 8005b40:	2240      	movs	r2, #64	; 0x40
 8005b42:	4082      	lsls	r2, r0
 8005b44:	4313      	orrs	r3, r2
 8005b46:	3401      	adds	r4, #1
 8005b48:	9304      	str	r3, [sp, #16]
 8005b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4e:	4829      	ldr	r0, [pc, #164]	; (8005bf4 <_vfiprintf_r+0x224>)
 8005b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b54:	2206      	movs	r2, #6
 8005b56:	f7fa fb3b 	bl	80001d0 <memchr>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d03f      	beq.n	8005bde <_vfiprintf_r+0x20e>
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <_vfiprintf_r+0x228>)
 8005b60:	bb1b      	cbnz	r3, 8005baa <_vfiprintf_r+0x1da>
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	3307      	adds	r3, #7
 8005b66:	f023 0307 	bic.w	r3, r3, #7
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	9303      	str	r3, [sp, #12]
 8005b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b70:	443b      	add	r3, r7
 8005b72:	9309      	str	r3, [sp, #36]	; 0x24
 8005b74:	e768      	b.n	8005a48 <_vfiprintf_r+0x78>
 8005b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	e7a6      	b.n	8005ace <_vfiprintf_r+0xfe>
 8005b80:	2300      	movs	r3, #0
 8005b82:	3401      	adds	r4, #1
 8005b84:	9305      	str	r3, [sp, #20]
 8005b86:	4619      	mov	r1, r3
 8005b88:	f04f 0c0a 	mov.w	ip, #10
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b92:	3a30      	subs	r2, #48	; 0x30
 8005b94:	2a09      	cmp	r2, #9
 8005b96:	d903      	bls.n	8005ba0 <_vfiprintf_r+0x1d0>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0c6      	beq.n	8005b2a <_vfiprintf_r+0x15a>
 8005b9c:	9105      	str	r1, [sp, #20]
 8005b9e:	e7c4      	b.n	8005b2a <_vfiprintf_r+0x15a>
 8005ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e7f0      	b.n	8005b8c <_vfiprintf_r+0x1bc>
 8005baa:	ab03      	add	r3, sp, #12
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	462a      	mov	r2, r5
 8005bb0:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <_vfiprintf_r+0x22c>)
 8005bb2:	a904      	add	r1, sp, #16
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f3af 8000 	nop.w
 8005bba:	4607      	mov	r7, r0
 8005bbc:	1c78      	adds	r0, r7, #1
 8005bbe:	d1d6      	bne.n	8005b6e <_vfiprintf_r+0x19e>
 8005bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc2:	07d9      	lsls	r1, r3, #31
 8005bc4:	d405      	bmi.n	8005bd2 <_vfiprintf_r+0x202>
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	059a      	lsls	r2, r3, #22
 8005bca:	d402      	bmi.n	8005bd2 <_vfiprintf_r+0x202>
 8005bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bce:	f7ff f99f 	bl	8004f10 <__retarget_lock_release_recursive>
 8005bd2:	89ab      	ldrh	r3, [r5, #12]
 8005bd4:	065b      	lsls	r3, r3, #25
 8005bd6:	f53f af1d 	bmi.w	8005a14 <_vfiprintf_r+0x44>
 8005bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bdc:	e71c      	b.n	8005a18 <_vfiprintf_r+0x48>
 8005bde:	ab03      	add	r3, sp, #12
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	462a      	mov	r2, r5
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <_vfiprintf_r+0x22c>)
 8005be6:	a904      	add	r1, sp, #16
 8005be8:	4630      	mov	r0, r6
 8005bea:	f7ff fc77 	bl	80054dc <_printf_i>
 8005bee:	e7e4      	b.n	8005bba <_vfiprintf_r+0x1ea>
 8005bf0:	08006077 	.word	0x08006077
 8005bf4:	08006081 	.word	0x08006081
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	080059ab 	.word	0x080059ab
 8005c00:	0800607d 	.word	0x0800607d

08005c04 <__swbuf_r>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	460e      	mov	r6, r1
 8005c08:	4614      	mov	r4, r2
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	b118      	cbz	r0, 8005c16 <__swbuf_r+0x12>
 8005c0e:	6a03      	ldr	r3, [r0, #32]
 8005c10:	b90b      	cbnz	r3, 8005c16 <__swbuf_r+0x12>
 8005c12:	f7ff f869 	bl	8004ce8 <__sinit>
 8005c16:	69a3      	ldr	r3, [r4, #24]
 8005c18:	60a3      	str	r3, [r4, #8]
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	071a      	lsls	r2, r3, #28
 8005c1e:	d525      	bpl.n	8005c6c <__swbuf_r+0x68>
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	b31b      	cbz	r3, 8005c6c <__swbuf_r+0x68>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	6922      	ldr	r2, [r4, #16]
 8005c28:	1a98      	subs	r0, r3, r2
 8005c2a:	6963      	ldr	r3, [r4, #20]
 8005c2c:	b2f6      	uxtb	r6, r6
 8005c2e:	4283      	cmp	r3, r0
 8005c30:	4637      	mov	r7, r6
 8005c32:	dc04      	bgt.n	8005c3e <__swbuf_r+0x3a>
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f7ff fdf8 	bl	800582c <_fflush_r>
 8005c3c:	b9e0      	cbnz	r0, 8005c78 <__swbuf_r+0x74>
 8005c3e:	68a3      	ldr	r3, [r4, #8]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	60a3      	str	r3, [r4, #8]
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	6022      	str	r2, [r4, #0]
 8005c4a:	701e      	strb	r6, [r3, #0]
 8005c4c:	6962      	ldr	r2, [r4, #20]
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d004      	beq.n	8005c5e <__swbuf_r+0x5a>
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	07db      	lsls	r3, r3, #31
 8005c58:	d506      	bpl.n	8005c68 <__swbuf_r+0x64>
 8005c5a:	2e0a      	cmp	r6, #10
 8005c5c:	d104      	bne.n	8005c68 <__swbuf_r+0x64>
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4628      	mov	r0, r5
 8005c62:	f7ff fde3 	bl	800582c <_fflush_r>
 8005c66:	b938      	cbnz	r0, 8005c78 <__swbuf_r+0x74>
 8005c68:	4638      	mov	r0, r7
 8005c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f806 	bl	8005c80 <__swsetup_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d0d5      	beq.n	8005c24 <__swbuf_r+0x20>
 8005c78:	f04f 37ff 	mov.w	r7, #4294967295
 8005c7c:	e7f4      	b.n	8005c68 <__swbuf_r+0x64>
	...

08005c80 <__swsetup_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <__swsetup_r+0xac>)
 8005c84:	4605      	mov	r5, r0
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	460c      	mov	r4, r1
 8005c8a:	b118      	cbz	r0, 8005c94 <__swsetup_r+0x14>
 8005c8c:	6a03      	ldr	r3, [r0, #32]
 8005c8e:	b90b      	cbnz	r3, 8005c94 <__swsetup_r+0x14>
 8005c90:	f7ff f82a 	bl	8004ce8 <__sinit>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c9a:	0718      	lsls	r0, r3, #28
 8005c9c:	d422      	bmi.n	8005ce4 <__swsetup_r+0x64>
 8005c9e:	06d9      	lsls	r1, r3, #27
 8005ca0:	d407      	bmi.n	8005cb2 <__swsetup_r+0x32>
 8005ca2:	2309      	movs	r3, #9
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e034      	b.n	8005d1c <__swsetup_r+0x9c>
 8005cb2:	0758      	lsls	r0, r3, #29
 8005cb4:	d512      	bpl.n	8005cdc <__swsetup_r+0x5c>
 8005cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb8:	b141      	cbz	r1, 8005ccc <__swsetup_r+0x4c>
 8005cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d002      	beq.n	8005cc8 <__swsetup_r+0x48>
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7ff f944 	bl	8004f50 <_free_r>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6363      	str	r3, [r4, #52]	; 0x34
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6063      	str	r3, [r4, #4]
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	f043 0308 	orr.w	r3, r3, #8
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	b94b      	cbnz	r3, 8005cfc <__swsetup_r+0x7c>
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf2:	d003      	beq.n	8005cfc <__swsetup_r+0x7c>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f88c 	bl	8005e14 <__smakebuf_r>
 8005cfc:	89a0      	ldrh	r0, [r4, #12]
 8005cfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d02:	f010 0301 	ands.w	r3, r0, #1
 8005d06:	d00a      	beq.n	8005d1e <__swsetup_r+0x9e>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60a3      	str	r3, [r4, #8]
 8005d0c:	6963      	ldr	r3, [r4, #20]
 8005d0e:	425b      	negs	r3, r3
 8005d10:	61a3      	str	r3, [r4, #24]
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	b943      	cbnz	r3, 8005d28 <__swsetup_r+0xa8>
 8005d16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d1a:	d1c4      	bne.n	8005ca6 <__swsetup_r+0x26>
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	0781      	lsls	r1, r0, #30
 8005d20:	bf58      	it	pl
 8005d22:	6963      	ldrpl	r3, [r4, #20]
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	e7f4      	b.n	8005d12 <__swsetup_r+0x92>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e7f7      	b.n	8005d1c <__swsetup_r+0x9c>
 8005d2c:	20000064 	.word	0x20000064

08005d30 <_raise_r>:
 8005d30:	291f      	cmp	r1, #31
 8005d32:	b538      	push	{r3, r4, r5, lr}
 8005d34:	4604      	mov	r4, r0
 8005d36:	460d      	mov	r5, r1
 8005d38:	d904      	bls.n	8005d44 <_raise_r+0x14>
 8005d3a:	2316      	movs	r3, #22
 8005d3c:	6003      	str	r3, [r0, #0]
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005d46:	b112      	cbz	r2, 8005d4e <_raise_r+0x1e>
 8005d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d4c:	b94b      	cbnz	r3, 8005d62 <_raise_r+0x32>
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 f830 	bl	8005db4 <_getpid_r>
 8005d54:	462a      	mov	r2, r5
 8005d56:	4601      	mov	r1, r0
 8005d58:	4620      	mov	r0, r4
 8005d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d5e:	f000 b817 	b.w	8005d90 <_kill_r>
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d00a      	beq.n	8005d7c <_raise_r+0x4c>
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	d103      	bne.n	8005d72 <_raise_r+0x42>
 8005d6a:	2316      	movs	r3, #22
 8005d6c:	6003      	str	r3, [r0, #0]
 8005d6e:	2001      	movs	r0, #1
 8005d70:	e7e7      	b.n	8005d42 <_raise_r+0x12>
 8005d72:	2400      	movs	r4, #0
 8005d74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d78:	4628      	mov	r0, r5
 8005d7a:	4798      	blx	r3
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7e0      	b.n	8005d42 <_raise_r+0x12>

08005d80 <raise>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <raise+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f7ff bfd3 	b.w	8005d30 <_raise_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000064 	.word	0x20000064

08005d90 <_kill_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d07      	ldr	r5, [pc, #28]	; (8005db0 <_kill_r+0x20>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f7fb f9b5 	bl	800110c <_kill>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_kill_r+0x1c>
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_kill_r+0x1c>
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	20000270 	.word	0x20000270

08005db4 <_getpid_r>:
 8005db4:	f7fb b9a2 	b.w	80010fc <_getpid>

08005db8 <_malloc_usable_size_r>:
 8005db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbc:	1f18      	subs	r0, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfbc      	itt	lt
 8005dc2:	580b      	ldrlt	r3, [r1, r0]
 8005dc4:	18c0      	addlt	r0, r0, r3
 8005dc6:	4770      	bx	lr

08005dc8 <__swhatbuf_r>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	b096      	sub	sp, #88	; 0x58
 8005dd4:	4615      	mov	r5, r2
 8005dd6:	461e      	mov	r6, r3
 8005dd8:	da0d      	bge.n	8005df6 <__swhatbuf_r+0x2e>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005de0:	f04f 0100 	mov.w	r1, #0
 8005de4:	bf0c      	ite	eq
 8005de6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005dea:	2340      	movne	r3, #64	; 0x40
 8005dec:	2000      	movs	r0, #0
 8005dee:	6031      	str	r1, [r6, #0]
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	b016      	add	sp, #88	; 0x58
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	466a      	mov	r2, sp
 8005df8:	f000 f848 	bl	8005e8c <_fstat_r>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	dbec      	blt.n	8005dda <__swhatbuf_r+0x12>
 8005e00:	9901      	ldr	r1, [sp, #4]
 8005e02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e0a:	4259      	negs	r1, r3
 8005e0c:	4159      	adcs	r1, r3
 8005e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e12:	e7eb      	b.n	8005dec <__swhatbuf_r+0x24>

08005e14 <__smakebuf_r>:
 8005e14:	898b      	ldrh	r3, [r1, #12]
 8005e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e18:	079d      	lsls	r5, r3, #30
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	d507      	bpl.n	8005e30 <__smakebuf_r+0x1c>
 8005e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	6123      	str	r3, [r4, #16]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	6163      	str	r3, [r4, #20]
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	ab01      	add	r3, sp, #4
 8005e32:	466a      	mov	r2, sp
 8005e34:	f7ff ffc8 	bl	8005dc8 <__swhatbuf_r>
 8005e38:	9900      	ldr	r1, [sp, #0]
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f7ff f8fb 	bl	8005038 <_malloc_r>
 8005e42:	b948      	cbnz	r0, 8005e58 <__smakebuf_r+0x44>
 8005e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e48:	059a      	lsls	r2, r3, #22
 8005e4a:	d4ef      	bmi.n	8005e2c <__smakebuf_r+0x18>
 8005e4c:	f023 0303 	bic.w	r3, r3, #3
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	e7e3      	b.n	8005e20 <__smakebuf_r+0xc>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	6020      	str	r0, [r4, #0]
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	6163      	str	r3, [r4, #20]
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	6120      	str	r0, [r4, #16]
 8005e6a:	b15b      	cbz	r3, 8005e84 <__smakebuf_r+0x70>
 8005e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 f81d 	bl	8005eb0 <_isatty_r>
 8005e76:	b128      	cbz	r0, 8005e84 <__smakebuf_r+0x70>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	431d      	orrs	r5, r3
 8005e88:	81a5      	strh	r5, [r4, #12]
 8005e8a:	e7cf      	b.n	8005e2c <__smakebuf_r+0x18>

08005e8c <_fstat_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d07      	ldr	r5, [pc, #28]	; (8005eac <_fstat_r+0x20>)
 8005e90:	2300      	movs	r3, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	f7fb f996 	bl	80011ca <_fstat>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d102      	bne.n	8005ea8 <_fstat_r+0x1c>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	b103      	cbz	r3, 8005ea8 <_fstat_r+0x1c>
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000270 	.word	0x20000270

08005eb0 <_isatty_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d06      	ldr	r5, [pc, #24]	; (8005ecc <_isatty_r+0x1c>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb f995 	bl	80011ea <_isatty>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_isatty_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_isatty_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	20000270 	.word	0x20000270

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
