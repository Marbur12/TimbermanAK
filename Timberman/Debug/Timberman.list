
Timberman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b20  08005b20  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005b20  08005b20  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b20  08005b20  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08005b90  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005b90  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d37c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231a  00000000  00000000  0002d457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c4  00000000  00000000  00030478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291ed  00000000  00000000  00030e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8a0  00000000  00000000  0005a029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe5fd  00000000  00000000  000688c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f7c  00000000  00000000  00166ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016ae44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005944 	.word	0x08005944

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005944 	.word	0x08005944

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <KPAD_init>:

int KPAD_lastkey;
ADC_HandleTypeDef *KPAD_hadc;

void KPAD_init(ADC_HandleTypeDef *hadc)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	KPAD_lastkey = KPAD_KEYNONE;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <KPAD_init+0x20>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
	KPAD_hadc = hadc;
 800027e:	4a05      	ldr	r2, [pc, #20]	; (8000294 <KPAD_init+0x24>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	20000084 	.word	0x20000084
 8000294:	20000088 	.word	0x20000088

08000298 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 80002a0:	e002      	b.n	80002a8 <Delay+0x10>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d1f9      	bne.n	80002a2 <Delay+0xa>
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <lcd_delay>:
void lcd_delay(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	Delay(200);
 80002c0:	20c8      	movs	r0, #200	; 0xc8
 80002c2:	f7ff ffe9 	bl	8000298 <Delay>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80002d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002de:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002e0:	4b5e      	ldr	r3, [pc, #376]	; (800045c <lcd_cmd+0x190>)
 80002e2:	2280      	movs	r2, #128	; 0x80
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80002e6:	4b5e      	ldr	r3, [pc, #376]	; (8000460 <lcd_cmd+0x194>)
 80002e8:	2220      	movs	r2, #32
 80002ea:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80002ec:	4b5c      	ldr	r3, [pc, #368]	; (8000460 <lcd_cmd+0x194>)
 80002ee:	2210      	movs	r2, #16
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80002f2:	4b5b      	ldr	r3, [pc, #364]	; (8000460 <lcd_cmd+0x194>)
 80002f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002f8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80002fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000302:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000304:	f7ff ffda 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000308:	4b54      	ldr	r3, [pc, #336]	; (800045c <lcd_cmd+0x190>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a53      	ldr	r2, [pc, #332]	; (800045c <lcd_cmd+0x190>)
 800030e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000312:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	f003 0310 	and.w	r3, r3, #16
 800031a:	2b00      	cmp	r3, #0
 800031c:	d003      	beq.n	8000326 <lcd_cmd+0x5a>
 800031e:	4b50      	ldr	r3, [pc, #320]	; (8000460 <lcd_cmd+0x194>)
 8000320:	2220      	movs	r2, #32
 8000322:	619a      	str	r2, [r3, #24]
 8000324:	e003      	b.n	800032e <lcd_cmd+0x62>
 8000326:	4b4e      	ldr	r3, [pc, #312]	; (8000460 <lcd_cmd+0x194>)
 8000328:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800032c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d003      	beq.n	8000340 <lcd_cmd+0x74>
 8000338:	4b49      	ldr	r3, [pc, #292]	; (8000460 <lcd_cmd+0x194>)
 800033a:	2210      	movs	r2, #16
 800033c:	619a      	str	r2, [r3, #24]
 800033e:	e003      	b.n	8000348 <lcd_cmd+0x7c>
 8000340:	4b47      	ldr	r3, [pc, #284]	; (8000460 <lcd_cmd+0x194>)
 8000342:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000346:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800034e:	2b00      	cmp	r3, #0
 8000350:	d004      	beq.n	800035c <lcd_cmd+0x90>
 8000352:	4b43      	ldr	r3, [pc, #268]	; (8000460 <lcd_cmd+0x194>)
 8000354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000358:	619a      	str	r2, [r3, #24]
 800035a:	e003      	b.n	8000364 <lcd_cmd+0x98>
 800035c:	4b40      	ldr	r3, [pc, #256]	; (8000460 <lcd_cmd+0x194>)
 800035e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000362:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000368:	2b00      	cmp	r3, #0
 800036a:	da05      	bge.n	8000378 <lcd_cmd+0xac>
 800036c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000374:	619a      	str	r2, [r3, #24]
 8000376:	e004      	b.n	8000382 <lcd_cmd+0xb6>
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000380:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000382:	f7ff ff9b 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000386:	4b35      	ldr	r3, [pc, #212]	; (800045c <lcd_cmd+0x190>)
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800038c:	4b34      	ldr	r3, [pc, #208]	; (8000460 <lcd_cmd+0x194>)
 800038e:	2220      	movs	r2, #32
 8000390:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000392:	4b33      	ldr	r3, [pc, #204]	; (8000460 <lcd_cmd+0x194>)
 8000394:	2210      	movs	r2, #16
 8000396:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000398:	4b31      	ldr	r3, [pc, #196]	; (8000460 <lcd_cmd+0x194>)
 800039a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80003aa:	f7ff ff87 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003ae:	4b2b      	ldr	r3, [pc, #172]	; (800045c <lcd_cmd+0x190>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a2a      	ldr	r2, [pc, #168]	; (800045c <lcd_cmd+0x190>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b8:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d003      	beq.n	80003cc <lcd_cmd+0x100>
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <lcd_cmd+0x194>)
 80003c6:	2220      	movs	r2, #32
 80003c8:	619a      	str	r2, [r3, #24]
 80003ca:	e003      	b.n	80003d4 <lcd_cmd+0x108>
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <lcd_cmd+0x194>)
 80003ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003d2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d003      	beq.n	80003e6 <lcd_cmd+0x11a>
 80003de:	4b20      	ldr	r3, [pc, #128]	; (8000460 <lcd_cmd+0x194>)
 80003e0:	2210      	movs	r2, #16
 80003e2:	619a      	str	r2, [r3, #24]
 80003e4:	e003      	b.n	80003ee <lcd_cmd+0x122>
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <lcd_cmd+0x194>)
 80003e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003ec:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <lcd_cmd+0x136>
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <lcd_cmd+0x194>)
 80003fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003fe:	619a      	str	r2, [r3, #24]
 8000400:	e003      	b.n	800040a <lcd_cmd+0x13e>
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <lcd_cmd+0x194>)
 8000404:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000408:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	2b00      	cmp	r3, #0
 8000412:	d005      	beq.n	8000420 <lcd_cmd+0x154>
 8000414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800041c:	619a      	str	r2, [r3, #24]
 800041e:	e004      	b.n	800042a <lcd_cmd+0x15e>
 8000420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000428:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800042a:	f7ff ff47 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <lcd_cmd+0x190>)
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <lcd_cmd+0x194>)
 8000436:	2220      	movs	r2, #32
 8000438:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <lcd_cmd+0x194>)
 800043c:	2210      	movs	r2, #16
 800043e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <lcd_cmd+0x194>)
 8000442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	48000800 	.word	0x48000800
 8000460:	48000400 	.word	0x48000400

08000464 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800046e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800047c:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800047e:	4b5e      	ldr	r3, [pc, #376]	; (80005f8 <lcd_char_cp+0x194>)
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000484:	4b5d      	ldr	r3, [pc, #372]	; (80005fc <lcd_char_cp+0x198>)
 8000486:	2220      	movs	r2, #32
 8000488:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800048a:	4b5c      	ldr	r3, [pc, #368]	; (80005fc <lcd_char_cp+0x198>)
 800048c:	2210      	movs	r2, #16
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000490:	4b5a      	ldr	r3, [pc, #360]	; (80005fc <lcd_char_cp+0x198>)
 8000492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000496:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80004a2:	f7ff ff0b 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80004a6:	4b54      	ldr	r3, [pc, #336]	; (80005f8 <lcd_char_cp+0x194>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a53      	ldr	r2, [pc, #332]	; (80005f8 <lcd_char_cp+0x194>)
 80004ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b0:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d003      	beq.n	80004c4 <lcd_char_cp+0x60>
 80004bc:	4b4f      	ldr	r3, [pc, #316]	; (80005fc <lcd_char_cp+0x198>)
 80004be:	2220      	movs	r2, #32
 80004c0:	619a      	str	r2, [r3, #24]
 80004c2:	e003      	b.n	80004cc <lcd_char_cp+0x68>
 80004c4:	4b4d      	ldr	r3, [pc, #308]	; (80005fc <lcd_char_cp+0x198>)
 80004c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004ca:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d003      	beq.n	80004de <lcd_char_cp+0x7a>
 80004d6:	4b49      	ldr	r3, [pc, #292]	; (80005fc <lcd_char_cp+0x198>)
 80004d8:	2210      	movs	r2, #16
 80004da:	619a      	str	r2, [r3, #24]
 80004dc:	e003      	b.n	80004e6 <lcd_char_cp+0x82>
 80004de:	4b47      	ldr	r3, [pc, #284]	; (80005fc <lcd_char_cp+0x198>)
 80004e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004e4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d004      	beq.n	80004fa <lcd_char_cp+0x96>
 80004f0:	4b42      	ldr	r3, [pc, #264]	; (80005fc <lcd_char_cp+0x198>)
 80004f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f6:	619a      	str	r2, [r3, #24]
 80004f8:	e003      	b.n	8000502 <lcd_char_cp+0x9e>
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <lcd_char_cp+0x198>)
 80004fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000500:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	2b00      	cmp	r3, #0
 8000508:	da05      	bge.n	8000516 <lcd_char_cp+0xb2>
 800050a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000512:	619a      	str	r2, [r3, #24]
 8000514:	e004      	b.n	8000520 <lcd_char_cp+0xbc>
 8000516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800051e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000520:	f7ff fecc 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000524:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <lcd_char_cp+0x194>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800052a:	4b34      	ldr	r3, [pc, #208]	; (80005fc <lcd_char_cp+0x198>)
 800052c:	2220      	movs	r2, #32
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000530:	4b32      	ldr	r3, [pc, #200]	; (80005fc <lcd_char_cp+0x198>)
 8000532:	2210      	movs	r2, #16
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <lcd_char_cp+0x198>)
 8000538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800053e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000546:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000548:	f7ff feb8 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <lcd_char_cp+0x194>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <lcd_char_cp+0x194>)
 8000552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000556:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <lcd_char_cp+0x106>
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <lcd_char_cp+0x198>)
 8000564:	2220      	movs	r2, #32
 8000566:	619a      	str	r2, [r3, #24]
 8000568:	e003      	b.n	8000572 <lcd_char_cp+0x10e>
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <lcd_char_cp+0x198>)
 800056c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000570:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	2b00      	cmp	r3, #0
 800057a:	d003      	beq.n	8000584 <lcd_char_cp+0x120>
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <lcd_char_cp+0x198>)
 800057e:	2210      	movs	r2, #16
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	e003      	b.n	800058c <lcd_char_cp+0x128>
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <lcd_char_cp+0x198>)
 8000586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800058a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	2b00      	cmp	r3, #0
 8000594:	d004      	beq.n	80005a0 <lcd_char_cp+0x13c>
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <lcd_char_cp+0x198>)
 8000598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	e003      	b.n	80005a8 <lcd_char_cp+0x144>
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <lcd_char_cp+0x198>)
 80005a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005a6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d005      	beq.n	80005be <lcd_char_cp+0x15a>
 80005b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ba:	619a      	str	r2, [r3, #24]
 80005bc:	e004      	b.n	80005c8 <lcd_char_cp+0x164>
 80005be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005c6:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80005c8:	f7ff fe78 	bl	80002bc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <lcd_char_cp+0x194>)
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <lcd_char_cp+0x198>)
 80005d4:	2220      	movs	r2, #32
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <lcd_char_cp+0x198>)
 80005da:	2210      	movs	r2, #16
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <lcd_char_cp+0x198>)
 80005e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	48000800 	.word	0x48000800
 80005fc:	48000400 	.word	0x48000400

08000600 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000608:	e008      	b.n	800061c <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff26 	bl	8000464 <lcd_char_cp>
        lcd_delay();
 8000618:	f7ff fe50 	bl	80002bc <lcd_delay>
	while(*out_char)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f2      	bne.n	800060a <lcd_out_cp+0xa>
	}

}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	460b      	mov	r3, r1
 800063a:	71bb      	strb	r3, [r7, #6]
 800063c:	4613      	mov	r3, r2
 800063e:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000640:	20fa      	movs	r0, #250	; 0xfa
 8000642:	f000 fe89 	bl	8001358 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff fe40 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 800064c:	2032      	movs	r0, #50	; 0x32
 800064e:	f000 fe83 	bl	8001358 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2da      	uxtb	r2, r3
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	4313      	orrs	r3, r2
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe30 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	; 0x32
 800066e:	f000 fe73 	bl	8001358 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff fe2a 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f000 fe6d 	bl	8001358 <HAL_Delay>
    lcd_cmd(0x0E);
 800067e:	200e      	movs	r0, #14
 8000680:	f7ff fe24 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 8000684:	2032      	movs	r0, #50	; 0x32
 8000686:	f000 fe67 	bl	8001358 <HAL_Delay>
    lcd_cmd(0x0C);
 800068a:	200c      	movs	r0, #12
 800068c:	f7ff fe1e 	bl	80002cc <lcd_cmd>
    HAL_Delay(50);
 8000690:	2032      	movs	r0, #50	; 0x32
 8000692:	f000 fe61 	bl	8001358 <HAL_Delay>
    lcd_cmd(0x01);
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff fe18 	bl	80002cc <lcd_cmd>
    HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fe5b 	bl	8001358 <HAL_Delay>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	460a      	mov	r2, r1
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	4613      	mov	r3, r2
 80006b8:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d106      	bne.n	80006ce <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	337f      	adds	r3, #127	; 0x7f
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fe00 	bl	80002cc <lcd_cmd>
 80006cc:	e008      	b.n	80006e0 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d105      	bne.n	80006e0 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	3b41      	subs	r3, #65	; 0x41
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fdf6 	bl	80002cc <lcd_cmd>
	}
    HAL_Delay(5);
 80006e0:	2005      	movs	r0, #5
 80006e2:	f000 fe39 	bl	8001358 <HAL_Delay>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	603a      	str	r2, [r7, #0]
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	460b      	mov	r3, r1
 80006fc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffd0 	bl	80006aa <lcd_gotoxy>
	lcd_out_cp(out_char);
 800070a:	6838      	ldr	r0, [r7, #0]
 800070c:	f7ff ff78 	bl	8000600 <lcd_out_cp>
    HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f000 fe21 	bl	8001358 <HAL_Delay>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lcd_clear>:
void lcd_clear(void) {
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff fdd2 	bl	80002cc <lcd_cmd>
    HAL_Delay(5);
 8000728:	2005      	movs	r0, #5
 800072a:	f000 fe15 	bl	8001358 <HAL_Delay>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <game>:
		}
	} while (value > 4000);
}
// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------- Game ----------------------------------------------------------
void game() {
 8000734:	b580      	push	{r7, lr}
 8000736:	b09a      	sub	sp, #104	; 0x68
 8000738:	af00      	add	r7, sp, #0
	lcd_clear();
 800073a:	f7ff fff0 	bl	800071e <lcd_clear>
	//srand(time(NULL));
	int randomNumber;
	int isAlive = true;
 800073e:	2301      	movs	r3, #1
 8000740:	65bb      	str	r3, [r7, #88]	; 0x58
	int display[2][6];
	char temp1[16];
	char temp2[16];

	/* ====== GENERATE TREE AT THE START ====== */
	for (int i = 0; i < 5; i++) {
 8000742:	2300      	movs	r3, #0
 8000744:	667b      	str	r3, [r7, #100]	; 0x64
 8000746:	e034      	b.n	80007b2 <game+0x7e>
		randomNumber = rand() % 100;
 8000748:	f003 ff3e 	bl	80045c8 <rand>
 800074c:	4603      	mov	r3, r0
 800074e:	4a4f      	ldr	r2, [pc, #316]	; (800088c <game+0x158>)
 8000750:	fb82 1203 	smull	r1, r2, r2, r3
 8000754:	1151      	asrs	r1, r2, #5
 8000756:	17da      	asrs	r2, r3, #31
 8000758:	1a8a      	subs	r2, r1, r2
 800075a:	2164      	movs	r1, #100	; 0x64
 800075c:	fb01 f202 	mul.w	r2, r1, r2
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	657b      	str	r3, [r7, #84]	; 0x54
		if (randomNumber % 2 == 0) {
 8000764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d10f      	bne.n	800078e <game+0x5a>
			display[0][i] = 4; // set right part of tree on height i to branch
 800076e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	3368      	adds	r3, #104	; 0x68
 8000774:	443b      	add	r3, r7
 8000776:	2204      	movs	r2, #4
 8000778:	f843 2c44 	str.w	r2, [r3, #-68]
			display[1][i] = 7; // set left part of tree on height i to log
 800077c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800077e:	3306      	adds	r3, #6
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3368      	adds	r3, #104	; 0x68
 8000784:	443b      	add	r3, r7
 8000786:	2207      	movs	r2, #7
 8000788:	f843 2c44 	str.w	r2, [r3, #-68]
 800078c:	e00e      	b.n	80007ac <game+0x78>
		} else {
			display[0][i] = 6; // set right part of tree on height i to log
 800078e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	3368      	adds	r3, #104	; 0x68
 8000794:	443b      	add	r3, r7
 8000796:	2206      	movs	r2, #6
 8000798:	f843 2c44 	str.w	r2, [r3, #-68]
			display[1][i] = 5; // set left part of tree on height i to branch
 800079c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800079e:	3306      	adds	r3, #6
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	3368      	adds	r3, #104	; 0x68
 80007a4:	443b      	add	r3, r7
 80007a6:	2205      	movs	r2, #5
 80007a8:	f843 2c44 	str.w	r2, [r3, #-68]
	for (int i = 0; i < 5; i++) {
 80007ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007ae:	3301      	adds	r3, #1
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
 80007b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	ddc7      	ble.n	8000748 <game+0x14>
		}
	}
	display[0][5] = 2; // set right part of tree at the bottom to right man
 80007b8:	2302      	movs	r3, #2
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
	display[1][5] = 7; // set left part of tree at the bottom to log
 80007bc:	2307      	movs	r3, #7
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
	/*sprintf(temp1, "%d%d%d%d%d%d", display[0][0], display[0][1],
	 display[0][2], display[0][3], display[0][4], display[0][5]);
	 sprintf(temp2, "%d%d%d%d%d%d", display[1][0], display[1][1],
	 display[1][2], display[1][3], display[1][4], display[1][5]);*/
	/* ====== MAIN GAME LOOP ====== */
	while (isAlive) {
 80007c0:	e05c      	b.n	800087c <game+0x148>

		// pressing the button to chop the tree

		randomNumber = rand() % 100;
 80007c2:	f003 ff01 	bl	80045c8 <rand>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a30      	ldr	r2, [pc, #192]	; (800088c <game+0x158>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	1151      	asrs	r1, r2, #5
 80007d0:	17da      	asrs	r2, r3, #31
 80007d2:	1a8a      	subs	r2, r1, r2
 80007d4:	2164      	movs	r1, #100	; 0x64
 80007d6:	fb01 f202 	mul.w	r2, r1, r2
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	657b      	str	r3, [r7, #84]	; 0x54
		 display[0][0] = 6; // set right part of tree on height i to log
		 display[1][0] = 5; // set left part of tree on height i to branch
		 }

		 /* ====== DISPLAYING EVERYTHING ====== */
		lcd_clear();
 80007de:	f7ff ff9e 	bl	800071e <lcd_clear>
		sprintf(scoreText, "%d", highScore);
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <game+0x15c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	492a      	ldr	r1, [pc, #168]	; (8000894 <game+0x160>)
 80007ea:	482b      	ldr	r0, [pc, #172]	; (8000898 <game+0x164>)
 80007ec:	f003 ffec 	bl	80047c8 <siprintf>
		lcd_print(1, 1, "SCORE:");
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <game+0x168>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff ff7a 	bl	80006ee <lcd_print>
		lcd_print(2, 1, scoreText);
 80007fa:	4a27      	ldr	r2, [pc, #156]	; (8000898 <game+0x164>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	2002      	movs	r0, #2
 8000800:	f7ff ff75 	bl	80006ee <lcd_print>
		lcd_print(1, 16, "|");
 8000804:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <game+0x16c>)
 8000806:	2110      	movs	r1, #16
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff70 	bl	80006ee <lcd_print>
		lcd_print(2, 16, "|");
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <game+0x16c>)
 8000810:	2110      	movs	r1, #16
 8000812:	2002      	movs	r0, #2
 8000814:	f7ff ff6b 	bl	80006ee <lcd_print>
		for (int i = 0; i < 2; i++) {
 8000818:	2300      	movs	r3, #0
 800081a:	663b      	str	r3, [r7, #96]	; 0x60
 800081c:	e027      	b.n	800086e <game+0x13a>
			for (int j = 0; j < 6; j++) {
 800081e:	2300      	movs	r3, #0
 8000820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000822:	e01e      	b.n	8000862 <game+0x12e>
				lcd_gotoxy(i + 1, j + 9);
 8000824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000826:	b2db      	uxtb	r3, r3
 8000828:	3301      	adds	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800082e:	b2db      	uxtb	r3, r3
 8000830:	3309      	adds	r3, #9
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4619      	mov	r1, r3
 8000836:	4610      	mov	r0, r2
 8000838:	f7ff ff37 	bl	80006aa <lcd_gotoxy>
				lcd_char_cp(display[i][j]);
 800083c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	3368      	adds	r3, #104	; 0x68
 800084e:	443b      	add	r3, r7
 8000850:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe04 	bl	8000464 <lcd_char_cp>
			for (int j = 0; j < 6; j++) {
 800085c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800085e:	3301      	adds	r3, #1
 8000860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000864:	2b05      	cmp	r3, #5
 8000866:	dddd      	ble.n	8000824 <game+0xf0>
		for (int i = 0; i < 2; i++) {
 8000868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800086a:	3301      	adds	r3, #1
 800086c:	663b      	str	r3, [r7, #96]	; 0x60
 800086e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000870:	2b01      	cmp	r3, #1
 8000872:	ddd4      	ble.n	800081e <game+0xea>
			}
		}
		/*lcd_print(1, 1, temp1);
		 lcd_print(2, 1, temp2);*/

		HAL_Delay(300);
 8000874:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000878:	f000 fd6e 	bl	8001358 <HAL_Delay>
	while (isAlive) {
 800087c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800087e:	2b00      	cmp	r3, #0
 8000880:	d19f      	bne.n	80007c2 <game+0x8e>

	}
	//gameOver();
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	3768      	adds	r7, #104	; 0x68
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	51eb851f 	.word	0x51eb851f
 8000890:	20000114 	.word	0x20000114
 8000894:	08005984 	.word	0x08005984
 8000898:	20000118 	.word	0x20000118
 800089c:	08005988 	.word	0x08005988
 80008a0:	08005990 	.word	0x08005990

080008a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b098      	sub	sp, #96	; 0x60
 80008a8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// ----------------------------------------------------- Custom characters variables ----------------------------------------------------
	char rightManHit[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x04, 0x1F, 0x1F };
 80008aa:	4a77      	ldr	r2, [pc, #476]	; (8000a88 <main+0x1e4>)
 80008ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftManHit[] = { 0x1F, 0x1F, 0x04, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 80008b8:	4a74      	ldr	r2, [pc, #464]	; (8000a8c <main+0x1e8>)
 80008ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c2:	e883 0003 	stmia.w	r3, {r0, r1}

	char rightMan[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x00, 0x1F, 0x1F };
 80008c6:	4a72      	ldr	r2, [pc, #456]	; (8000a90 <main+0x1ec>)
 80008c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d0:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftMan[] = { 0x1F, 0x1F, 0x00, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 80008d4:	4a6f      	ldr	r2, [pc, #444]	; (8000a94 <main+0x1f0>)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008de:	e883 0003 	stmia.w	r3, {r0, r1}

	char branchRight[] = { 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x1F, 0x1F };
 80008e2:	4a6d      	ldr	r2, [pc, #436]	; (8000a98 <main+0x1f4>)
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ec:	e883 0003 	stmia.w	r3, {r0, r1}
	char branchLeft[] = { 0x1F, 0x1F, 0x03, 0x02, 0x02, 0x02, 0x02, 0x00 };
 80008f0:	4a6a      	ldr	r2, [pc, #424]	; (8000a9c <main+0x1f8>)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008fa:	e883 0003 	stmia.w	r3, {r0, r1}

	char logRight[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F };
 80008fe:	4a68      	ldr	r2, [pc, #416]	; (8000aa0 <main+0x1fc>)
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000908:	e883 0003 	stmia.w	r3, {r0, r1}
	char logLeft[] = { 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800090c:	4a65      	ldr	r2, [pc, #404]	; (8000aa4 <main+0x200>)
 800090e:	463b      	mov	r3, r7
 8000910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000914:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000918:	f000 fca9 	bl	800126e <HAL_Init>

	/* USER CODE BEGIN Init */

	// ---------------------------------------------------- Initialization of LCD screen -----------------------------------------------------
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 800091c:	2208      	movs	r2, #8
 800091e:	2100      	movs	r1, #0
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fe84 	bl	800062e <lcd_init>
	// ---------------------------------------------------------------------------------------------------------------------------------------

	KPAD_init(&hadc1);
 8000926:	4860      	ldr	r0, [pc, #384]	; (8000aa8 <main+0x204>)
 8000928:	f7ff fca2 	bl	8000270 <KPAD_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800092c:	f000 f8be 	bl	8000aac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000930:	f000 fa18 	bl	8000d64 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000934:	f000 f90e 	bl	8000b54 <MX_ADC1_Init>
	MX_RTC_Init();
 8000938:	f000 f982 	bl	8000c40 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	// ------------------------------------------------ Assigning custom characters to memory ------------------------------------------------
	lcd_cmd(0x40);
 800093c:	2040      	movs	r0, #64	; 0x40
 800093e:	f7ff fcc5 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000942:	2300      	movs	r3, #0
 8000944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000946:	e00a      	b.n	800095e <main+0xba>
		lcd_char_cp(rightManHit[i]);
 8000948:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800094c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fd86 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095a:	3301      	adds	r3, #1
 800095c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800095e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000960:	2b07      	cmp	r3, #7
 8000962:	ddf1      	ble.n	8000948 <main+0xa4>
	lcd_cmd(0x40 + 8);
 8000964:	2048      	movs	r0, #72	; 0x48
 8000966:	f7ff fcb1 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800096a:	2300      	movs	r3, #0
 800096c:	65bb      	str	r3, [r7, #88]	; 0x58
 800096e:	e00a      	b.n	8000986 <main+0xe2>
		lcd_char_cp(leftManHit[i]);
 8000970:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fd72 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000982:	3301      	adds	r3, #1
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
 8000986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000988:	2b07      	cmp	r3, #7
 800098a:	ddf1      	ble.n	8000970 <main+0xcc>
	lcd_cmd(0x40 + 16);
 800098c:	2050      	movs	r0, #80	; 0x50
 800098e:	f7ff fc9d 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	657b      	str	r3, [r7, #84]	; 0x54
 8000996:	e00a      	b.n	80009ae <main+0x10a>
		lcd_char_cp(rightMan[i]);
 8000998:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800099c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800099e:	4413      	add	r3, r2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fd5e 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80009a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009aa:	3301      	adds	r3, #1
 80009ac:	657b      	str	r3, [r7, #84]	; 0x54
 80009ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009b0:	2b07      	cmp	r3, #7
 80009b2:	ddf1      	ble.n	8000998 <main+0xf4>
	lcd_cmd(0x40 + 24);
 80009b4:	2058      	movs	r0, #88	; 0x58
 80009b6:	f7ff fc89 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	653b      	str	r3, [r7, #80]	; 0x50
 80009be:	e00a      	b.n	80009d6 <main+0x132>
		lcd_char_cp(leftMan[i]);
 80009c0:	f107 0220 	add.w	r2, r7, #32
 80009c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fd4a 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80009d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d2:	3301      	adds	r3, #1
 80009d4:	653b      	str	r3, [r7, #80]	; 0x50
 80009d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d8:	2b07      	cmp	r3, #7
 80009da:	ddf1      	ble.n	80009c0 <main+0x11c>
	lcd_cmd(0x40 + 32);
 80009dc:	2060      	movs	r0, #96	; 0x60
 80009de:	f7ff fc75 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009e6:	e00a      	b.n	80009fe <main+0x15a>
		lcd_char_cp(branchRight[i]);
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd36 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80009f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009fa:	3301      	adds	r3, #1
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a00:	2b07      	cmp	r3, #7
 8000a02:	ddf1      	ble.n	80009e8 <main+0x144>
	lcd_cmd(0x40 + 40);
 8000a04:	2068      	movs	r0, #104	; 0x68
 8000a06:	f7ff fc61 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a0e:	e00a      	b.n	8000a26 <main+0x182>
		lcd_char_cp(branchLeft[i]);
 8000a10:	f107 0210 	add.w	r2, r7, #16
 8000a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fd22 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a22:	3301      	adds	r3, #1
 8000a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	ddf1      	ble.n	8000a10 <main+0x16c>
	lcd_cmd(0x40 + 48);
 8000a2c:	2070      	movs	r0, #112	; 0x70
 8000a2e:	f7ff fc4d 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	647b      	str	r3, [r7, #68]	; 0x44
 8000a36:	e00a      	b.n	8000a4e <main+0x1aa>
		lcd_char_cp(logRight[i]);
 8000a38:	f107 0208 	add.w	r2, r7, #8
 8000a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fd0e 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8000a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	ddf1      	ble.n	8000a38 <main+0x194>
	lcd_cmd(0x40 + 56);
 8000a54:	2078      	movs	r0, #120	; 0x78
 8000a56:	f7ff fc39 	bl	80002cc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8000a5e:	e009      	b.n	8000a74 <main+0x1d0>
		lcd_char_cp(logLeft[i]);
 8000a60:	463a      	mov	r2, r7
 8000a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fcfb 	bl	8000464 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a70:	3301      	adds	r3, #1
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
 8000a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	ddf2      	ble.n	8000a60 <main+0x1bc>

	lcd_cmd(0x80);
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	f7ff fc26 	bl	80002cc <lcd_cmd>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//menu();
		game();
 8000a80:	f7ff fe58 	bl	8000734 <game>
 8000a84:	e7fc      	b.n	8000a80 <main+0x1dc>
 8000a86:	bf00      	nop
 8000a88:	080059c0 	.word	0x080059c0
 8000a8c:	080059c8 	.word	0x080059c8
 8000a90:	080059d0 	.word	0x080059d0
 8000a94:	080059d8 	.word	0x080059d8
 8000a98:	080059e0 	.word	0x080059e0
 8000a9c:	080059e8 	.word	0x080059e8
 8000aa0:	080059f0 	.word	0x080059f0
 8000aa4:	080059f8 	.word	0x080059f8
 8000aa8:	2000008c 	.word	0x2000008c

08000aac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fee7 	bl	800488e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad2:	f001 ff0f 	bl	80028f4 <HAL_PWREx_ControlVoltageScaling>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000adc:	f000 f9d0 	bl	8000e80 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000ae0:	2318      	movs	r3, #24
 8000ae2:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000af8:	2301      	movs	r3, #1
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000b00:	2310      	movs	r3, #16
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 ff43 	bl	80029a0 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x78>
		Error_Handler();
 8000b20:	f000 f9ae 	bl	8000e80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000b2c:	23a0      	movs	r3, #160	; 0xa0
 8000b2e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fb0b 	bl	8003158 <HAL_RCC_ClockConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0xa0>
		Error_Handler();
 8000b48:	f000 f99a 	bl	8000e80 <Error_Handler>
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3758      	adds	r7, #88	; 0x58
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000b78:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <MX_ADC1_Init+0xe4>)
 8000b7a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b88:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bd8:	f000 fd6e 	bl	80016b8 <HAL_ADC_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0x92>
		Error_Handler();
 8000be2:	f000 f94d 	bl	8000e80 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4810      	ldr	r0, [pc, #64]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000bf2:	f001 fac9 	bl	8002188 <HAL_ADCEx_MultiModeConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000bfc:	f000 f940 	bl	8000e80 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_ADC1_Init+0xe8>)
 8000c02:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c04:	2306      	movs	r3, #6
 8000c06:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c0c:	237f      	movs	r3, #127	; 0x7f
 8000c0e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c10:	2304      	movs	r3, #4
 8000c12:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_ADC1_Init+0xe0>)
 8000c1e:	f000 fe9b 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000c28:	f000 f92a 	bl	8000e80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	50040000 	.word	0x50040000
 8000c3c:	14f00020 	.word	0x14f00020

08000c40 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b092      	sub	sp, #72	; 0x48
 8000c44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000c46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	222c      	movs	r2, #44	; 0x2c
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 fe14 	bl	800488e <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000c66:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c68:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <MX_RTC_Init+0x11c>)
 8000c6a:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c6c:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000c72:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c74:	227f      	movs	r2, #127	; 0x7f
 8000c76:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000c78:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c7a:	22ff      	movs	r2, #255	; 0xff
 8000c7c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000c96:	4830      	ldr	r0, [pc, #192]	; (8000d58 <MX_RTC_Init+0x118>)
 8000c98:	f003 f906 	bl	8003ea8 <HAL_RTC_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_RTC_Init+0x66>
		Error_Handler();
 8000ca2:	f000 f8ed 	bl	8000e80 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4823      	ldr	r0, [pc, #140]	; (8000d58 <MX_RTC_Init+0x118>)
 8000cca:	f003 f975 	bl	8003fb8 <HAL_RTC_SetTime>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_RTC_Init+0x98>
		Error_Handler();
 8000cd4:	f000 f8d4 	bl	8000e80 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000cf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4817      	ldr	r0, [pc, #92]	; (8000d58 <MX_RTC_Init+0x118>)
 8000cfa:	f003 f9fa 	bl	80040f2 <HAL_RTC_SetDate>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_RTC_Init+0xc8>
		Error_Handler();
 8000d04:	f000 f8bc 	bl	8000e80 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_RTC_Init+0x120>)
 8000d22:	61bb      	str	r3, [r7, #24]
			| RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_RTC_Init+0x118>)
 8000d40:	f003 fa5e 	bl	8004200 <HAL_RTC_SetAlarm>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_RTC_Init+0x10e>
		Error_Handler();
 8000d4a:	f000 f899 	bl	8000e80 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3748      	adds	r7, #72	; 0x48
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000f0 	.word	0x200000f0
 8000d5c:	40002800 	.word	0x40002800
 8000d60:	80808000 	.word	0x80808000

08000d64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a3d      	ldr	r2, [pc, #244]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a37      	ldr	r2, [pc, #220]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a31      	ldr	r2, [pc, #196]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <MX_GPIO_Init+0x110>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin,
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000dc8:	482b      	ldr	r0, [pc, #172]	; (8000e78 <MX_GPIO_Init+0x114>)
 8000dca:	f001 fd49 	bl	8002860 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	482a      	ldr	r0, [pc, #168]	; (8000e7c <MX_GPIO_Init+0x118>)
 8000dd4:	f001 fd44 	bl	8002860 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin | LCD_RS_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f001 fd3d 	bl	8002860 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <MX_GPIO_Init+0x118>)
 8000dfe:	f001 fb85 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin;
 8000e02:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000e06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4817      	ldr	r0, [pc, #92]	; (8000e78 <MX_GPIO_Init+0x114>)
 8000e1c:	f001 fb76 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_EN_Pin */
	GPIO_InitStruct.Pin = LCD_EN_Pin;
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_GPIO_Init+0x118>)
 8000e38:	f001 fb68 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = LCD_D7_Pin | LCD_RS_Pin;
 8000e3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f001 fb58 	bl	800250c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f001 fb1c 	bl	800249e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f001 fb35 	bl	80024d6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	48000800 	.word	0x48000800

08000e80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0ac      	sub	sp, #176	; 0xb0
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2288      	movs	r2, #136	; 0x88
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 fcca 	bl	800488e <memset>
  if(hadc->Instance==ADC1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_ADC_MspInit+0xc8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d147      	bne.n	8000f94 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f08:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fafb 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f40:	f7ff ff9e 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_ADC_MspInit+0xcc>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_ADC_MspInit+0xcc>)
 8000f4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_ADC_MspInit+0xcc>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_ADC_MspInit+0xcc>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_ADC_MspInit+0xcc>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_ADC_MspInit+0xcc>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LCD_Pin;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f7a:	230b      	movs	r3, #11
 8000f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f001 fabc 	bl	800250c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	37b0      	adds	r7, #176	; 0xb0
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a4      	sub	sp, #144	; 0x90
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2288      	movs	r2, #136	; 0x88
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fc6a 	bl	800488e <memset>
  if(hrtc->Instance==RTC)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_RTC_MspInit+0x5c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d118      	bne.n	8000ff6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 faaa 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fe2:	f7ff ff4d 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_RTC_MspInit+0x60>)
 8000fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <HAL_RTC_MspInit+0x60>)
 8000fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3790      	adds	r7, #144	; 0x90
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40002800 	.word	0x40002800
 8001004:	40021000 	.word	0x40021000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f960 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001060:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001064:	f001 fc14 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return 1;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_kill>:

int _kill(int pid, int sig)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001086:	f003 fc51 	bl	800492c <__errno>
 800108a:	4603      	mov	r3, r0
 800108c:	2216      	movs	r2, #22
 800108e:	601a      	str	r2, [r3, #0]
  return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_exit>:

void _exit (int status)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffe7 	bl	800107c <_kill>
  while (1) {}    /* Make sure we hang here */
 80010ae:	e7fe      	b.n	80010ae <_exit+0x12>

080010b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e00a      	b.n	80010d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c2:	f3af 8000 	nop.w
 80010c6:	4601      	mov	r1, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	b2ca      	uxtb	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf0      	blt.n	80010c2 <_read+0x12>
  }

  return len;
 80010e0:	687b      	ldr	r3, [r7, #4]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e009      	b.n	8001110 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60ba      	str	r2, [r7, #8]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf1      	blt.n	80010fc <_write+0x12>
  }
  return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_close>:

int _close(int file)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114a:	605a      	str	r2, [r3, #4]
  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_isatty>:

int _isatty(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f003 fbb6 	bl	800492c <__errno>
 80011c0:	4603      	mov	r3, r0
 80011c2:	220c      	movs	r2, #12
 80011c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <_sbrk+0x64>)
 80011dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20018000 	.word	0x20018000
 80011ec:	00000400 	.word	0x00000400
 80011f0:	20000128 	.word	0x20000128
 80011f4:	20000280 	.word	0x20000280

080011f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001220:	f7ff ffea 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <LoopForever+0x6>)
  ldr r1, =_edata
 8001226:	490d      	ldr	r1, [pc, #52]	; (800125c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <LoopForever+0xe>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800123c:	4c0a      	ldr	r4, [pc, #40]	; (8001268 <LoopForever+0x16>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f003 fb75 	bl	8004938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124e:	f7ff fb29 	bl	80008a4 <main>

08001252 <LoopForever>:

LoopForever:
    b LoopForever
 8001252:	e7fe      	b.n	8001252 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001254:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001260:	08005b28 	.word	0x08005b28
  ldr r2, =_sbss
 8001264:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001268:	2000027c 	.word	0x2000027c

0800126c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_2_IRQHandler>

0800126e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f001 f905 	bl	8002488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f80e 	bl	80012a0 <HAL_InitTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	e001      	b.n	8001294 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001290:	f7ff fdfc 	bl	8000e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001294:	79fb      	ldrb	r3, [r7, #7]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_InitTick+0x6c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d023      	beq.n	80012fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_InitTick+0x70>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_InitTick+0x6c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f911 	bl	80024f2 <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10f      	bne.n	80012f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d809      	bhi.n	80012f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f001 f8db 	bl	800249e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_InitTick+0x74>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e007      	b.n	8001300 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e004      	b.n	8001300 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e001      	b.n	8001300 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	2000012c 	.word	0x2000012c

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000012c 	.word	0x2000012c

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008

080013a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	609a      	str	r2, [r3, #8]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3360      	adds	r3, #96	; 0x60
 800141a:	461a      	mov	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <LL_ADC_SetOffset+0x44>)
 800142a:	4013      	ands	r3, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	4313      	orrs	r3, r2
 8001438:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	03fff000 	.word	0x03fff000

08001450 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3360      	adds	r3, #96	; 0x60
 800145e:	461a      	mov	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3360      	adds	r3, #96	; 0x60
 800148c:	461a      	mov	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b087      	sub	sp, #28
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3330      	adds	r3, #48	; 0x30
 80014c2:	461a      	mov	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	4413      	add	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	211f      	movs	r1, #31
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0e9b      	lsrs	r3, r3, #26
 80014ea:	f003 011f 	and.w	r1, r3, #31
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800150a:	b480      	push	{r7}
 800150c:	b087      	sub	sp, #28
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3314      	adds	r3, #20
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	0e5b      	lsrs	r3, r3, #25
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0d1b      	lsrs	r3, r3, #20
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2107      	movs	r1, #7
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	0d1b      	lsrs	r3, r3, #20
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0318 	and.w	r3, r3, #24
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001584:	40d9      	lsrs	r1, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	400b      	ands	r3, r1
 800158a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	0007ffff 	.word	0x0007ffff

080015a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6093      	str	r3, [r2, #8]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001608:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001630:	d101      	bne.n	8001636 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <LL_ADC_IsEnabled+0x18>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <LL_ADC_IsEnabled+0x1a>
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b04      	cmp	r3, #4
 800167c:	d101      	bne.n	8001682 <LL_ADC_REG_IsConversionOngoing+0x18>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d101      	bne.n	80016a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e130      	b.n	8001934 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fbf7 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff67 	bl	80015cc <LL_ADC_IsDeepPowerDownEnabled>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff4d 	bl	80015a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff82 	bl	800161c <LL_ADC_IsInternalRegulatorEnabled>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d115      	bne.n	800174a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff66 	bl	80015f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001728:	4b84      	ldr	r3, [pc, #528]	; (800193c <HAL_ADC_Init+0x284>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	099b      	lsrs	r3, r3, #6
 800172e:	4a84      	ldr	r2, [pc, #528]	; (8001940 <HAL_ADC_Init+0x288>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	3301      	adds	r3, #1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800173c:	e002      	b.n	8001744 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3b01      	subs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f9      	bne.n	800173e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff64 	bl	800161c <LL_ADC_IsInternalRegulatorEnabled>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10d      	bne.n	8001776 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f043 0210 	orr.w	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff75 	bl	800166a <LL_ADC_REG_IsConversionOngoing>
 8001780:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 80c9 	bne.w	8001922 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 80c5 	bne.w	8001922 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017a0:	f043 0202 	orr.w	r2, r3, #2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff49 	bl	8001644 <LL_ADC_IsEnabled>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d115      	bne.n	80017e4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017b8:	4862      	ldr	r0, [pc, #392]	; (8001944 <HAL_ADC_Init+0x28c>)
 80017ba:	f7ff ff43 	bl	8001644 <LL_ADC_IsEnabled>
 80017be:	4604      	mov	r4, r0
 80017c0:	4861      	ldr	r0, [pc, #388]	; (8001948 <HAL_ADC_Init+0x290>)
 80017c2:	f7ff ff3f 	bl	8001644 <LL_ADC_IsEnabled>
 80017c6:	4603      	mov	r3, r0
 80017c8:	431c      	orrs	r4, r3
 80017ca:	4860      	ldr	r0, [pc, #384]	; (800194c <HAL_ADC_Init+0x294>)
 80017cc:	f7ff ff3a 	bl	8001644 <LL_ADC_IsEnabled>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4323      	orrs	r3, r4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4619      	mov	r1, r3
 80017de:	485c      	ldr	r0, [pc, #368]	; (8001950 <HAL_ADC_Init+0x298>)
 80017e0:	f7ff fdde 	bl	80013a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7e5b      	ldrb	r3, [r3, #25]
 80017e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001802:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d106      	bne.n	8001820 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	3b01      	subs	r3, #1
 8001818:	045b      	lsls	r3, r3, #17
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_ADC_Init+0x29c>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	430b      	orrs	r3, r1
 800184e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff1b 	bl	8001690 <LL_ADC_INJ_IsConversionOngoing>
 800185a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d13d      	bne.n	80018de <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d13a      	bne.n	80018de <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800186c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001874:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001884:	f023 0302 	bic.w	r3, r3, #2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	69b9      	ldr	r1, [r7, #24]
 800188e:	430b      	orrs	r3, r1
 8001890:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001898:	2b01      	cmp	r3, #1
 800189a:	d118      	bne.n	80018ce <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018a6:	f023 0304 	bic.w	r3, r3, #4
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018be:	430a      	orrs	r2, r1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	e007      	b.n	80018de <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10c      	bne.n	8001900 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f023 010f 	bic.w	r1, r3, #15
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	1e5a      	subs	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
 80018fe:	e007      	b.n	8001910 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020f 	bic.w	r2, r2, #15
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	f023 0303 	bic.w	r3, r3, #3
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
 8001920:	e007      	b.n	8001932 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f043 0210 	orr.w	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001932:	7ffb      	ldrb	r3, [r7, #31]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3724      	adds	r7, #36	; 0x24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	053e2d63 	.word	0x053e2d63
 8001944:	50040000 	.word	0x50040000
 8001948:	50040100 	.word	0x50040100
 800194c:	50040200 	.word	0x50040200
 8001950:	50040300 	.word	0x50040300
 8001954:	fff0c007 	.word	0xfff0c007

08001958 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0b6      	sub	sp, #216	; 0xd8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x22>
 8001976:	2302      	movs	r3, #2
 8001978:	e3c9      	b.n	800210e <HAL_ADC_ConfigChannel+0x7b6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fe6f 	bl	800166a <LL_ADC_REG_IsConversionOngoing>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 83aa 	bne.w	80020e8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d824      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	3b02      	subs	r3, #2
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d81b      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x8e>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_ADC_ConfigChannel+0x5c>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019dd 	.word	0x080019dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80019c4:	230c      	movs	r3, #12
 80019c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019ca:	e010      	b.n	80019ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80019cc:	2312      	movs	r3, #18
 80019ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019d2:	e00c      	b.n	80019ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80019d4:	2318      	movs	r3, #24
 80019d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019da:	e008      	b.n	80019ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80019dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019e4:	e003      	b.n	80019ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80019e6:	2306      	movs	r3, #6
 80019e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80019fc:	f7ff fd59 	bl	80014b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fe30 	bl	800166a <LL_ADC_REG_IsConversionOngoing>
 8001a0a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fe3c 	bl	8001690 <LL_ADC_INJ_IsConversionOngoing>
 8001a18:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f040 81a4 	bne.w	8001d6e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 819f 	bne.w	8001d6e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f7ff fd64 	bl	800150a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d00a      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6919      	ldr	r1, [r3, #16]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a74:	f7ff fcc8 	bl	8001408 <LL_ADC_SetOffset>
 8001a78:	e179      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fce5 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x14e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fcda 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	0e9b      	lsrs	r3, r3, #26
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	e01e      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x18c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fccf 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ac4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001acc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	e004      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001ad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1a4>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	e018      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1d6>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e004      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fc9e 	bl	800147c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fc82 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x214>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc77 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	e01e      	b.n	8001baa <HAL_ADC_ConfigChannel+0x252>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fc6c 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e004      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x26a>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	e018      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x29c>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e004      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d106      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc3b 	bl	800147c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fc1f 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10a      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x2da>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2102      	movs	r1, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc14 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	0e9b      	lsrs	r3, r3, #26
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	e01e      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x318>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2102      	movs	r1, #2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fc09 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e004      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x330>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	e014      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x35a>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e004      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fbdc 	bl	800147c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2103      	movs	r1, #3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fbc0 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x398>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2103      	movs	r1, #3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fbb5 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	0e9b      	lsrs	r3, r3, #26
 8001cea:	f003 021f 	and.w	r2, r3, #31
 8001cee:	e017      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x3c8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fbaa 	bl	8001450 <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001d12:	2320      	movs	r3, #32
 8001d14:	e003      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x3e0>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	e011      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x404>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e003      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2103      	movs	r1, #3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fb87 	bl	800147c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fc66 	bl	8001644 <LL_ADC_IsEnabled>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8140 	bne.w	8002000 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f7ff fbe7 	bl	8001560 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a8f      	ldr	r2, [pc, #572]	; (8001fd4 <HAL_ADC_ConfigChannel+0x67c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	f040 8131 	bne.w	8002000 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10b      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x46e>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2b09      	cmp	r3, #9
 8001dbc:	bf94      	ite	ls
 8001dbe:	2301      	movls	r3, #1
 8001dc0:	2300      	movhi	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	e019      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x4a2>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e003      	b.n	8001dea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	bf94      	ite	ls
 8001df4:	2301      	movls	r3, #1
 8001df6:	2300      	movhi	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d079      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x4c2>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	3301      	adds	r3, #1
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e18:	e015      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x4ee>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e003      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	069b      	lsls	r3, r3, #26
 8001e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x50e>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	e017      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x53e>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e003      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	ea42 0103 	orr.w	r1, r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x564>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	051b      	lsls	r3, r3, #20
 8001eba:	e018      	b.n	8001eee <HAL_ADC_ConfigChannel+0x596>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e003      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	e081      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x5b6>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	3301      	adds	r3, #1
 8001f06:	069b      	lsls	r3, r3, #26
 8001f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0c:	e015      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x5e2>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e003      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	069b      	lsls	r3, r3, #26
 8001f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x602>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	e017      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x632>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	61bb      	str	r3, [r7, #24]
  return result;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001f72:	2320      	movs	r3, #32
 8001f74:	e003      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	ea42 0103 	orr.w	r1, r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x65e>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f003 021f 	and.w	r2, r3, #31
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	3b1e      	subs	r3, #30
 8001fae:	051b      	lsls	r3, r3, #20
 8001fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	e01e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x69c>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	60fb      	str	r3, [r7, #12]
  return result;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e006      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x688>
 8001fd2:	bf00      	nop
 8001fd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f003 021f 	and.w	r2, r3, #31
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	3b1e      	subs	r3, #30
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7ff fa85 	bl	800150a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b44      	ldr	r3, [pc, #272]	; (8002118 <HAL_ADC_ConfigChannel+0x7c0>)
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d07a      	beq.n	8002102 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200c:	4843      	ldr	r0, [pc, #268]	; (800211c <HAL_ADC_ConfigChannel+0x7c4>)
 800200e:	f7ff f9ed 	bl	80013ec <LL_ADC_GetCommonPathInternalCh>
 8002012:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a41      	ldr	r2, [pc, #260]	; (8002120 <HAL_ADC_ConfigChannel+0x7c8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d12c      	bne.n	800207a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d126      	bne.n	800207a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <HAL_ADC_ConfigChannel+0x7cc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x6e8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <HAL_ADC_ConfigChannel+0x7d0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d15d      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002048:	4619      	mov	r1, r3
 800204a:	4834      	ldr	r0, [pc, #208]	; (800211c <HAL_ADC_ConfigChannel+0x7c4>)
 800204c:	f7ff f9bb 	bl	80013c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_ADC_ConfigChannel+0x7d4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	4a36      	ldr	r2, [pc, #216]	; (8002130 <HAL_ADC_ConfigChannel+0x7d8>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800206a:	e002      	b.n	8002072 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3b01      	subs	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f9      	bne.n	800206c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002078:	e040      	b.n	80020fc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a2d      	ldr	r2, [pc, #180]	; (8002134 <HAL_ADC_ConfigChannel+0x7dc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d118      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d112      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_ADC_ConfigChannel+0x7cc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0x74c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_ADC_ConfigChannel+0x7d0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d12d      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ac:	4619      	mov	r1, r3
 80020ae:	481b      	ldr	r0, [pc, #108]	; (800211c <HAL_ADC_ConfigChannel+0x7c4>)
 80020b0:	f7ff f989 	bl	80013c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b4:	e024      	b.n	8002100 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_ADC_ConfigChannel+0x7e0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d120      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11a      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_ADC_ConfigChannel+0x7cc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d115      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020de:	4619      	mov	r1, r3
 80020e0:	480e      	ldr	r0, [pc, #56]	; (800211c <HAL_ADC_ConfigChannel+0x7c4>)
 80020e2:	f7ff f970 	bl	80013c6 <LL_ADC_SetCommonPathInternalCh>
 80020e6:	e00c      	b.n	8002102 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80020fa:	e002      	b.n	8002102 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020fc:	bf00      	nop
 80020fe:	e000      	b.n	8002102 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002100:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800210a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800210e:	4618      	mov	r0, r3
 8002110:	37d8      	adds	r7, #216	; 0xd8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	80080000 	.word	0x80080000
 800211c:	50040300 	.word	0x50040300
 8002120:	c7520000 	.word	0xc7520000
 8002124:	50040000 	.word	0x50040000
 8002128:	50040200 	.word	0x50040200
 800212c:	20000000 	.word	0x20000000
 8002130:	053e2d63 	.word	0x053e2d63
 8002134:	cb840000 	.word	0xcb840000
 8002138:	80000001 	.word	0x80000001

0800213c <LL_ADC_IsEnabled>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <LL_ADC_IsEnabled+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_ADC_IsEnabled+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_ADC_REG_IsConversionOngoing>:
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b04      	cmp	r3, #4
 8002174:	d101      	bne.n	800217a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b09f      	sub	sp, #124	; 0x7c
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e093      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80021ae:	2300      	movs	r3, #0
 80021b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80021b2:	2300      	movs	r3, #0
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d102      	bne.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	e001      	b.n	80021ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e072      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ffb9 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
 80021f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffb3 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d154      	bne.n	80022ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002204:	2b00      	cmp	r3, #0
 8002206:	d151      	bne.n	80022ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002208:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02c      	beq.n	800226e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002226:	035b      	lsls	r3, r3, #13
 8002228:	430b      	orrs	r3, r1
 800222a:	431a      	orrs	r2, r3
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002230:	4829      	ldr	r0, [pc, #164]	; (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002232:	f7ff ff83 	bl	800213c <LL_ADC_IsEnabled>
 8002236:	4604      	mov	r4, r0
 8002238:	4828      	ldr	r0, [pc, #160]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800223a:	f7ff ff7f 	bl	800213c <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	431c      	orrs	r4, r3
 8002242:	4828      	ldr	r0, [pc, #160]	; (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002244:	f7ff ff7a 	bl	800213c <LL_ADC_IsEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	4323      	orrs	r3, r4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d137      	bne.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002258:	f023 030f 	bic.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	6892      	ldr	r2, [r2, #8]
 8002264:	430a      	orrs	r2, r1
 8002266:	431a      	orrs	r2, r3
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800226c:	e028      	b.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800226e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002278:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800227a:	4817      	ldr	r0, [pc, #92]	; (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800227c:	f7ff ff5e 	bl	800213c <LL_ADC_IsEnabled>
 8002280:	4604      	mov	r4, r0
 8002282:	4816      	ldr	r0, [pc, #88]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002284:	f7ff ff5a 	bl	800213c <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	431c      	orrs	r4, r3
 800228c:	4815      	ldr	r0, [pc, #84]	; (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800228e:	f7ff ff55 	bl	800213c <LL_ADC_IsEnabled>
 8002292:	4603      	mov	r3, r0
 8002294:	4323      	orrs	r3, r4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d112      	bne.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800229a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022a2:	f023 030f 	bic.w	r3, r3, #15
 80022a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022aa:	e009      	b.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80022be:	e000      	b.n	80022c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	377c      	adds	r7, #124	; 0x7c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd90      	pop	{r4, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	50040000 	.word	0x50040000
 80022dc:	50040100 	.word	0x50040100
 80022e0:	50040300 	.word	0x50040300
 80022e4:	50040200 	.word	0x50040200

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	; (8002384 <__NVIC_EnableIRQ+0x38>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002454:	d301      	bcc.n	800245a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002456:	2301      	movs	r3, #1
 8002458:	e00f      	b.n	800247a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <SysTick_Config+0x40>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002462:	210f      	movs	r1, #15
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f7ff ff8e 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <SysTick_Config+0x40>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SysTick_Config+0x40>)
 8002474:	2207      	movs	r2, #7
 8002476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	e000e010 	.word	0xe000e010

08002488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff29 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b0:	f7ff ff3e 	bl	8002330 <__NVIC_GetPriorityGrouping>
 80024b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	f7ff ff8e 	bl	80023dc <NVIC_EncodePriority>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff5d 	bl	8002388 <__NVIC_SetPriority>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff31 	bl	800234c <__NVIC_EnableIRQ>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ffa2 	bl	8002444 <SysTick_Config>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251a:	e17f      	b.n	800281c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8171 	beq.w	8002816 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d005      	beq.n	800254c <HAL_GPIO_Init+0x40>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d130      	bne.n	80025ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002582:	2201      	movs	r2, #1
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0201 	and.w	r2, r3, #1
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d118      	bne.n	80025ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	08db      	lsrs	r3, r3, #3
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	6939      	ldr	r1, [r7, #16]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80ac 	beq.w	8002816 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	4b5f      	ldr	r3, [pc, #380]	; (800283c <HAL_GPIO_Init+0x330>)
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	4a5e      	ldr	r2, [pc, #376]	; (800283c <HAL_GPIO_Init+0x330>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6613      	str	r3, [r2, #96]	; 0x60
 80026ca:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_GPIO_Init+0x330>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026d6:	4a5a      	ldr	r2, [pc, #360]	; (8002840 <HAL_GPIO_Init+0x334>)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002700:	d025      	beq.n	800274e <HAL_GPIO_Init+0x242>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <HAL_GPIO_Init+0x338>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <HAL_GPIO_Init+0x23e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <HAL_GPIO_Init+0x33c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x23a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_GPIO_Init+0x340>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x236>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4c      	ldr	r2, [pc, #304]	; (8002850 <HAL_GPIO_Init+0x344>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x232>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4b      	ldr	r2, [pc, #300]	; (8002854 <HAL_GPIO_Init+0x348>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x22e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4a      	ldr	r2, [pc, #296]	; (8002858 <HAL_GPIO_Init+0x34c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x22a>
 8002732:	2306      	movs	r3, #6
 8002734:	e00c      	b.n	8002750 <HAL_GPIO_Init+0x244>
 8002736:	2307      	movs	r3, #7
 8002738:	e00a      	b.n	8002750 <HAL_GPIO_Init+0x244>
 800273a:	2305      	movs	r3, #5
 800273c:	e008      	b.n	8002750 <HAL_GPIO_Init+0x244>
 800273e:	2304      	movs	r3, #4
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x244>
 8002742:	2303      	movs	r3, #3
 8002744:	e004      	b.n	8002750 <HAL_GPIO_Init+0x244>
 8002746:	2302      	movs	r3, #2
 8002748:	e002      	b.n	8002750 <HAL_GPIO_Init+0x244>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x244>
 800274e:	2300      	movs	r3, #0
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	f002 0203 	and.w	r2, r2, #3
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	4093      	lsls	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002760:	4937      	ldr	r1, [pc, #220]	; (8002840 <HAL_GPIO_Init+0x334>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3302      	adds	r3, #2
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_GPIO_Init+0x350>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002792:	4a32      	ldr	r2, [pc, #200]	; (800285c <HAL_GPIO_Init+0x350>)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_GPIO_Init+0x350>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_GPIO_Init+0x350>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_GPIO_Init+0x350>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027e6:	4a1d      	ldr	r2, [pc, #116]	; (800285c <HAL_GPIO_Init+0x350>)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_GPIO_Init+0x350>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_GPIO_Init+0x350>)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	f47f ae78 	bne.w	800251c <HAL_GPIO_Init+0x10>
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	48000400 	.word	0x48000400
 8002848:	48000800 	.word	0x48000800
 800284c:	48000c00 	.word	0x48000c00
 8002850:	48001000 	.word	0x48001000
 8002854:	48001400 	.word	0x48001400
 8002858:	48001800 	.word	0x48001800
 800285c:	40010400 	.word	0x40010400

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800287c:	e002      	b.n	8002884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028a6:	4a05      	ldr	r2, [pc, #20]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f806 	bl	80028c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d130      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800290c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002910:	d038      	beq.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800291a:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2232      	movs	r2, #50	; 0x32
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0c9b      	lsrs	r3, r3, #18
 8002934:	3301      	adds	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002938:	e002      	b.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3b01      	subs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d102      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f2      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d110      	bne.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e00f      	b.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002972:	d007      	beq.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800297c:	4a05      	ldr	r2, [pc, #20]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40007000 	.word	0x40007000
 8002998:	20000000 	.word	0x20000000
 800299c:	431bde83 	.word	0x431bde83

080029a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e3ca      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	4b97      	ldr	r3, [pc, #604]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029bc:	4b94      	ldr	r3, [pc, #592]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80e4 	beq.w	8002b9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_RCC_OscConfig+0x4a>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	f040 808b 	bne.w	8002af8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	f040 8087 	bne.w	8002af8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ea:	4b89      	ldr	r3, [pc, #548]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e3a2      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_RCC_OscConfig+0x7c>
 8002a12:	4b7f      	ldr	r3, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1a:	e005      	b.n	8002a28 <HAL_RCC_OscConfig+0x88>
 8002a1c:	4b7c      	ldr	r3, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d223      	bcs.n	8002a74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fd1d 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e383      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a40:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a46:	f043 0308 	orr.w	r3, r3, #8
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	496d      	ldr	r1, [pc, #436]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	4968      	ldr	r1, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	e025      	b.n	8002ac0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a65      	ldr	r2, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4960      	ldr	r1, [pc, #384]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	495b      	ldr	r1, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fcdd 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e343      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac0:	f000 fc4a 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	4950      	ldr	r1, [pc, #320]	; (8002c14 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_RCC_OscConfig+0x278>)
 8002ade:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae0:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fbdb 	bl	80012a0 <HAL_InitTick>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d052      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	e327      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d032      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b00:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fc18 	bl	8001340 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b14:	f7fe fc14 	bl	8001340 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e310      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a36      	ldr	r2, [pc, #216]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4931      	ldr	r1, [pc, #196]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	492c      	ldr	r1, [pc, #176]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e01a      	b.n	8002b9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fbe5 	bl	8001340 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fbe1 	bl	8001340 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e2dd      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x1da>
 8002b98:	e000      	b.n	8002b9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d074      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x21a>
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d064      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d160      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e2ba      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x24a>
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e026      	b.n	8002c38 <HAL_RCC_OscConfig+0x298>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf2:	d115      	bne.n	8002c20 <HAL_RCC_OscConfig+0x280>
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a02      	ldr	r2, [pc, #8]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e014      	b.n	8002c38 <HAL_RCC_OscConfig+0x298>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08005a00 	.word	0x08005a00
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	4ba0      	ldr	r3, [pc, #640]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a9f      	ldr	r2, [pc, #636]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b9d      	ldr	r3, [pc, #628]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a9c      	ldr	r2, [pc, #624]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fb7e 	bl	8001340 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe fb7a 	bl	8001340 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e276      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5a:	4b92      	ldr	r3, [pc, #584]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2a8>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fb6a 	bl	8001340 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fb66 	bl	8001340 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e262      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c82:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2d0>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d060      	beq.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x310>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d119      	bne.n	8002cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d116      	bne.n	8002cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x328>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e23f      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	4973      	ldr	r1, [pc, #460]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	e040      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d023      	beq.n	8002d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6e      	ldr	r2, [pc, #440]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fb25 	bl	8001340 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe fb21 	bl	8001340 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e21d      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0c:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	495f      	ldr	r1, [pc, #380]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
 8002d2c:	e018      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5c      	ldr	r2, [pc, #368]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fb01 	bl	8001340 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe fafd 	bl	8001340 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1f9      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d74:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fadc 	bl	8001340 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fad8 	bl	8001340 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1d4      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3ec>
 8002dac:	e01b      	b.n	8002de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db4:	4a3b      	ldr	r2, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fabf 	bl	8001340 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe fabb 	bl	8001340 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1b7      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a6 	beq.w	8002f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d118      	bne.n	8002e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e38:	f7fe fa82 	bl	8001340 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe fa7e 	bl	8001340 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e17a      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4d8>
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e76:	e029      	b.n	8002ecc <HAL_RCC_OscConfig+0x52c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d115      	bne.n	8002eac <HAL_RCC_OscConfig+0x50c>
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	4a03      	ldr	r2, [pc, #12]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x52c>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a9b      	ldr	r2, [pc, #620]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebc:	4b98      	ldr	r3, [pc, #608]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	4a97      	ldr	r2, [pc, #604]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d016      	beq.n	8002f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fa34 	bl	8001340 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe fa30 	bl	8001340 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e12a      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ed      	beq.n	8002edc <HAL_RCC_OscConfig+0x53c>
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fa1d 	bl	8001340 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fa19 	bl	8001340 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e113      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f20:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ed      	bne.n	8002f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	4a79      	ldr	r2, [pc, #484]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80fe 	beq.w	8003146 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	f040 80d0 	bne.w	80030f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f54:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d130      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	3b01      	subs	r3, #1
 8002f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d127      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d11f      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f94:	2a07      	cmp	r2, #7
 8002f96:	bf14      	ite	ne
 8002f98:	2201      	movne	r2, #1
 8002f9a:	2200      	moveq	r2, #0
 8002f9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d113      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d06e      	beq.n	80030a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d069      	beq.n	80030a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0ad      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ff8:	f7fe f9a2 	bl	8001340 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe f99e 	bl	8001340 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e09a      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301e:	4b40      	ldr	r3, [pc, #256]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <HAL_RCC_OscConfig+0x784>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800302e:	3a01      	subs	r2, #1
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003038:	0212      	lsls	r2, r2, #8
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003040:	0852      	lsrs	r2, r2, #1
 8003042:	3a01      	subs	r2, #1
 8003044:	0552      	lsls	r2, r2, #21
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800304c:	0852      	lsrs	r2, r2, #1
 800304e:	3a01      	subs	r2, #1
 8003050:	0652      	lsls	r2, r2, #25
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003058:	0912      	lsrs	r2, r2, #4
 800305a:	0452      	lsls	r2, r2, #17
 800305c:	430a      	orrs	r2, r1
 800305e:	4930      	ldr	r1, [pc, #192]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800307c:	f7fe f960 	bl	8001340 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe f95c 	bl	8001340 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e058      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a2:	e050      	b.n	8003146 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e04f      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d148      	bne.n	8003146 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030cc:	f7fe f938 	bl	8001340 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fe f934 	bl	8001340 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e030      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x734>
 80030f2:	e028      	b.n	8003146 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d023      	beq.n	8003142 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe f91b 	bl	8001340 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310c:	e00c      	b.n	8003128 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310e:	f7fe f917 	bl	8001340 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d905      	bls.n	8003128 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e013      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
 8003120:	40021000 	.word	0x40021000
 8003124:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_OscConfig+0x7b0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ec      	bne.n	800310e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_OscConfig+0x7b0>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	4905      	ldr	r1, [pc, #20]	; (8003150 <HAL_RCC_OscConfig+0x7b0>)
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_OscConfig+0x7b4>)
 800313c:	4013      	ands	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
 8003140:	e001      	b.n	8003146 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	feeefffc 	.word	0xfeeefffc

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0e7      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b75      	ldr	r3, [pc, #468]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	4970      	ldr	r1, [pc, #448]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b6e      	ldr	r3, [pc, #440]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cf      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d908      	bls.n	80031ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4960      	ldr	r1, [pc, #384]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d04c      	beq.n	8003270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031de:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d121      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0a6      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	4b54      	ldr	r3, [pc, #336]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e09a      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800320e:	4b4e      	ldr	r3, [pc, #312]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e08e      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e086      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b46      	ldr	r3, [pc, #280]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4943      	ldr	r1, [pc, #268]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003240:	f7fe f87e 	bl	8001340 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe f87a 	bl	8001340 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e06e      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	429a      	cmp	r2, r3
 800328a:	d208      	bcs.n	800329e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	492b      	ldr	r1, [pc, #172]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329e:	4b29      	ldr	r3, [pc, #164]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d210      	bcs.n	80032ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 0207 	bic.w	r2, r3, #7
 80032b4:	4923      	ldr	r1, [pc, #140]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e036      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4918      	ldr	r1, [pc, #96]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4910      	ldr	r1, [pc, #64]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800330c:	f000 f824 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	490b      	ldr	r1, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1f4>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1f8>)
 800332a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1fc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd ffb5 	bl	80012a0 <HAL_InitTick>
 8003336:	4603      	mov	r3, r0
 8003338:	72fb      	strb	r3, [r7, #11]

  return status;
 800333a:	7afb      	ldrb	r3, [r7, #11]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	08005a00 	.word	0x08005a00
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003366:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d121      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d11e      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800338c:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10d      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c8:	e00a      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_RCC_GetSysClockFreq+0x110>)
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e004      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_RCC_GetSysClockFreq+0x114>)
 80033de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d134      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0xa6>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d003      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0xac>
 80033fc:	e005      	b.n	800340a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCC_GetSysClockFreq+0x110>)
 8003400:	617b      	str	r3, [r7, #20]
      break;
 8003402:	e005      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_GetSysClockFreq+0x114>)
 8003406:	617b      	str	r3, [r7, #20]
      break;
 8003408:	e002      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	617b      	str	r3, [r7, #20]
      break;
 800340e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	3301      	adds	r3, #1
 800341c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	fb03 f202 	mul.w	r2, r3, r2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	0e5b      	lsrs	r3, r3, #25
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	3301      	adds	r3, #1
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003450:	69bb      	ldr	r3, [r7, #24]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	08005a10 	.word	0x08005a10
 8003468:	00f42400 	.word	0x00f42400
 800346c:	007a1200 	.word	0x007a1200

08003470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003488:	f7ff fa26 	bl	80028d8 <HAL_PWREx_GetVoltageRange>
 800348c:	6178      	str	r0, [r7, #20]
 800348e:	e014      	b.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	4a24      	ldr	r2, [pc, #144]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349a:	6593      	str	r3, [r2, #88]	; 0x58
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034a8:	f7ff fa16 	bl	80028d8 <HAL_PWREx_GetVoltageRange>
 80034ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c0:	d10b      	bne.n	80034da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d919      	bls.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2ba0      	cmp	r3, #160	; 0xa0
 80034cc:	d902      	bls.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ce:	2302      	movs	r3, #2
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e013      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	e010      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d902      	bls.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e0:	2303      	movs	r3, #3
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	e00a      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d102      	bne.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ec:	2302      	movs	r3, #2
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	e004      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b70      	cmp	r3, #112	; 0x70
 80034f6:	d101      	bne.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f8:	2301      	movs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 0207 	bic.w	r2, r3, #7
 8003504:	4909      	ldr	r1, [pc, #36]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	40022000 	.word	0x40022000

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003538:	2300      	movs	r3, #0
 800353a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800353c:	2300      	movs	r3, #0
 800353e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003548:	2b00      	cmp	r3, #0
 800354a:	d041      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003550:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003554:	d02a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003556:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355a:	d824      	bhi.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800355c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003562:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003566:	d81e      	bhi.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800356c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003570:	d010      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003572:	e018      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003574:	4b86      	ldr	r3, [pc, #536]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a85      	ldr	r2, [pc, #532]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003580:	e015      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fabb 	bl	8003b04 <RCCEx_PLLSAI1_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003592:	e00c      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3320      	adds	r3, #32
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fba6 	bl	8003cec <RCCEx_PLLSAI2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a4:	e003      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	74fb      	strb	r3, [r7, #19]
      break;
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ae:	7cfb      	ldrb	r3, [r7, #19]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b4:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c2:	4973      	ldr	r1, [pc, #460]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ca:	e001      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d041      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035e4:	d02a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ea:	d824      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f6:	d81e      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003600:	d010      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003602:	e018      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003604:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a61      	ldr	r2, [pc, #388]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fa73 	bl	8003b04 <RCCEx_PLLSAI1_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003622:	e00c      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3320      	adds	r3, #32
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb5e 	bl	8003cec <RCCEx_PLLSAI2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003634:	e003      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	74fb      	strb	r3, [r7, #19]
      break;
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800363c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003644:	4b52      	ldr	r3, [pc, #328]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003652:	494f      	ldr	r1, [pc, #316]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800365a:	e001      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80a0 	beq.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003672:	4b47      	ldr	r3, [pc, #284]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b41      	ldr	r3, [pc, #260]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4a40      	ldr	r2, [pc, #256]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	; 0x58
 8003694:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a4:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3a      	ldr	r2, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b0:	f7fd fe46 	bl	8001340 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036b6:	e009      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b8:	f7fd fe42 	bl	8001340 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d902      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	74fb      	strb	r3, [r7, #19]
        break;
 80036ca:	e005      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d15c      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036de:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01f      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d019      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036fc:	4b24      	ldr	r3, [pc, #144]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	4a20      	ldr	r2, [pc, #128]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd fe01 	bl	8001340 <HAL_GetTick>
 800373e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003740:	e00b      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fd fdfd 	bl	8001340 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d902      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	74fb      	strb	r3, [r7, #19]
            break;
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ec      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377e:	4904      	ldr	r1, [pc, #16]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003786:	e009      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
 800378c:	e006      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800379c:	7c7b      	ldrb	r3, [r7, #17]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4b9e      	ldr	r3, [pc, #632]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a9d      	ldr	r2, [pc, #628]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ba:	4b98      	ldr	r3, [pc, #608]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f023 0203 	bic.w	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	4994      	ldr	r1, [pc, #592]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037dc:	4b8f      	ldr	r3, [pc, #572]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 020c 	bic.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	498c      	ldr	r1, [pc, #560]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037fe:	4b87      	ldr	r3, [pc, #540]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	4983      	ldr	r1, [pc, #524]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003820:	4b7e      	ldr	r3, [pc, #504]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	497b      	ldr	r1, [pc, #492]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003842:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	4972      	ldr	r1, [pc, #456]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003864:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	496a      	ldr	r1, [pc, #424]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003886:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	4961      	ldr	r1, [pc, #388]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038a8:	4b5c      	ldr	r3, [pc, #368]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b6:	4959      	ldr	r1, [pc, #356]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ca:	4b54      	ldr	r3, [pc, #336]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	4950      	ldr	r1, [pc, #320]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038ec:	4b4b      	ldr	r3, [pc, #300]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	4948      	ldr	r1, [pc, #288]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800390e:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	493f      	ldr	r1, [pc, #252]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d028      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003930:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393e:	4937      	ldr	r1, [pc, #220]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394e:	d106      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003950:	4b32      	ldr	r3, [pc, #200]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a31      	ldr	r2, [pc, #196]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395a:	60d3      	str	r3, [r2, #12]
 800395c:	e011      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003966:	d10c      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f8c8 	bl	8003b04 <RCCEx_PLLSAI1_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800397e:	7cfb      	ldrb	r3, [r7, #19]
 8003980:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d028      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800398e:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	491f      	ldr	r1, [pc, #124]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ac:	d106      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4a1a      	ldr	r2, [pc, #104]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b8:	60d3      	str	r3, [r2, #12]
 80039ba:	e011      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f899 	bl	8003b04 <RCCEx_PLLSAI1_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d02b      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fa:	4908      	ldr	r1, [pc, #32]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0a:	d109      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a02      	ldr	r2, [pc, #8]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a16:	60d3      	str	r3, [r2, #12]
 8003a18:	e014      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 f867 	bl	8003b04 <RCCEx_PLLSAI1_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d02f      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a50:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5e:	4928      	ldr	r1, [pc, #160]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6e:	d10d      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	2102      	movs	r1, #2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f844 	bl	8003b04 <RCCEx_PLLSAI1_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d014      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	74bb      	strb	r3, [r7, #18]
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3320      	adds	r3, #32
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f925 	bl	8003cec <RCCEx_PLLSAI2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aca:	490d      	ldr	r1, [pc, #52]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aee:	4904      	ldr	r1, [pc, #16]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003af6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000

08003b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b12:	4b75      	ldr	r3, [pc, #468]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d018      	beq.n	8003b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b1e:	4b72      	ldr	r3, [pc, #456]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0203 	and.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10d      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
       ||
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b36:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
       ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d047      	beq.n	8003bda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	e044      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d018      	beq.n	8003b8a <RCCEx_PLLSAI1_Config+0x86>
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d825      	bhi.n	8003ba8 <RCCEx_PLLSAI1_Config+0xa4>
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d002      	beq.n	8003b66 <RCCEx_PLLSAI1_Config+0x62>
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d009      	beq.n	8003b78 <RCCEx_PLLSAI1_Config+0x74>
 8003b64:	e020      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b66:	4b60      	ldr	r3, [pc, #384]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11d      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e01a      	b.n	8003bae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b78:	4b5b      	ldr	r3, [pc, #364]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b88:	e013      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b8a:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b96:	4b54      	ldr	r3, [pc, #336]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ba6:	e006      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e004      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6819      	ldr	r1, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	4944      	ldr	r1, [pc, #272]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d17d      	bne.n	8003cdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003be0:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a40      	ldr	r2, [pc, #256]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd fba8 	bl	8001340 <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bf2:	e009      	b.n	8003c08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf4:	f7fd fba4 	bl	8001340 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	73fb      	strb	r3, [r7, #15]
        break;
 8003c06:	e005      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c08:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ef      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d160      	bne.n	8003cdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d111      	bne.n	8003c44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c20:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	0211      	lsls	r1, r2, #8
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	0912      	lsrs	r2, r2, #4
 8003c38:	0452      	lsls	r2, r2, #17
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	492a      	ldr	r1, [pc, #168]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	610b      	str	r3, [r1, #16]
 8003c42:	e027      	b.n	8003c94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d112      	bne.n	8003c70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	0211      	lsls	r1, r2, #8
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6912      	ldr	r2, [r2, #16]
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	0552      	lsls	r2, r2, #21
 8003c66:	430a      	orrs	r2, r1
 8003c68:	491f      	ldr	r1, [pc, #124]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	610b      	str	r3, [r1, #16]
 8003c6e:	e011      	b.n	8003c94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6892      	ldr	r2, [r2, #8]
 8003c80:	0211      	lsls	r1, r2, #8
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6952      	ldr	r2, [r2, #20]
 8003c86:	0852      	lsrs	r2, r2, #1
 8003c88:	3a01      	subs	r2, #1
 8003c8a:	0652      	lsls	r2, r2, #25
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd fb4e 	bl	8001340 <HAL_GetTick>
 8003ca4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ca6:	e009      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca8:	f7fd fb4a 	bl	8001340 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d902      	bls.n	8003cbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cba:	e005      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ef      	beq.n	8003ca8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000

08003cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfa:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d06:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0203 	and.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10d      	bne.n	8003d32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d1e:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d047      	beq.n	8003dc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	e044      	b.n	8003dc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d018      	beq.n	8003d72 <RCCEx_PLLSAI2_Config+0x86>
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d825      	bhi.n	8003d90 <RCCEx_PLLSAI2_Config+0xa4>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <RCCEx_PLLSAI2_Config+0x62>
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d009      	beq.n	8003d60 <RCCEx_PLLSAI2_Config+0x74>
 8003d4c:	e020      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d4e:	4b55      	ldr	r3, [pc, #340]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11d      	bne.n	8003d96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5e:	e01a      	b.n	8003d96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d60:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d116      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e013      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d72:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d7e:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d8e:	e006      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e004      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4939      	ldr	r1, [pc, #228]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d167      	bne.n	8003e98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a35      	ldr	r2, [pc, #212]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd4:	f7fd fab4 	bl	8001340 <HAL_GetTick>
 8003dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dda:	e009      	b.n	8003df0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ddc:	f7fd fab0 	bl	8001340 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d902      	bls.n	8003df0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	73fb      	strb	r3, [r7, #15]
        break;
 8003dee:	e005      	b.n	8003dfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df0:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ef      	bne.n	8003ddc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d14a      	bne.n	8003e98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	0211      	lsls	r1, r2, #8
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	0912      	lsrs	r2, r2, #4
 8003e20:	0452      	lsls	r2, r2, #17
 8003e22:	430a      	orrs	r2, r1
 8003e24:	491f      	ldr	r1, [pc, #124]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	614b      	str	r3, [r1, #20]
 8003e2a:	e011      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6892      	ldr	r2, [r2, #8]
 8003e3c:	0211      	lsls	r1, r2, #8
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6912      	ldr	r2, [r2, #16]
 8003e42:	0852      	lsrs	r2, r2, #1
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0652      	lsls	r2, r2, #25
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	4916      	ldr	r1, [pc, #88]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fa70 	bl	8001340 <HAL_GetTick>
 8003e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e62:	e009      	b.n	8003e78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e64:	f7fd fa6c 	bl	8001340 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d902      	bls.n	8003e78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	73fb      	strb	r3, [r7, #15]
          break;
 8003e76:	e005      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ef      	beq.n	8003e64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	4904      	ldr	r1, [pc, #16]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000

08003ea8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d079      	beq.n	8003fae <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd f868 	bl	8000fa4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d058      	beq.n	8003f9c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	22ca      	movs	r2, #202	; 0xca
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2253      	movs	r2, #83	; 0x53
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fad2 	bl	80044a4 <RTC_EnterInitMode>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d127      	bne.n	8003f5a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	68d2      	ldr	r2, [r2, #12]
 8003f44:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6919      	ldr	r1, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fad6 	bl	800450c <RTC_ExitInitMode>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0203 	bic.w	r2, r2, #3
 8003f78:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	22ff      	movs	r2, #255	; 0xff
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
 8003f9a:	e001      	b.n	8003fa0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RTC_SetTime+0x1a>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e08b      	b.n	80040ea <HAL_RTC_SetTime+0x132>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	22ca      	movs	r2, #202	; 0xca
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2253      	movs	r2, #83	; 0x53
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa56 	bl	80044a4 <RTC_EnterInitMode>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d163      	bne.n	80040ca <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d126      	bne.n	8004056 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fab1 	bl	8004588 <RTC_ByteToBcd2>
 8004026:	4603      	mov	r3, r0
 8004028:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 faaa 	bl	8004588 <RTC_ByteToBcd2>
 8004034:	4603      	mov	r3, r0
 8004036:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004038:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	789b      	ldrb	r3, [r3, #2]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 faa2 	bl	8004588 <RTC_ByteToBcd2>
 8004044:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004046:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	78db      	ldrb	r3, [r3, #3]
 800404e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e018      	b.n	8004088 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004076:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800407c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	78db      	ldrb	r3, [r3, #3]
 8004082:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004092:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004096:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6899      	ldr	r1, [r3, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fa23 	bl	800450c <RTC_ExitInitMode>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d103      	bne.n	80040e0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}

080040f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040f2:	b590      	push	{r4, r7, lr}
 80040f4:	b087      	sub	sp, #28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_RTC_SetDate+0x1a>
 8004108:	2302      	movs	r3, #2
 800410a:	e075      	b.n	80041f8 <HAL_RTC_SetDate+0x106>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10e      	bne.n	8004140 <HAL_RTC_SetDate+0x4e>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	b2db      	uxtb	r3, r3
 8004138:	330a      	adds	r3, #10
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11c      	bne.n	8004180 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	78db      	ldrb	r3, [r3, #3]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fa1c 	bl	8004588 <RTC_ByteToBcd2>
 8004150:	4603      	mov	r3, r0
 8004152:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa15 	bl	8004588 <RTC_ByteToBcd2>
 800415e:	4603      	mov	r3, r0
 8004160:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004162:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	789b      	ldrb	r3, [r3, #2]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fa0d 	bl	8004588 <RTC_ByteToBcd2>
 800416e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004170:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e00e      	b.n	800419e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	78db      	ldrb	r3, [r3, #3]
 8004184:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800418c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004192:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	22ca      	movs	r2, #202	; 0xca
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2253      	movs	r2, #83	; 0x53
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f978 	bl	80044a4 <RTC_EnterInitMode>
 80041b4:	4603      	mov	r3, r0
 80041b6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f99c 	bl	800450c <RTC_ExitInitMode>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd90      	pop	{r4, r7, pc}

08004200 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b089      	sub	sp, #36	; 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_RTC_SetAlarm+0x1a>
 8004216:	2302      	movs	r3, #2
 8004218:	e11b      	b.n	8004452 <HAL_RTC_SetAlarm+0x252>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d137      	bne.n	80042a0 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f99d 	bl	8004588 <RTC_ByteToBcd2>
 800424e:	4603      	mov	r3, r0
 8004250:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f996 	bl	8004588 <RTC_ByteToBcd2>
 800425c:	4603      	mov	r3, r0
 800425e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004260:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	789b      	ldrb	r3, [r3, #2]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f98e 	bl	8004588 <RTC_ByteToBcd2>
 800426c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800426e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	78db      	ldrb	r3, [r3, #3]
 8004276:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004278:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f980 	bl	8004588 <RTC_ByteToBcd2>
 8004288:	4603      	mov	r3, r0
 800428a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800428c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004294:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800429a:	4313      	orrs	r3, r2
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e023      	b.n	80042e8 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80042c0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80042c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	78db      	ldrb	r3, [r3, #3]
 80042cc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80042ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80042d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80042de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	22ca      	movs	r2, #202	; 0xca
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2253      	movs	r2, #83	; 0x53
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430c:	d14a      	bne.n	80043a4 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431c:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800432e:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800433e:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004340:	f7fc fffe 	bl	8001340 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004346:	e015      	b.n	8004374 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004348:	f7fc fffa 	bl	8001340 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004356:	d90d      	bls.n	8004374 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2203      	movs	r2, #3
 8004364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e06e      	b.n	8004452 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0e2      	beq.n	8004348 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	e049      	b.n	8004438 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043b2:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f462 7220 	orn	r2, r2, #640	; 0x280
 80043c4:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d4:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80043d6:	f7fc ffb3 	bl	8001340 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80043dc:	e015      	b.n	800440a <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043de:	f7fc ffaf 	bl	8001340 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ec:	d90d      	bls.n	800440a <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2203      	movs	r2, #3
 80043fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e023      	b.n	8004452 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0e2      	beq.n	80043de <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	22ff      	movs	r2, #255	; 0xff
 800443e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd90      	pop	{r4, r7, pc}
	...

0800445c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0d      	ldr	r2, [pc, #52]	; (80044a0 <HAL_RTC_WaitForSynchro+0x44>)
 800446a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800446c:	f7fc ff68 	bl	8001340 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004472:	e009      	b.n	8004488 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004474:	f7fc ff64 	bl	8001340 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004482:	d901      	bls.n	8004488 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e007      	b.n	8004498 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ee      	beq.n	8004474 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	0003ff5f 	.word	0x0003ff5f

080044a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d120      	bne.n	8004500 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f04f 32ff 	mov.w	r2, #4294967295
 80044c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80044c8:	f7fc ff3a 	bl	8001340 <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044ce:	e00d      	b.n	80044ec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044d0:	f7fc ff36 	bl	8001340 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044de:	d905      	bls.n	80044ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2203      	movs	r2, #3
 80044e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <RTC_EnterInitMode+0x5c>
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d1e7      	bne.n	80044d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <RTC_ExitInitMode+0x78>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <RTC_ExitInitMode+0x78>)
 800451e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004522:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004524:	4b17      	ldr	r3, [pc, #92]	; (8004584 <RTC_ExitInitMode+0x78>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10c      	bne.n	800454a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff93 	bl	800445c <HAL_RTC_WaitForSynchro>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01e      	beq.n	800457a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2203      	movs	r2, #3
 8004540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e017      	b.n	800457a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <RTC_ExitInitMode+0x78>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <RTC_ExitInitMode+0x78>)
 8004550:	f023 0320 	bic.w	r3, r3, #32
 8004554:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ff80 	bl	800445c <HAL_RTC_WaitForSynchro>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2203      	movs	r2, #3
 8004566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <RTC_ExitInitMode+0x78>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <RTC_ExitInitMode+0x78>)
 8004574:	f043 0320 	orr.w	r3, r3, #32
 8004578:	6093      	str	r3, [r2, #8]
  }

  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40002800 	.word	0x40002800

08004588 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800459a:	e005      	b.n	80045a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80045a2:	7afb      	ldrb	r3, [r7, #11]
 80045a4:	3b0a      	subs	r3, #10
 80045a6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80045a8:	7afb      	ldrb	r3, [r7, #11]
 80045aa:	2b09      	cmp	r3, #9
 80045ac:	d8f6      	bhi.n	800459c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	7afb      	ldrb	r3, [r7, #11]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	b2db      	uxtb	r3, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <rand>:
 80045c8:	4b16      	ldr	r3, [pc, #88]	; (8004624 <rand+0x5c>)
 80045ca:	b510      	push	{r4, lr}
 80045cc:	681c      	ldr	r4, [r3, #0]
 80045ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045d0:	b9b3      	cbnz	r3, 8004600 <rand+0x38>
 80045d2:	2018      	movs	r0, #24
 80045d4:	f000 fa42 	bl	8004a5c <malloc>
 80045d8:	4602      	mov	r2, r0
 80045da:	6320      	str	r0, [r4, #48]	; 0x30
 80045dc:	b920      	cbnz	r0, 80045e8 <rand+0x20>
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <rand+0x60>)
 80045e0:	4812      	ldr	r0, [pc, #72]	; (800462c <rand+0x64>)
 80045e2:	2152      	movs	r1, #82	; 0x52
 80045e4:	f000 f9d0 	bl	8004988 <__assert_func>
 80045e8:	4911      	ldr	r1, [pc, #68]	; (8004630 <rand+0x68>)
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <rand+0x6c>)
 80045ec:	e9c0 1300 	strd	r1, r3, [r0]
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <rand+0x70>)
 80045f2:	6083      	str	r3, [r0, #8]
 80045f4:	230b      	movs	r3, #11
 80045f6:	8183      	strh	r3, [r0, #12]
 80045f8:	2100      	movs	r1, #0
 80045fa:	2001      	movs	r0, #1
 80045fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004600:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004602:	480e      	ldr	r0, [pc, #56]	; (800463c <rand+0x74>)
 8004604:	690b      	ldr	r3, [r1, #16]
 8004606:	694c      	ldr	r4, [r1, #20]
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <rand+0x78>)
 800460a:	4358      	muls	r0, r3
 800460c:	fb02 0004 	mla	r0, r2, r4, r0
 8004610:	fba3 3202 	umull	r3, r2, r3, r2
 8004614:	3301      	adds	r3, #1
 8004616:	eb40 0002 	adc.w	r0, r0, r2
 800461a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800461e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004622:	bd10      	pop	{r4, pc}
 8004624:	20000064 	.word	0x20000064
 8004628:	08005a40 	.word	0x08005a40
 800462c:	08005a57 	.word	0x08005a57
 8004630:	abcd330e 	.word	0xabcd330e
 8004634:	e66d1234 	.word	0xe66d1234
 8004638:	0005deec 	.word	0x0005deec
 800463c:	5851f42d 	.word	0x5851f42d
 8004640:	4c957f2d 	.word	0x4c957f2d

08004644 <std>:
 8004644:	2300      	movs	r3, #0
 8004646:	b510      	push	{r4, lr}
 8004648:	4604      	mov	r4, r0
 800464a:	e9c0 3300 	strd	r3, r3, [r0]
 800464e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004652:	6083      	str	r3, [r0, #8]
 8004654:	8181      	strh	r1, [r0, #12]
 8004656:	6643      	str	r3, [r0, #100]	; 0x64
 8004658:	81c2      	strh	r2, [r0, #14]
 800465a:	6183      	str	r3, [r0, #24]
 800465c:	4619      	mov	r1, r3
 800465e:	2208      	movs	r2, #8
 8004660:	305c      	adds	r0, #92	; 0x5c
 8004662:	f000 f914 	bl	800488e <memset>
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <std+0x58>)
 8004668:	6263      	str	r3, [r4, #36]	; 0x24
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <std+0x5c>)
 800466c:	62a3      	str	r3, [r4, #40]	; 0x28
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <std+0x60>)
 8004670:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <std+0x64>)
 8004674:	6323      	str	r3, [r4, #48]	; 0x30
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <std+0x68>)
 8004678:	6224      	str	r4, [r4, #32]
 800467a:	429c      	cmp	r4, r3
 800467c:	d006      	beq.n	800468c <std+0x48>
 800467e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004682:	4294      	cmp	r4, r2
 8004684:	d002      	beq.n	800468c <std+0x48>
 8004686:	33d0      	adds	r3, #208	; 0xd0
 8004688:	429c      	cmp	r4, r3
 800468a:	d105      	bne.n	8004698 <std+0x54>
 800468c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004694:	f000 b974 	b.w	8004980 <__retarget_lock_init_recursive>
 8004698:	bd10      	pop	{r4, pc}
 800469a:	bf00      	nop
 800469c:	08004809 	.word	0x08004809
 80046a0:	0800482b 	.word	0x0800482b
 80046a4:	08004863 	.word	0x08004863
 80046a8:	08004887 	.word	0x08004887
 80046ac:	20000130 	.word	0x20000130

080046b0 <stdio_exit_handler>:
 80046b0:	4a02      	ldr	r2, [pc, #8]	; (80046bc <stdio_exit_handler+0xc>)
 80046b2:	4903      	ldr	r1, [pc, #12]	; (80046c0 <stdio_exit_handler+0x10>)
 80046b4:	4803      	ldr	r0, [pc, #12]	; (80046c4 <stdio_exit_handler+0x14>)
 80046b6:	f000 b869 	b.w	800478c <_fwalk_sglue>
 80046ba:	bf00      	nop
 80046bc:	2000000c 	.word	0x2000000c
 80046c0:	080052a1 	.word	0x080052a1
 80046c4:	20000018 	.word	0x20000018

080046c8 <cleanup_stdio>:
 80046c8:	6841      	ldr	r1, [r0, #4]
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <cleanup_stdio+0x34>)
 80046cc:	4299      	cmp	r1, r3
 80046ce:	b510      	push	{r4, lr}
 80046d0:	4604      	mov	r4, r0
 80046d2:	d001      	beq.n	80046d8 <cleanup_stdio+0x10>
 80046d4:	f000 fde4 	bl	80052a0 <_fflush_r>
 80046d8:	68a1      	ldr	r1, [r4, #8]
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <cleanup_stdio+0x38>)
 80046dc:	4299      	cmp	r1, r3
 80046de:	d002      	beq.n	80046e6 <cleanup_stdio+0x1e>
 80046e0:	4620      	mov	r0, r4
 80046e2:	f000 fddd 	bl	80052a0 <_fflush_r>
 80046e6:	68e1      	ldr	r1, [r4, #12]
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <cleanup_stdio+0x3c>)
 80046ea:	4299      	cmp	r1, r3
 80046ec:	d004      	beq.n	80046f8 <cleanup_stdio+0x30>
 80046ee:	4620      	mov	r0, r4
 80046f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f4:	f000 bdd4 	b.w	80052a0 <_fflush_r>
 80046f8:	bd10      	pop	{r4, pc}
 80046fa:	bf00      	nop
 80046fc:	20000130 	.word	0x20000130
 8004700:	20000198 	.word	0x20000198
 8004704:	20000200 	.word	0x20000200

08004708 <global_stdio_init.part.0>:
 8004708:	b510      	push	{r4, lr}
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <global_stdio_init.part.0+0x30>)
 800470c:	4c0b      	ldr	r4, [pc, #44]	; (800473c <global_stdio_init.part.0+0x34>)
 800470e:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <global_stdio_init.part.0+0x38>)
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	4620      	mov	r0, r4
 8004714:	2200      	movs	r2, #0
 8004716:	2104      	movs	r1, #4
 8004718:	f7ff ff94 	bl	8004644 <std>
 800471c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004720:	2201      	movs	r2, #1
 8004722:	2109      	movs	r1, #9
 8004724:	f7ff ff8e 	bl	8004644 <std>
 8004728:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800472c:	2202      	movs	r2, #2
 800472e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004732:	2112      	movs	r1, #18
 8004734:	f7ff bf86 	b.w	8004644 <std>
 8004738:	20000268 	.word	0x20000268
 800473c:	20000130 	.word	0x20000130
 8004740:	080046b1 	.word	0x080046b1

08004744 <__sfp_lock_acquire>:
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <__sfp_lock_acquire+0x8>)
 8004746:	f000 b91c 	b.w	8004982 <__retarget_lock_acquire_recursive>
 800474a:	bf00      	nop
 800474c:	20000271 	.word	0x20000271

08004750 <__sfp_lock_release>:
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <__sfp_lock_release+0x8>)
 8004752:	f000 b917 	b.w	8004984 <__retarget_lock_release_recursive>
 8004756:	bf00      	nop
 8004758:	20000271 	.word	0x20000271

0800475c <__sinit>:
 800475c:	b510      	push	{r4, lr}
 800475e:	4604      	mov	r4, r0
 8004760:	f7ff fff0 	bl	8004744 <__sfp_lock_acquire>
 8004764:	6a23      	ldr	r3, [r4, #32]
 8004766:	b11b      	cbz	r3, 8004770 <__sinit+0x14>
 8004768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800476c:	f7ff bff0 	b.w	8004750 <__sfp_lock_release>
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <__sinit+0x28>)
 8004772:	6223      	str	r3, [r4, #32]
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <__sinit+0x2c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f5      	bne.n	8004768 <__sinit+0xc>
 800477c:	f7ff ffc4 	bl	8004708 <global_stdio_init.part.0>
 8004780:	e7f2      	b.n	8004768 <__sinit+0xc>
 8004782:	bf00      	nop
 8004784:	080046c9 	.word	0x080046c9
 8004788:	20000268 	.word	0x20000268

0800478c <_fwalk_sglue>:
 800478c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004790:	4607      	mov	r7, r0
 8004792:	4688      	mov	r8, r1
 8004794:	4614      	mov	r4, r2
 8004796:	2600      	movs	r6, #0
 8004798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800479c:	f1b9 0901 	subs.w	r9, r9, #1
 80047a0:	d505      	bpl.n	80047ae <_fwalk_sglue+0x22>
 80047a2:	6824      	ldr	r4, [r4, #0]
 80047a4:	2c00      	cmp	r4, #0
 80047a6:	d1f7      	bne.n	8004798 <_fwalk_sglue+0xc>
 80047a8:	4630      	mov	r0, r6
 80047aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ae:	89ab      	ldrh	r3, [r5, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d907      	bls.n	80047c4 <_fwalk_sglue+0x38>
 80047b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b8:	3301      	adds	r3, #1
 80047ba:	d003      	beq.n	80047c4 <_fwalk_sglue+0x38>
 80047bc:	4629      	mov	r1, r5
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	4306      	orrs	r6, r0
 80047c4:	3568      	adds	r5, #104	; 0x68
 80047c6:	e7e9      	b.n	800479c <_fwalk_sglue+0x10>

080047c8 <siprintf>:
 80047c8:	b40e      	push	{r1, r2, r3}
 80047ca:	b500      	push	{lr}
 80047cc:	b09c      	sub	sp, #112	; 0x70
 80047ce:	ab1d      	add	r3, sp, #116	; 0x74
 80047d0:	9002      	str	r0, [sp, #8]
 80047d2:	9006      	str	r0, [sp, #24]
 80047d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047d8:	4809      	ldr	r0, [pc, #36]	; (8004800 <siprintf+0x38>)
 80047da:	9107      	str	r1, [sp, #28]
 80047dc:	9104      	str	r1, [sp, #16]
 80047de:	4909      	ldr	r1, [pc, #36]	; (8004804 <siprintf+0x3c>)
 80047e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047e4:	9105      	str	r1, [sp, #20]
 80047e6:	6800      	ldr	r0, [r0, #0]
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	a902      	add	r1, sp, #8
 80047ec:	f000 fa44 	bl	8004c78 <_svfiprintf_r>
 80047f0:	9b02      	ldr	r3, [sp, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	b01c      	add	sp, #112	; 0x70
 80047f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047fc:	b003      	add	sp, #12
 80047fe:	4770      	bx	lr
 8004800:	20000064 	.word	0x20000064
 8004804:	ffff0208 	.word	0xffff0208

08004808 <__sread>:
 8004808:	b510      	push	{r4, lr}
 800480a:	460c      	mov	r4, r1
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	f000 f868 	bl	80048e4 <_read_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	bfab      	itete	ge
 8004818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800481a:	89a3      	ldrhlt	r3, [r4, #12]
 800481c:	181b      	addge	r3, r3, r0
 800481e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004822:	bfac      	ite	ge
 8004824:	6563      	strge	r3, [r4, #84]	; 0x54
 8004826:	81a3      	strhlt	r3, [r4, #12]
 8004828:	bd10      	pop	{r4, pc}

0800482a <__swrite>:
 800482a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482e:	461f      	mov	r7, r3
 8004830:	898b      	ldrh	r3, [r1, #12]
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	4605      	mov	r5, r0
 8004836:	460c      	mov	r4, r1
 8004838:	4616      	mov	r6, r2
 800483a:	d505      	bpl.n	8004848 <__swrite+0x1e>
 800483c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004840:	2302      	movs	r3, #2
 8004842:	2200      	movs	r2, #0
 8004844:	f000 f83c 	bl	80048c0 <_lseek_r>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800484e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	4632      	mov	r2, r6
 8004856:	463b      	mov	r3, r7
 8004858:	4628      	mov	r0, r5
 800485a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485e:	f000 b853 	b.w	8004908 <_write_r>

08004862 <__sseek>:
 8004862:	b510      	push	{r4, lr}
 8004864:	460c      	mov	r4, r1
 8004866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486a:	f000 f829 	bl	80048c0 <_lseek_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	bf15      	itete	ne
 8004874:	6560      	strne	r0, [r4, #84]	; 0x54
 8004876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800487a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800487e:	81a3      	strheq	r3, [r4, #12]
 8004880:	bf18      	it	ne
 8004882:	81a3      	strhne	r3, [r4, #12]
 8004884:	bd10      	pop	{r4, pc}

08004886 <__sclose>:
 8004886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488a:	f000 b809 	b.w	80048a0 <_close_r>

0800488e <memset>:
 800488e:	4402      	add	r2, r0
 8004890:	4603      	mov	r3, r0
 8004892:	4293      	cmp	r3, r2
 8004894:	d100      	bne.n	8004898 <memset+0xa>
 8004896:	4770      	bx	lr
 8004898:	f803 1b01 	strb.w	r1, [r3], #1
 800489c:	e7f9      	b.n	8004892 <memset+0x4>
	...

080048a0 <_close_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4d06      	ldr	r5, [pc, #24]	; (80048bc <_close_r+0x1c>)
 80048a4:	2300      	movs	r3, #0
 80048a6:	4604      	mov	r4, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	f7fc fc39 	bl	8001122 <_close>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_close_r+0x1a>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_close_r+0x1a>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	2000026c 	.word	0x2000026c

080048c0 <_lseek_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	; (80048e0 <_lseek_r+0x20>)
 80048c4:	4604      	mov	r4, r0
 80048c6:	4608      	mov	r0, r1
 80048c8:	4611      	mov	r1, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fc fc4e 	bl	8001170 <_lseek>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_lseek_r+0x1e>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_lseek_r+0x1e>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	2000026c 	.word	0x2000026c

080048e4 <_read_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d07      	ldr	r5, [pc, #28]	; (8004904 <_read_r+0x20>)
 80048e8:	4604      	mov	r4, r0
 80048ea:	4608      	mov	r0, r1
 80048ec:	4611      	mov	r1, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7fc fbdc 	bl	80010b0 <_read>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_read_r+0x1e>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_read_r+0x1e>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	2000026c 	.word	0x2000026c

08004908 <_write_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	; (8004928 <_write_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fbe7 	bl	80010ea <_write>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_write_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_write_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	2000026c 	.word	0x2000026c

0800492c <__errno>:
 800492c:	4b01      	ldr	r3, [pc, #4]	; (8004934 <__errno+0x8>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000064 	.word	0x20000064

08004938 <__libc_init_array>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4d0d      	ldr	r5, [pc, #52]	; (8004970 <__libc_init_array+0x38>)
 800493c:	4c0d      	ldr	r4, [pc, #52]	; (8004974 <__libc_init_array+0x3c>)
 800493e:	1b64      	subs	r4, r4, r5
 8004940:	10a4      	asrs	r4, r4, #2
 8004942:	2600      	movs	r6, #0
 8004944:	42a6      	cmp	r6, r4
 8004946:	d109      	bne.n	800495c <__libc_init_array+0x24>
 8004948:	4d0b      	ldr	r5, [pc, #44]	; (8004978 <__libc_init_array+0x40>)
 800494a:	4c0c      	ldr	r4, [pc, #48]	; (800497c <__libc_init_array+0x44>)
 800494c:	f000 fffa 	bl	8005944 <_init>
 8004950:	1b64      	subs	r4, r4, r5
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	2600      	movs	r6, #0
 8004956:	42a6      	cmp	r6, r4
 8004958:	d105      	bne.n	8004966 <__libc_init_array+0x2e>
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004960:	4798      	blx	r3
 8004962:	3601      	adds	r6, #1
 8004964:	e7ee      	b.n	8004944 <__libc_init_array+0xc>
 8004966:	f855 3b04 	ldr.w	r3, [r5], #4
 800496a:	4798      	blx	r3
 800496c:	3601      	adds	r6, #1
 800496e:	e7f2      	b.n	8004956 <__libc_init_array+0x1e>
 8004970:	08005b20 	.word	0x08005b20
 8004974:	08005b20 	.word	0x08005b20
 8004978:	08005b20 	.word	0x08005b20
 800497c:	08005b24 	.word	0x08005b24

08004980 <__retarget_lock_init_recursive>:
 8004980:	4770      	bx	lr

08004982 <__retarget_lock_acquire_recursive>:
 8004982:	4770      	bx	lr

08004984 <__retarget_lock_release_recursive>:
 8004984:	4770      	bx	lr
	...

08004988 <__assert_func>:
 8004988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800498a:	4614      	mov	r4, r2
 800498c:	461a      	mov	r2, r3
 800498e:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <__assert_func+0x2c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4605      	mov	r5, r0
 8004994:	68d8      	ldr	r0, [r3, #12]
 8004996:	b14c      	cbz	r4, 80049ac <__assert_func+0x24>
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <__assert_func+0x30>)
 800499a:	9100      	str	r1, [sp, #0]
 800499c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049a0:	4906      	ldr	r1, [pc, #24]	; (80049bc <__assert_func+0x34>)
 80049a2:	462b      	mov	r3, r5
 80049a4:	f000 fca4 	bl	80052f0 <fiprintf>
 80049a8:	f000 fcec 	bl	8005384 <abort>
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <__assert_func+0x38>)
 80049ae:	461c      	mov	r4, r3
 80049b0:	e7f3      	b.n	800499a <__assert_func+0x12>
 80049b2:	bf00      	nop
 80049b4:	20000064 	.word	0x20000064
 80049b8:	08005aaf 	.word	0x08005aaf
 80049bc:	08005abc 	.word	0x08005abc
 80049c0:	08005aea 	.word	0x08005aea

080049c4 <_free_r>:
 80049c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049c6:	2900      	cmp	r1, #0
 80049c8:	d044      	beq.n	8004a54 <_free_r+0x90>
 80049ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ce:	9001      	str	r0, [sp, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f1a1 0404 	sub.w	r4, r1, #4
 80049d6:	bfb8      	it	lt
 80049d8:	18e4      	addlt	r4, r4, r3
 80049da:	f000 f8e7 	bl	8004bac <__malloc_lock>
 80049de:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <_free_r+0x94>)
 80049e0:	9801      	ldr	r0, [sp, #4]
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	b933      	cbnz	r3, 80049f4 <_free_r+0x30>
 80049e6:	6063      	str	r3, [r4, #4]
 80049e8:	6014      	str	r4, [r2, #0]
 80049ea:	b003      	add	sp, #12
 80049ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049f0:	f000 b8e2 	b.w	8004bb8 <__malloc_unlock>
 80049f4:	42a3      	cmp	r3, r4
 80049f6:	d908      	bls.n	8004a0a <_free_r+0x46>
 80049f8:	6825      	ldr	r5, [r4, #0]
 80049fa:	1961      	adds	r1, r4, r5
 80049fc:	428b      	cmp	r3, r1
 80049fe:	bf01      	itttt	eq
 8004a00:	6819      	ldreq	r1, [r3, #0]
 8004a02:	685b      	ldreq	r3, [r3, #4]
 8004a04:	1949      	addeq	r1, r1, r5
 8004a06:	6021      	streq	r1, [r4, #0]
 8004a08:	e7ed      	b.n	80049e6 <_free_r+0x22>
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	b10b      	cbz	r3, 8004a14 <_free_r+0x50>
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d9fa      	bls.n	8004a0a <_free_r+0x46>
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	1855      	adds	r5, r2, r1
 8004a18:	42a5      	cmp	r5, r4
 8004a1a:	d10b      	bne.n	8004a34 <_free_r+0x70>
 8004a1c:	6824      	ldr	r4, [r4, #0]
 8004a1e:	4421      	add	r1, r4
 8004a20:	1854      	adds	r4, r2, r1
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	6011      	str	r1, [r2, #0]
 8004a26:	d1e0      	bne.n	80049ea <_free_r+0x26>
 8004a28:	681c      	ldr	r4, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	6053      	str	r3, [r2, #4]
 8004a2e:	440c      	add	r4, r1
 8004a30:	6014      	str	r4, [r2, #0]
 8004a32:	e7da      	b.n	80049ea <_free_r+0x26>
 8004a34:	d902      	bls.n	8004a3c <_free_r+0x78>
 8004a36:	230c      	movs	r3, #12
 8004a38:	6003      	str	r3, [r0, #0]
 8004a3a:	e7d6      	b.n	80049ea <_free_r+0x26>
 8004a3c:	6825      	ldr	r5, [r4, #0]
 8004a3e:	1961      	adds	r1, r4, r5
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf04      	itt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	6063      	str	r3, [r4, #4]
 8004a4a:	bf04      	itt	eq
 8004a4c:	1949      	addeq	r1, r1, r5
 8004a4e:	6021      	streq	r1, [r4, #0]
 8004a50:	6054      	str	r4, [r2, #4]
 8004a52:	e7ca      	b.n	80049ea <_free_r+0x26>
 8004a54:	b003      	add	sp, #12
 8004a56:	bd30      	pop	{r4, r5, pc}
 8004a58:	20000274 	.word	0x20000274

08004a5c <malloc>:
 8004a5c:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <malloc+0xc>)
 8004a5e:	4601      	mov	r1, r0
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	f000 b823 	b.w	8004aac <_malloc_r>
 8004a66:	bf00      	nop
 8004a68:	20000064 	.word	0x20000064

08004a6c <sbrk_aligned>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	4e0e      	ldr	r6, [pc, #56]	; (8004aa8 <sbrk_aligned+0x3c>)
 8004a70:	460c      	mov	r4, r1
 8004a72:	6831      	ldr	r1, [r6, #0]
 8004a74:	4605      	mov	r5, r0
 8004a76:	b911      	cbnz	r1, 8004a7e <sbrk_aligned+0x12>
 8004a78:	f000 fc66 	bl	8005348 <_sbrk_r>
 8004a7c:	6030      	str	r0, [r6, #0]
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4628      	mov	r0, r5
 8004a82:	f000 fc61 	bl	8005348 <_sbrk_r>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d00a      	beq.n	8004aa0 <sbrk_aligned+0x34>
 8004a8a:	1cc4      	adds	r4, r0, #3
 8004a8c:	f024 0403 	bic.w	r4, r4, #3
 8004a90:	42a0      	cmp	r0, r4
 8004a92:	d007      	beq.n	8004aa4 <sbrk_aligned+0x38>
 8004a94:	1a21      	subs	r1, r4, r0
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 fc56 	bl	8005348 <_sbrk_r>
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d101      	bne.n	8004aa4 <sbrk_aligned+0x38>
 8004aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	20000278 	.word	0x20000278

08004aac <_malloc_r>:
 8004aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab0:	1ccd      	adds	r5, r1, #3
 8004ab2:	f025 0503 	bic.w	r5, r5, #3
 8004ab6:	3508      	adds	r5, #8
 8004ab8:	2d0c      	cmp	r5, #12
 8004aba:	bf38      	it	cc
 8004abc:	250c      	movcc	r5, #12
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	db01      	blt.n	8004ac8 <_malloc_r+0x1c>
 8004ac4:	42a9      	cmp	r1, r5
 8004ac6:	d905      	bls.n	8004ad4 <_malloc_r+0x28>
 8004ac8:	230c      	movs	r3, #12
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	2600      	movs	r6, #0
 8004ace:	4630      	mov	r0, r6
 8004ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ba8 <_malloc_r+0xfc>
 8004ad8:	f000 f868 	bl	8004bac <__malloc_lock>
 8004adc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae0:	461c      	mov	r4, r3
 8004ae2:	bb5c      	cbnz	r4, 8004b3c <_malloc_r+0x90>
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f7ff ffc0 	bl	8004a6c <sbrk_aligned>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	4604      	mov	r4, r0
 8004af0:	d155      	bne.n	8004b9e <_malloc_r+0xf2>
 8004af2:	f8d8 4000 	ldr.w	r4, [r8]
 8004af6:	4626      	mov	r6, r4
 8004af8:	2e00      	cmp	r6, #0
 8004afa:	d145      	bne.n	8004b88 <_malloc_r+0xdc>
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	d048      	beq.n	8004b92 <_malloc_r+0xe6>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	4631      	mov	r1, r6
 8004b04:	4638      	mov	r0, r7
 8004b06:	eb04 0903 	add.w	r9, r4, r3
 8004b0a:	f000 fc1d 	bl	8005348 <_sbrk_r>
 8004b0e:	4581      	cmp	r9, r0
 8004b10:	d13f      	bne.n	8004b92 <_malloc_r+0xe6>
 8004b12:	6821      	ldr	r1, [r4, #0]
 8004b14:	1a6d      	subs	r5, r5, r1
 8004b16:	4629      	mov	r1, r5
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f7ff ffa7 	bl	8004a6c <sbrk_aligned>
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d037      	beq.n	8004b92 <_malloc_r+0xe6>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	442b      	add	r3, r5
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	f8d8 3000 	ldr.w	r3, [r8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d038      	beq.n	8004ba2 <_malloc_r+0xf6>
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	42a2      	cmp	r2, r4
 8004b34:	d12b      	bne.n	8004b8e <_malloc_r+0xe2>
 8004b36:	2200      	movs	r2, #0
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	e00f      	b.n	8004b5c <_malloc_r+0xb0>
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	1b52      	subs	r2, r2, r5
 8004b40:	d41f      	bmi.n	8004b82 <_malloc_r+0xd6>
 8004b42:	2a0b      	cmp	r2, #11
 8004b44:	d917      	bls.n	8004b76 <_malloc_r+0xca>
 8004b46:	1961      	adds	r1, r4, r5
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	6025      	str	r5, [r4, #0]
 8004b4c:	bf18      	it	ne
 8004b4e:	6059      	strne	r1, [r3, #4]
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	bf08      	it	eq
 8004b54:	f8c8 1000 	streq.w	r1, [r8]
 8004b58:	5162      	str	r2, [r4, r5]
 8004b5a:	604b      	str	r3, [r1, #4]
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f104 060b 	add.w	r6, r4, #11
 8004b62:	f000 f829 	bl	8004bb8 <__malloc_unlock>
 8004b66:	f026 0607 	bic.w	r6, r6, #7
 8004b6a:	1d23      	adds	r3, r4, #4
 8004b6c:	1af2      	subs	r2, r6, r3
 8004b6e:	d0ae      	beq.n	8004ace <_malloc_r+0x22>
 8004b70:	1b9b      	subs	r3, r3, r6
 8004b72:	50a3      	str	r3, [r4, r2]
 8004b74:	e7ab      	b.n	8004ace <_malloc_r+0x22>
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	6862      	ldr	r2, [r4, #4]
 8004b7a:	d1dd      	bne.n	8004b38 <_malloc_r+0x8c>
 8004b7c:	f8c8 2000 	str.w	r2, [r8]
 8004b80:	e7ec      	b.n	8004b5c <_malloc_r+0xb0>
 8004b82:	4623      	mov	r3, r4
 8004b84:	6864      	ldr	r4, [r4, #4]
 8004b86:	e7ac      	b.n	8004ae2 <_malloc_r+0x36>
 8004b88:	4634      	mov	r4, r6
 8004b8a:	6876      	ldr	r6, [r6, #4]
 8004b8c:	e7b4      	b.n	8004af8 <_malloc_r+0x4c>
 8004b8e:	4613      	mov	r3, r2
 8004b90:	e7cc      	b.n	8004b2c <_malloc_r+0x80>
 8004b92:	230c      	movs	r3, #12
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4638      	mov	r0, r7
 8004b98:	f000 f80e 	bl	8004bb8 <__malloc_unlock>
 8004b9c:	e797      	b.n	8004ace <_malloc_r+0x22>
 8004b9e:	6025      	str	r5, [r4, #0]
 8004ba0:	e7dc      	b.n	8004b5c <_malloc_r+0xb0>
 8004ba2:	605b      	str	r3, [r3, #4]
 8004ba4:	deff      	udf	#255	; 0xff
 8004ba6:	bf00      	nop
 8004ba8:	20000274 	.word	0x20000274

08004bac <__malloc_lock>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__malloc_lock+0x8>)
 8004bae:	f7ff bee8 	b.w	8004982 <__retarget_lock_acquire_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000270 	.word	0x20000270

08004bb8 <__malloc_unlock>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__malloc_unlock+0x8>)
 8004bba:	f7ff bee3 	b.w	8004984 <__retarget_lock_release_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20000270 	.word	0x20000270

08004bc4 <__ssputs_r>:
 8004bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	688e      	ldr	r6, [r1, #8]
 8004bca:	461f      	mov	r7, r3
 8004bcc:	42be      	cmp	r6, r7
 8004bce:	680b      	ldr	r3, [r1, #0]
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4690      	mov	r8, r2
 8004bd6:	d82c      	bhi.n	8004c32 <__ssputs_r+0x6e>
 8004bd8:	898a      	ldrh	r2, [r1, #12]
 8004bda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bde:	d026      	beq.n	8004c2e <__ssputs_r+0x6a>
 8004be0:	6965      	ldr	r5, [r4, #20]
 8004be2:	6909      	ldr	r1, [r1, #16]
 8004be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be8:	eba3 0901 	sub.w	r9, r3, r1
 8004bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf0:	1c7b      	adds	r3, r7, #1
 8004bf2:	444b      	add	r3, r9
 8004bf4:	106d      	asrs	r5, r5, #1
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	bf38      	it	cc
 8004bfa:	461d      	movcc	r5, r3
 8004bfc:	0553      	lsls	r3, r2, #21
 8004bfe:	d527      	bpl.n	8004c50 <__ssputs_r+0x8c>
 8004c00:	4629      	mov	r1, r5
 8004c02:	f7ff ff53 	bl	8004aac <_malloc_r>
 8004c06:	4606      	mov	r6, r0
 8004c08:	b360      	cbz	r0, 8004c64 <__ssputs_r+0xa0>
 8004c0a:	6921      	ldr	r1, [r4, #16]
 8004c0c:	464a      	mov	r2, r9
 8004c0e:	f000 fbab 	bl	8005368 <memcpy>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	6126      	str	r6, [r4, #16]
 8004c20:	6165      	str	r5, [r4, #20]
 8004c22:	444e      	add	r6, r9
 8004c24:	eba5 0509 	sub.w	r5, r5, r9
 8004c28:	6026      	str	r6, [r4, #0]
 8004c2a:	60a5      	str	r5, [r4, #8]
 8004c2c:	463e      	mov	r6, r7
 8004c2e:	42be      	cmp	r6, r7
 8004c30:	d900      	bls.n	8004c34 <__ssputs_r+0x70>
 8004c32:	463e      	mov	r6, r7
 8004c34:	6820      	ldr	r0, [r4, #0]
 8004c36:	4632      	mov	r2, r6
 8004c38:	4641      	mov	r1, r8
 8004c3a:	f000 fb6b 	bl	8005314 <memmove>
 8004c3e:	68a3      	ldr	r3, [r4, #8]
 8004c40:	1b9b      	subs	r3, r3, r6
 8004c42:	60a3      	str	r3, [r4, #8]
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	4433      	add	r3, r6
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c50:	462a      	mov	r2, r5
 8004c52:	f000 fb9e 	bl	8005392 <_realloc_r>
 8004c56:	4606      	mov	r6, r0
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1e0      	bne.n	8004c1e <__ssputs_r+0x5a>
 8004c5c:	6921      	ldr	r1, [r4, #16]
 8004c5e:	4650      	mov	r0, sl
 8004c60:	f7ff feb0 	bl	80049c4 <_free_r>
 8004c64:	230c      	movs	r3, #12
 8004c66:	f8ca 3000 	str.w	r3, [sl]
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
 8004c76:	e7e9      	b.n	8004c4c <__ssputs_r+0x88>

08004c78 <_svfiprintf_r>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	4698      	mov	r8, r3
 8004c7e:	898b      	ldrh	r3, [r1, #12]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	b09d      	sub	sp, #116	; 0x74
 8004c84:	4607      	mov	r7, r0
 8004c86:	460d      	mov	r5, r1
 8004c88:	4614      	mov	r4, r2
 8004c8a:	d50e      	bpl.n	8004caa <_svfiprintf_r+0x32>
 8004c8c:	690b      	ldr	r3, [r1, #16]
 8004c8e:	b963      	cbnz	r3, 8004caa <_svfiprintf_r+0x32>
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	f7ff ff0b 	bl	8004aac <_malloc_r>
 8004c96:	6028      	str	r0, [r5, #0]
 8004c98:	6128      	str	r0, [r5, #16]
 8004c9a:	b920      	cbnz	r0, 8004ca6 <_svfiprintf_r+0x2e>
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	e0d0      	b.n	8004e48 <_svfiprintf_r+0x1d0>
 8004ca6:	2340      	movs	r3, #64	; 0x40
 8004ca8:	616b      	str	r3, [r5, #20]
 8004caa:	2300      	movs	r3, #0
 8004cac:	9309      	str	r3, [sp, #36]	; 0x24
 8004cae:	2320      	movs	r3, #32
 8004cb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cb8:	2330      	movs	r3, #48	; 0x30
 8004cba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e60 <_svfiprintf_r+0x1e8>
 8004cbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cc2:	f04f 0901 	mov.w	r9, #1
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	469a      	mov	sl, r3
 8004cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cce:	b10a      	cbz	r2, 8004cd4 <_svfiprintf_r+0x5c>
 8004cd0:	2a25      	cmp	r2, #37	; 0x25
 8004cd2:	d1f9      	bne.n	8004cc8 <_svfiprintf_r+0x50>
 8004cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004cd8:	d00b      	beq.n	8004cf2 <_svfiprintf_r+0x7a>
 8004cda:	465b      	mov	r3, fp
 8004cdc:	4622      	mov	r2, r4
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f7ff ff6f 	bl	8004bc4 <__ssputs_r>
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f000 80a9 	beq.w	8004e3e <_svfiprintf_r+0x1c6>
 8004cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cee:	445a      	add	r2, fp
 8004cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80a1 	beq.w	8004e3e <_svfiprintf_r+0x1c6>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d06:	f10a 0a01 	add.w	sl, sl, #1
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	9307      	str	r3, [sp, #28]
 8004d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d12:	931a      	str	r3, [sp, #104]	; 0x68
 8004d14:	4654      	mov	r4, sl
 8004d16:	2205      	movs	r2, #5
 8004d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d1c:	4850      	ldr	r0, [pc, #320]	; (8004e60 <_svfiprintf_r+0x1e8>)
 8004d1e:	f7fb fa57 	bl	80001d0 <memchr>
 8004d22:	9a04      	ldr	r2, [sp, #16]
 8004d24:	b9d8      	cbnz	r0, 8004d5e <_svfiprintf_r+0xe6>
 8004d26:	06d0      	lsls	r0, r2, #27
 8004d28:	bf44      	itt	mi
 8004d2a:	2320      	movmi	r3, #32
 8004d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d30:	0711      	lsls	r1, r2, #28
 8004d32:	bf44      	itt	mi
 8004d34:	232b      	movmi	r3, #43	; 0x2b
 8004d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d40:	d015      	beq.n	8004d6e <_svfiprintf_r+0xf6>
 8004d42:	9a07      	ldr	r2, [sp, #28]
 8004d44:	4654      	mov	r4, sl
 8004d46:	2000      	movs	r0, #0
 8004d48:	f04f 0c0a 	mov.w	ip, #10
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d52:	3b30      	subs	r3, #48	; 0x30
 8004d54:	2b09      	cmp	r3, #9
 8004d56:	d94d      	bls.n	8004df4 <_svfiprintf_r+0x17c>
 8004d58:	b1b0      	cbz	r0, 8004d88 <_svfiprintf_r+0x110>
 8004d5a:	9207      	str	r2, [sp, #28]
 8004d5c:	e014      	b.n	8004d88 <_svfiprintf_r+0x110>
 8004d5e:	eba0 0308 	sub.w	r3, r0, r8
 8004d62:	fa09 f303 	lsl.w	r3, r9, r3
 8004d66:	4313      	orrs	r3, r2
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	46a2      	mov	sl, r4
 8004d6c:	e7d2      	b.n	8004d14 <_svfiprintf_r+0x9c>
 8004d6e:	9b03      	ldr	r3, [sp, #12]
 8004d70:	1d19      	adds	r1, r3, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	9103      	str	r1, [sp, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bfbb      	ittet	lt
 8004d7a:	425b      	neglt	r3, r3
 8004d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d80:	9307      	strge	r3, [sp, #28]
 8004d82:	9307      	strlt	r3, [sp, #28]
 8004d84:	bfb8      	it	lt
 8004d86:	9204      	strlt	r2, [sp, #16]
 8004d88:	7823      	ldrb	r3, [r4, #0]
 8004d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d8c:	d10c      	bne.n	8004da8 <_svfiprintf_r+0x130>
 8004d8e:	7863      	ldrb	r3, [r4, #1]
 8004d90:	2b2a      	cmp	r3, #42	; 0x2a
 8004d92:	d134      	bne.n	8004dfe <_svfiprintf_r+0x186>
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	9203      	str	r2, [sp, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bfb8      	it	lt
 8004da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004da4:	3402      	adds	r4, #2
 8004da6:	9305      	str	r3, [sp, #20]
 8004da8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e70 <_svfiprintf_r+0x1f8>
 8004dac:	7821      	ldrb	r1, [r4, #0]
 8004dae:	2203      	movs	r2, #3
 8004db0:	4650      	mov	r0, sl
 8004db2:	f7fb fa0d 	bl	80001d0 <memchr>
 8004db6:	b138      	cbz	r0, 8004dc8 <_svfiprintf_r+0x150>
 8004db8:	9b04      	ldr	r3, [sp, #16]
 8004dba:	eba0 000a 	sub.w	r0, r0, sl
 8004dbe:	2240      	movs	r2, #64	; 0x40
 8004dc0:	4082      	lsls	r2, r0
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	3401      	adds	r4, #1
 8004dc6:	9304      	str	r3, [sp, #16]
 8004dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dcc:	4825      	ldr	r0, [pc, #148]	; (8004e64 <_svfiprintf_r+0x1ec>)
 8004dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dd2:	2206      	movs	r2, #6
 8004dd4:	f7fb f9fc 	bl	80001d0 <memchr>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d038      	beq.n	8004e4e <_svfiprintf_r+0x1d6>
 8004ddc:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <_svfiprintf_r+0x1f0>)
 8004dde:	bb1b      	cbnz	r3, 8004e28 <_svfiprintf_r+0x1b0>
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	3307      	adds	r3, #7
 8004de4:	f023 0307 	bic.w	r3, r3, #7
 8004de8:	3308      	adds	r3, #8
 8004dea:	9303      	str	r3, [sp, #12]
 8004dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dee:	4433      	add	r3, r6
 8004df0:	9309      	str	r3, [sp, #36]	; 0x24
 8004df2:	e768      	b.n	8004cc6 <_svfiprintf_r+0x4e>
 8004df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004df8:	460c      	mov	r4, r1
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	e7a6      	b.n	8004d4c <_svfiprintf_r+0xd4>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	3401      	adds	r4, #1
 8004e02:	9305      	str	r3, [sp, #20]
 8004e04:	4619      	mov	r1, r3
 8004e06:	f04f 0c0a 	mov.w	ip, #10
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e10:	3a30      	subs	r2, #48	; 0x30
 8004e12:	2a09      	cmp	r2, #9
 8004e14:	d903      	bls.n	8004e1e <_svfiprintf_r+0x1a6>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0c6      	beq.n	8004da8 <_svfiprintf_r+0x130>
 8004e1a:	9105      	str	r1, [sp, #20]
 8004e1c:	e7c4      	b.n	8004da8 <_svfiprintf_r+0x130>
 8004e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e22:	4604      	mov	r4, r0
 8004e24:	2301      	movs	r3, #1
 8004e26:	e7f0      	b.n	8004e0a <_svfiprintf_r+0x192>
 8004e28:	ab03      	add	r3, sp, #12
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <_svfiprintf_r+0x1f4>)
 8004e30:	a904      	add	r1, sp, #16
 8004e32:	4638      	mov	r0, r7
 8004e34:	f3af 8000 	nop.w
 8004e38:	1c42      	adds	r2, r0, #1
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	d1d6      	bne.n	8004dec <_svfiprintf_r+0x174>
 8004e3e:	89ab      	ldrh	r3, [r5, #12]
 8004e40:	065b      	lsls	r3, r3, #25
 8004e42:	f53f af2d 	bmi.w	8004ca0 <_svfiprintf_r+0x28>
 8004e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e48:	b01d      	add	sp, #116	; 0x74
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	ab03      	add	r3, sp, #12
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	462a      	mov	r2, r5
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <_svfiprintf_r+0x1f4>)
 8004e56:	a904      	add	r1, sp, #16
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f000 f879 	bl	8004f50 <_printf_i>
 8004e5e:	e7eb      	b.n	8004e38 <_svfiprintf_r+0x1c0>
 8004e60:	08005aeb 	.word	0x08005aeb
 8004e64:	08005af5 	.word	0x08005af5
 8004e68:	00000000 	.word	0x00000000
 8004e6c:	08004bc5 	.word	0x08004bc5
 8004e70:	08005af1 	.word	0x08005af1

08004e74 <_printf_common>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	4616      	mov	r6, r2
 8004e7a:	4699      	mov	r9, r3
 8004e7c:	688a      	ldr	r2, [r1, #8]
 8004e7e:	690b      	ldr	r3, [r1, #16]
 8004e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e84:	4293      	cmp	r3, r2
 8004e86:	bfb8      	it	lt
 8004e88:	4613      	movlt	r3, r2
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e90:	4607      	mov	r7, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b10a      	cbz	r2, 8004e9a <_printf_common+0x26>
 8004e96:	3301      	adds	r3, #1
 8004e98:	6033      	str	r3, [r6, #0]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	0699      	lsls	r1, r3, #26
 8004e9e:	bf42      	ittt	mi
 8004ea0:	6833      	ldrmi	r3, [r6, #0]
 8004ea2:	3302      	addmi	r3, #2
 8004ea4:	6033      	strmi	r3, [r6, #0]
 8004ea6:	6825      	ldr	r5, [r4, #0]
 8004ea8:	f015 0506 	ands.w	r5, r5, #6
 8004eac:	d106      	bne.n	8004ebc <_printf_common+0x48>
 8004eae:	f104 0a19 	add.w	sl, r4, #25
 8004eb2:	68e3      	ldr	r3, [r4, #12]
 8004eb4:	6832      	ldr	r2, [r6, #0]
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	42ab      	cmp	r3, r5
 8004eba:	dc26      	bgt.n	8004f0a <_printf_common+0x96>
 8004ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ec0:	1e13      	subs	r3, r2, #0
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	bf18      	it	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	0692      	lsls	r2, r2, #26
 8004eca:	d42b      	bmi.n	8004f24 <_printf_common+0xb0>
 8004ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	47c0      	blx	r8
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d01e      	beq.n	8004f18 <_printf_common+0xa4>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	f003 0306 	and.w	r3, r3, #6
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	bf02      	ittt	eq
 8004ee6:	68e5      	ldreq	r5, [r4, #12]
 8004ee8:	6833      	ldreq	r3, [r6, #0]
 8004eea:	1aed      	subeq	r5, r5, r3
 8004eec:	68a3      	ldr	r3, [r4, #8]
 8004eee:	bf0c      	ite	eq
 8004ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef4:	2500      	movne	r5, #0
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bfc4      	itt	gt
 8004efa:	1a9b      	subgt	r3, r3, r2
 8004efc:	18ed      	addgt	r5, r5, r3
 8004efe:	2600      	movs	r6, #0
 8004f00:	341a      	adds	r4, #26
 8004f02:	42b5      	cmp	r5, r6
 8004f04:	d11a      	bne.n	8004f3c <_printf_common+0xc8>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e008      	b.n	8004f1c <_printf_common+0xa8>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4652      	mov	r2, sl
 8004f0e:	4649      	mov	r1, r9
 8004f10:	4638      	mov	r0, r7
 8004f12:	47c0      	blx	r8
 8004f14:	3001      	adds	r0, #1
 8004f16:	d103      	bne.n	8004f20 <_printf_common+0xac>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f20:	3501      	adds	r5, #1
 8004f22:	e7c6      	b.n	8004eb2 <_printf_common+0x3e>
 8004f24:	18e1      	adds	r1, r4, r3
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	2030      	movs	r0, #48	; 0x30
 8004f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f2e:	4422      	add	r2, r4
 8004f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f38:	3302      	adds	r3, #2
 8004f3a:	e7c7      	b.n	8004ecc <_printf_common+0x58>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4622      	mov	r2, r4
 8004f40:	4649      	mov	r1, r9
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c0      	blx	r8
 8004f46:	3001      	adds	r0, #1
 8004f48:	d0e6      	beq.n	8004f18 <_printf_common+0xa4>
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7d9      	b.n	8004f02 <_printf_common+0x8e>
	...

08004f50 <_printf_i>:
 8004f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	7e0f      	ldrb	r7, [r1, #24]
 8004f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f58:	2f78      	cmp	r7, #120	; 0x78
 8004f5a:	4691      	mov	r9, r2
 8004f5c:	4680      	mov	r8, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	469a      	mov	sl, r3
 8004f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f66:	d807      	bhi.n	8004f78 <_printf_i+0x28>
 8004f68:	2f62      	cmp	r7, #98	; 0x62
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x32>
 8004f6c:	2f00      	cmp	r7, #0
 8004f6e:	f000 80d4 	beq.w	800511a <_printf_i+0x1ca>
 8004f72:	2f58      	cmp	r7, #88	; 0x58
 8004f74:	f000 80c0 	beq.w	80050f8 <_printf_i+0x1a8>
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f80:	e03a      	b.n	8004ff8 <_printf_i+0xa8>
 8004f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f86:	2b15      	cmp	r3, #21
 8004f88:	d8f6      	bhi.n	8004f78 <_printf_i+0x28>
 8004f8a:	a101      	add	r1, pc, #4	; (adr r1, 8004f90 <_printf_i+0x40>)
 8004f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	08004f79 	.word	0x08004f79
 8004f9c:	08004f79 	.word	0x08004f79
 8004fa0:	08004f79 	.word	0x08004f79
 8004fa4:	08004f79 	.word	0x08004f79
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004f79 	.word	0x08004f79
 8004fb0:	08004f79 	.word	0x08004f79
 8004fb4:	08004f79 	.word	0x08004f79
 8004fb8:	08004f79 	.word	0x08004f79
 8004fbc:	08005101 	.word	0x08005101
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	080050bb 	.word	0x080050bb
 8004fc8:	08004f79 	.word	0x08004f79
 8004fcc:	08004f79 	.word	0x08004f79
 8004fd0:	08005123 	.word	0x08005123
 8004fd4:	08004f79 	.word	0x08004f79
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	08004f79 	.word	0x08004f79
 8004fe0:	08004f79 	.word	0x08004f79
 8004fe4:	080050c3 	.word	0x080050c3
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e09f      	b.n	800513c <_printf_i+0x1ec>
 8004ffc:	6820      	ldr	r0, [r4, #0]
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	0607      	lsls	r7, r0, #24
 8005002:	f103 0104 	add.w	r1, r3, #4
 8005006:	6029      	str	r1, [r5, #0]
 8005008:	d501      	bpl.n	800500e <_printf_i+0xbe>
 800500a:	681e      	ldr	r6, [r3, #0]
 800500c:	e003      	b.n	8005016 <_printf_i+0xc6>
 800500e:	0646      	lsls	r6, r0, #25
 8005010:	d5fb      	bpl.n	800500a <_printf_i+0xba>
 8005012:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005016:	2e00      	cmp	r6, #0
 8005018:	da03      	bge.n	8005022 <_printf_i+0xd2>
 800501a:	232d      	movs	r3, #45	; 0x2d
 800501c:	4276      	negs	r6, r6
 800501e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005022:	485a      	ldr	r0, [pc, #360]	; (800518c <_printf_i+0x23c>)
 8005024:	230a      	movs	r3, #10
 8005026:	e012      	b.n	800504e <_printf_i+0xfe>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	1d19      	adds	r1, r3, #4
 800502e:	6029      	str	r1, [r5, #0]
 8005030:	0605      	lsls	r5, r0, #24
 8005032:	d501      	bpl.n	8005038 <_printf_i+0xe8>
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	e002      	b.n	800503e <_printf_i+0xee>
 8005038:	0641      	lsls	r1, r0, #25
 800503a:	d5fb      	bpl.n	8005034 <_printf_i+0xe4>
 800503c:	881e      	ldrh	r6, [r3, #0]
 800503e:	4853      	ldr	r0, [pc, #332]	; (800518c <_printf_i+0x23c>)
 8005040:	2f6f      	cmp	r7, #111	; 0x6f
 8005042:	bf0c      	ite	eq
 8005044:	2308      	moveq	r3, #8
 8005046:	230a      	movne	r3, #10
 8005048:	2100      	movs	r1, #0
 800504a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504e:	6865      	ldr	r5, [r4, #4]
 8005050:	60a5      	str	r5, [r4, #8]
 8005052:	2d00      	cmp	r5, #0
 8005054:	bfa2      	ittt	ge
 8005056:	6821      	ldrge	r1, [r4, #0]
 8005058:	f021 0104 	bicge.w	r1, r1, #4
 800505c:	6021      	strge	r1, [r4, #0]
 800505e:	b90e      	cbnz	r6, 8005064 <_printf_i+0x114>
 8005060:	2d00      	cmp	r5, #0
 8005062:	d04b      	beq.n	80050fc <_printf_i+0x1ac>
 8005064:	4615      	mov	r5, r2
 8005066:	fbb6 f1f3 	udiv	r1, r6, r3
 800506a:	fb03 6711 	mls	r7, r3, r1, r6
 800506e:	5dc7      	ldrb	r7, [r0, r7]
 8005070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005074:	4637      	mov	r7, r6
 8005076:	42bb      	cmp	r3, r7
 8005078:	460e      	mov	r6, r1
 800507a:	d9f4      	bls.n	8005066 <_printf_i+0x116>
 800507c:	2b08      	cmp	r3, #8
 800507e:	d10b      	bne.n	8005098 <_printf_i+0x148>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	07de      	lsls	r6, r3, #31
 8005084:	d508      	bpl.n	8005098 <_printf_i+0x148>
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	6861      	ldr	r1, [r4, #4]
 800508a:	4299      	cmp	r1, r3
 800508c:	bfde      	ittt	le
 800508e:	2330      	movle	r3, #48	; 0x30
 8005090:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005094:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005098:	1b52      	subs	r2, r2, r5
 800509a:	6122      	str	r2, [r4, #16]
 800509c:	f8cd a000 	str.w	sl, [sp]
 80050a0:	464b      	mov	r3, r9
 80050a2:	aa03      	add	r2, sp, #12
 80050a4:	4621      	mov	r1, r4
 80050a6:	4640      	mov	r0, r8
 80050a8:	f7ff fee4 	bl	8004e74 <_printf_common>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d14a      	bne.n	8005146 <_printf_i+0x1f6>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	b004      	add	sp, #16
 80050b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f043 0320 	orr.w	r3, r3, #32
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	4833      	ldr	r0, [pc, #204]	; (8005190 <_printf_i+0x240>)
 80050c4:	2778      	movs	r7, #120	; 0x78
 80050c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	6829      	ldr	r1, [r5, #0]
 80050ce:	061f      	lsls	r7, r3, #24
 80050d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80050d4:	d402      	bmi.n	80050dc <_printf_i+0x18c>
 80050d6:	065f      	lsls	r7, r3, #25
 80050d8:	bf48      	it	mi
 80050da:	b2b6      	uxthmi	r6, r6
 80050dc:	07df      	lsls	r7, r3, #31
 80050de:	bf48      	it	mi
 80050e0:	f043 0320 	orrmi.w	r3, r3, #32
 80050e4:	6029      	str	r1, [r5, #0]
 80050e6:	bf48      	it	mi
 80050e8:	6023      	strmi	r3, [r4, #0]
 80050ea:	b91e      	cbnz	r6, 80050f4 <_printf_i+0x1a4>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	f023 0320 	bic.w	r3, r3, #32
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	2310      	movs	r3, #16
 80050f6:	e7a7      	b.n	8005048 <_printf_i+0xf8>
 80050f8:	4824      	ldr	r0, [pc, #144]	; (800518c <_printf_i+0x23c>)
 80050fa:	e7e4      	b.n	80050c6 <_printf_i+0x176>
 80050fc:	4615      	mov	r5, r2
 80050fe:	e7bd      	b.n	800507c <_printf_i+0x12c>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	6826      	ldr	r6, [r4, #0]
 8005104:	6961      	ldr	r1, [r4, #20]
 8005106:	1d18      	adds	r0, r3, #4
 8005108:	6028      	str	r0, [r5, #0]
 800510a:	0635      	lsls	r5, r6, #24
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	d501      	bpl.n	8005114 <_printf_i+0x1c4>
 8005110:	6019      	str	r1, [r3, #0]
 8005112:	e002      	b.n	800511a <_printf_i+0x1ca>
 8005114:	0670      	lsls	r0, r6, #25
 8005116:	d5fb      	bpl.n	8005110 <_printf_i+0x1c0>
 8005118:	8019      	strh	r1, [r3, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	4615      	mov	r5, r2
 8005120:	e7bc      	b.n	800509c <_printf_i+0x14c>
 8005122:	682b      	ldr	r3, [r5, #0]
 8005124:	1d1a      	adds	r2, r3, #4
 8005126:	602a      	str	r2, [r5, #0]
 8005128:	681d      	ldr	r5, [r3, #0]
 800512a:	6862      	ldr	r2, [r4, #4]
 800512c:	2100      	movs	r1, #0
 800512e:	4628      	mov	r0, r5
 8005130:	f7fb f84e 	bl	80001d0 <memchr>
 8005134:	b108      	cbz	r0, 800513a <_printf_i+0x1ea>
 8005136:	1b40      	subs	r0, r0, r5
 8005138:	6060      	str	r0, [r4, #4]
 800513a:	6863      	ldr	r3, [r4, #4]
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	2300      	movs	r3, #0
 8005140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005144:	e7aa      	b.n	800509c <_printf_i+0x14c>
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	462a      	mov	r2, r5
 800514a:	4649      	mov	r1, r9
 800514c:	4640      	mov	r0, r8
 800514e:	47d0      	blx	sl
 8005150:	3001      	adds	r0, #1
 8005152:	d0ad      	beq.n	80050b0 <_printf_i+0x160>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	079b      	lsls	r3, r3, #30
 8005158:	d413      	bmi.n	8005182 <_printf_i+0x232>
 800515a:	68e0      	ldr	r0, [r4, #12]
 800515c:	9b03      	ldr	r3, [sp, #12]
 800515e:	4298      	cmp	r0, r3
 8005160:	bfb8      	it	lt
 8005162:	4618      	movlt	r0, r3
 8005164:	e7a6      	b.n	80050b4 <_printf_i+0x164>
 8005166:	2301      	movs	r3, #1
 8005168:	4632      	mov	r2, r6
 800516a:	4649      	mov	r1, r9
 800516c:	4640      	mov	r0, r8
 800516e:	47d0      	blx	sl
 8005170:	3001      	adds	r0, #1
 8005172:	d09d      	beq.n	80050b0 <_printf_i+0x160>
 8005174:	3501      	adds	r5, #1
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	9903      	ldr	r1, [sp, #12]
 800517a:	1a5b      	subs	r3, r3, r1
 800517c:	42ab      	cmp	r3, r5
 800517e:	dcf2      	bgt.n	8005166 <_printf_i+0x216>
 8005180:	e7eb      	b.n	800515a <_printf_i+0x20a>
 8005182:	2500      	movs	r5, #0
 8005184:	f104 0619 	add.w	r6, r4, #25
 8005188:	e7f5      	b.n	8005176 <_printf_i+0x226>
 800518a:	bf00      	nop
 800518c:	08005afc 	.word	0x08005afc
 8005190:	08005b0d 	.word	0x08005b0d

08005194 <__sflush_r>:
 8005194:	898a      	ldrh	r2, [r1, #12]
 8005196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519a:	4605      	mov	r5, r0
 800519c:	0710      	lsls	r0, r2, #28
 800519e:	460c      	mov	r4, r1
 80051a0:	d458      	bmi.n	8005254 <__sflush_r+0xc0>
 80051a2:	684b      	ldr	r3, [r1, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dc05      	bgt.n	80051b4 <__sflush_r+0x20>
 80051a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	dc02      	bgt.n	80051b4 <__sflush_r+0x20>
 80051ae:	2000      	movs	r0, #0
 80051b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051b6:	2e00      	cmp	r6, #0
 80051b8:	d0f9      	beq.n	80051ae <__sflush_r+0x1a>
 80051ba:	2300      	movs	r3, #0
 80051bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051c0:	682f      	ldr	r7, [r5, #0]
 80051c2:	6a21      	ldr	r1, [r4, #32]
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	d032      	beq.n	800522e <__sflush_r+0x9a>
 80051c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	075a      	lsls	r2, r3, #29
 80051ce:	d505      	bpl.n	80051dc <__sflush_r+0x48>
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	1ac0      	subs	r0, r0, r3
 80051d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051d6:	b10b      	cbz	r3, 80051dc <__sflush_r+0x48>
 80051d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051da:	1ac0      	subs	r0, r0, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	4602      	mov	r2, r0
 80051e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051e2:	6a21      	ldr	r1, [r4, #32]
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b0      	blx	r6
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	d106      	bne.n	80051fc <__sflush_r+0x68>
 80051ee:	6829      	ldr	r1, [r5, #0]
 80051f0:	291d      	cmp	r1, #29
 80051f2:	d82b      	bhi.n	800524c <__sflush_r+0xb8>
 80051f4:	4a29      	ldr	r2, [pc, #164]	; (800529c <__sflush_r+0x108>)
 80051f6:	410a      	asrs	r2, r1
 80051f8:	07d6      	lsls	r6, r2, #31
 80051fa:	d427      	bmi.n	800524c <__sflush_r+0xb8>
 80051fc:	2200      	movs	r2, #0
 80051fe:	6062      	str	r2, [r4, #4]
 8005200:	04d9      	lsls	r1, r3, #19
 8005202:	6922      	ldr	r2, [r4, #16]
 8005204:	6022      	str	r2, [r4, #0]
 8005206:	d504      	bpl.n	8005212 <__sflush_r+0x7e>
 8005208:	1c42      	adds	r2, r0, #1
 800520a:	d101      	bne.n	8005210 <__sflush_r+0x7c>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b903      	cbnz	r3, 8005212 <__sflush_r+0x7e>
 8005210:	6560      	str	r0, [r4, #84]	; 0x54
 8005212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005214:	602f      	str	r7, [r5, #0]
 8005216:	2900      	cmp	r1, #0
 8005218:	d0c9      	beq.n	80051ae <__sflush_r+0x1a>
 800521a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800521e:	4299      	cmp	r1, r3
 8005220:	d002      	beq.n	8005228 <__sflush_r+0x94>
 8005222:	4628      	mov	r0, r5
 8005224:	f7ff fbce 	bl	80049c4 <_free_r>
 8005228:	2000      	movs	r0, #0
 800522a:	6360      	str	r0, [r4, #52]	; 0x34
 800522c:	e7c0      	b.n	80051b0 <__sflush_r+0x1c>
 800522e:	2301      	movs	r3, #1
 8005230:	4628      	mov	r0, r5
 8005232:	47b0      	blx	r6
 8005234:	1c41      	adds	r1, r0, #1
 8005236:	d1c8      	bne.n	80051ca <__sflush_r+0x36>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0c5      	beq.n	80051ca <__sflush_r+0x36>
 800523e:	2b1d      	cmp	r3, #29
 8005240:	d001      	beq.n	8005246 <__sflush_r+0xb2>
 8005242:	2b16      	cmp	r3, #22
 8005244:	d101      	bne.n	800524a <__sflush_r+0xb6>
 8005246:	602f      	str	r7, [r5, #0]
 8005248:	e7b1      	b.n	80051ae <__sflush_r+0x1a>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	e7ad      	b.n	80051b0 <__sflush_r+0x1c>
 8005254:	690f      	ldr	r7, [r1, #16]
 8005256:	2f00      	cmp	r7, #0
 8005258:	d0a9      	beq.n	80051ae <__sflush_r+0x1a>
 800525a:	0793      	lsls	r3, r2, #30
 800525c:	680e      	ldr	r6, [r1, #0]
 800525e:	bf08      	it	eq
 8005260:	694b      	ldreq	r3, [r1, #20]
 8005262:	600f      	str	r7, [r1, #0]
 8005264:	bf18      	it	ne
 8005266:	2300      	movne	r3, #0
 8005268:	eba6 0807 	sub.w	r8, r6, r7
 800526c:	608b      	str	r3, [r1, #8]
 800526e:	f1b8 0f00 	cmp.w	r8, #0
 8005272:	dd9c      	ble.n	80051ae <__sflush_r+0x1a>
 8005274:	6a21      	ldr	r1, [r4, #32]
 8005276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005278:	4643      	mov	r3, r8
 800527a:	463a      	mov	r2, r7
 800527c:	4628      	mov	r0, r5
 800527e:	47b0      	blx	r6
 8005280:	2800      	cmp	r0, #0
 8005282:	dc06      	bgt.n	8005292 <__sflush_r+0xfe>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	e78e      	b.n	80051b0 <__sflush_r+0x1c>
 8005292:	4407      	add	r7, r0
 8005294:	eba8 0800 	sub.w	r8, r8, r0
 8005298:	e7e9      	b.n	800526e <__sflush_r+0xda>
 800529a:	bf00      	nop
 800529c:	dfbffffe 	.word	0xdfbffffe

080052a0 <_fflush_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	690b      	ldr	r3, [r1, #16]
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	b913      	cbnz	r3, 80052b0 <_fflush_r+0x10>
 80052aa:	2500      	movs	r5, #0
 80052ac:	4628      	mov	r0, r5
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	b118      	cbz	r0, 80052ba <_fflush_r+0x1a>
 80052b2:	6a03      	ldr	r3, [r0, #32]
 80052b4:	b90b      	cbnz	r3, 80052ba <_fflush_r+0x1a>
 80052b6:	f7ff fa51 	bl	800475c <__sinit>
 80052ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f3      	beq.n	80052aa <_fflush_r+0xa>
 80052c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052c4:	07d0      	lsls	r0, r2, #31
 80052c6:	d404      	bmi.n	80052d2 <_fflush_r+0x32>
 80052c8:	0599      	lsls	r1, r3, #22
 80052ca:	d402      	bmi.n	80052d2 <_fflush_r+0x32>
 80052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ce:	f7ff fb58 	bl	8004982 <__retarget_lock_acquire_recursive>
 80052d2:	4628      	mov	r0, r5
 80052d4:	4621      	mov	r1, r4
 80052d6:	f7ff ff5d 	bl	8005194 <__sflush_r>
 80052da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052dc:	07da      	lsls	r2, r3, #31
 80052de:	4605      	mov	r5, r0
 80052e0:	d4e4      	bmi.n	80052ac <_fflush_r+0xc>
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	059b      	lsls	r3, r3, #22
 80052e6:	d4e1      	bmi.n	80052ac <_fflush_r+0xc>
 80052e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ea:	f7ff fb4b 	bl	8004984 <__retarget_lock_release_recursive>
 80052ee:	e7dd      	b.n	80052ac <_fflush_r+0xc>

080052f0 <fiprintf>:
 80052f0:	b40e      	push	{r1, r2, r3}
 80052f2:	b503      	push	{r0, r1, lr}
 80052f4:	4601      	mov	r1, r0
 80052f6:	ab03      	add	r3, sp, #12
 80052f8:	4805      	ldr	r0, [pc, #20]	; (8005310 <fiprintf+0x20>)
 80052fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80052fe:	6800      	ldr	r0, [r0, #0]
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	f000 f89f 	bl	8005444 <_vfiprintf_r>
 8005306:	b002      	add	sp, #8
 8005308:	f85d eb04 	ldr.w	lr, [sp], #4
 800530c:	b003      	add	sp, #12
 800530e:	4770      	bx	lr
 8005310:	20000064 	.word	0x20000064

08005314 <memmove>:
 8005314:	4288      	cmp	r0, r1
 8005316:	b510      	push	{r4, lr}
 8005318:	eb01 0402 	add.w	r4, r1, r2
 800531c:	d902      	bls.n	8005324 <memmove+0x10>
 800531e:	4284      	cmp	r4, r0
 8005320:	4623      	mov	r3, r4
 8005322:	d807      	bhi.n	8005334 <memmove+0x20>
 8005324:	1e43      	subs	r3, r0, #1
 8005326:	42a1      	cmp	r1, r4
 8005328:	d008      	beq.n	800533c <memmove+0x28>
 800532a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800532e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005332:	e7f8      	b.n	8005326 <memmove+0x12>
 8005334:	4402      	add	r2, r0
 8005336:	4601      	mov	r1, r0
 8005338:	428a      	cmp	r2, r1
 800533a:	d100      	bne.n	800533e <memmove+0x2a>
 800533c:	bd10      	pop	{r4, pc}
 800533e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005346:	e7f7      	b.n	8005338 <memmove+0x24>

08005348 <_sbrk_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d06      	ldr	r5, [pc, #24]	; (8005364 <_sbrk_r+0x1c>)
 800534c:	2300      	movs	r3, #0
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	f7fb ff1a 	bl	800118c <_sbrk>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_sbrk_r+0x1a>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_sbrk_r+0x1a>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	2000026c 	.word	0x2000026c

08005368 <memcpy>:
 8005368:	440a      	add	r2, r1
 800536a:	4291      	cmp	r1, r2
 800536c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005370:	d100      	bne.n	8005374 <memcpy+0xc>
 8005372:	4770      	bx	lr
 8005374:	b510      	push	{r4, lr}
 8005376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800537a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800537e:	4291      	cmp	r1, r2
 8005380:	d1f9      	bne.n	8005376 <memcpy+0xe>
 8005382:	bd10      	pop	{r4, pc}

08005384 <abort>:
 8005384:	b508      	push	{r3, lr}
 8005386:	2006      	movs	r0, #6
 8005388:	f000 fa34 	bl	80057f4 <raise>
 800538c:	2001      	movs	r0, #1
 800538e:	f7fb fe85 	bl	800109c <_exit>

08005392 <_realloc_r>:
 8005392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005396:	4680      	mov	r8, r0
 8005398:	4614      	mov	r4, r2
 800539a:	460e      	mov	r6, r1
 800539c:	b921      	cbnz	r1, 80053a8 <_realloc_r+0x16>
 800539e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a2:	4611      	mov	r1, r2
 80053a4:	f7ff bb82 	b.w	8004aac <_malloc_r>
 80053a8:	b92a      	cbnz	r2, 80053b6 <_realloc_r+0x24>
 80053aa:	f7ff fb0b 	bl	80049c4 <_free_r>
 80053ae:	4625      	mov	r5, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b6:	f000 fa39 	bl	800582c <_malloc_usable_size_r>
 80053ba:	4284      	cmp	r4, r0
 80053bc:	4607      	mov	r7, r0
 80053be:	d802      	bhi.n	80053c6 <_realloc_r+0x34>
 80053c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053c4:	d812      	bhi.n	80053ec <_realloc_r+0x5a>
 80053c6:	4621      	mov	r1, r4
 80053c8:	4640      	mov	r0, r8
 80053ca:	f7ff fb6f 	bl	8004aac <_malloc_r>
 80053ce:	4605      	mov	r5, r0
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d0ed      	beq.n	80053b0 <_realloc_r+0x1e>
 80053d4:	42bc      	cmp	r4, r7
 80053d6:	4622      	mov	r2, r4
 80053d8:	4631      	mov	r1, r6
 80053da:	bf28      	it	cs
 80053dc:	463a      	movcs	r2, r7
 80053de:	f7ff ffc3 	bl	8005368 <memcpy>
 80053e2:	4631      	mov	r1, r6
 80053e4:	4640      	mov	r0, r8
 80053e6:	f7ff faed 	bl	80049c4 <_free_r>
 80053ea:	e7e1      	b.n	80053b0 <_realloc_r+0x1e>
 80053ec:	4635      	mov	r5, r6
 80053ee:	e7df      	b.n	80053b0 <_realloc_r+0x1e>

080053f0 <__sfputc_r>:
 80053f0:	6893      	ldr	r3, [r2, #8]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	b410      	push	{r4}
 80053f8:	6093      	str	r3, [r2, #8]
 80053fa:	da08      	bge.n	800540e <__sfputc_r+0x1e>
 80053fc:	6994      	ldr	r4, [r2, #24]
 80053fe:	42a3      	cmp	r3, r4
 8005400:	db01      	blt.n	8005406 <__sfputc_r+0x16>
 8005402:	290a      	cmp	r1, #10
 8005404:	d103      	bne.n	800540e <__sfputc_r+0x1e>
 8005406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800540a:	f000 b935 	b.w	8005678 <__swbuf_r>
 800540e:	6813      	ldr	r3, [r2, #0]
 8005410:	1c58      	adds	r0, r3, #1
 8005412:	6010      	str	r0, [r2, #0]
 8005414:	7019      	strb	r1, [r3, #0]
 8005416:	4608      	mov	r0, r1
 8005418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800541c:	4770      	bx	lr

0800541e <__sfputs_r>:
 800541e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005420:	4606      	mov	r6, r0
 8005422:	460f      	mov	r7, r1
 8005424:	4614      	mov	r4, r2
 8005426:	18d5      	adds	r5, r2, r3
 8005428:	42ac      	cmp	r4, r5
 800542a:	d101      	bne.n	8005430 <__sfputs_r+0x12>
 800542c:	2000      	movs	r0, #0
 800542e:	e007      	b.n	8005440 <__sfputs_r+0x22>
 8005430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005434:	463a      	mov	r2, r7
 8005436:	4630      	mov	r0, r6
 8005438:	f7ff ffda 	bl	80053f0 <__sfputc_r>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d1f3      	bne.n	8005428 <__sfputs_r+0xa>
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005444 <_vfiprintf_r>:
 8005444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005448:	460d      	mov	r5, r1
 800544a:	b09d      	sub	sp, #116	; 0x74
 800544c:	4614      	mov	r4, r2
 800544e:	4698      	mov	r8, r3
 8005450:	4606      	mov	r6, r0
 8005452:	b118      	cbz	r0, 800545c <_vfiprintf_r+0x18>
 8005454:	6a03      	ldr	r3, [r0, #32]
 8005456:	b90b      	cbnz	r3, 800545c <_vfiprintf_r+0x18>
 8005458:	f7ff f980 	bl	800475c <__sinit>
 800545c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800545e:	07d9      	lsls	r1, r3, #31
 8005460:	d405      	bmi.n	800546e <_vfiprintf_r+0x2a>
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	059a      	lsls	r2, r3, #22
 8005466:	d402      	bmi.n	800546e <_vfiprintf_r+0x2a>
 8005468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800546a:	f7ff fa8a 	bl	8004982 <__retarget_lock_acquire_recursive>
 800546e:	89ab      	ldrh	r3, [r5, #12]
 8005470:	071b      	lsls	r3, r3, #28
 8005472:	d501      	bpl.n	8005478 <_vfiprintf_r+0x34>
 8005474:	692b      	ldr	r3, [r5, #16]
 8005476:	b99b      	cbnz	r3, 80054a0 <_vfiprintf_r+0x5c>
 8005478:	4629      	mov	r1, r5
 800547a:	4630      	mov	r0, r6
 800547c:	f000 f93a 	bl	80056f4 <__swsetup_r>
 8005480:	b170      	cbz	r0, 80054a0 <_vfiprintf_r+0x5c>
 8005482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005484:	07dc      	lsls	r4, r3, #31
 8005486:	d504      	bpl.n	8005492 <_vfiprintf_r+0x4e>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	b01d      	add	sp, #116	; 0x74
 800548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	0598      	lsls	r0, r3, #22
 8005496:	d4f7      	bmi.n	8005488 <_vfiprintf_r+0x44>
 8005498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800549a:	f7ff fa73 	bl	8004984 <__retarget_lock_release_recursive>
 800549e:	e7f3      	b.n	8005488 <_vfiprintf_r+0x44>
 80054a0:	2300      	movs	r3, #0
 80054a2:	9309      	str	r3, [sp, #36]	; 0x24
 80054a4:	2320      	movs	r3, #32
 80054a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ae:	2330      	movs	r3, #48	; 0x30
 80054b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005664 <_vfiprintf_r+0x220>
 80054b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b8:	f04f 0901 	mov.w	r9, #1
 80054bc:	4623      	mov	r3, r4
 80054be:	469a      	mov	sl, r3
 80054c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054c4:	b10a      	cbz	r2, 80054ca <_vfiprintf_r+0x86>
 80054c6:	2a25      	cmp	r2, #37	; 0x25
 80054c8:	d1f9      	bne.n	80054be <_vfiprintf_r+0x7a>
 80054ca:	ebba 0b04 	subs.w	fp, sl, r4
 80054ce:	d00b      	beq.n	80054e8 <_vfiprintf_r+0xa4>
 80054d0:	465b      	mov	r3, fp
 80054d2:	4622      	mov	r2, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7ff ffa1 	bl	800541e <__sfputs_r>
 80054dc:	3001      	adds	r0, #1
 80054de:	f000 80a9 	beq.w	8005634 <_vfiprintf_r+0x1f0>
 80054e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e4:	445a      	add	r2, fp
 80054e6:	9209      	str	r2, [sp, #36]	; 0x24
 80054e8:	f89a 3000 	ldrb.w	r3, [sl]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a1 	beq.w	8005634 <_vfiprintf_r+0x1f0>
 80054f2:	2300      	movs	r3, #0
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054fc:	f10a 0a01 	add.w	sl, sl, #1
 8005500:	9304      	str	r3, [sp, #16]
 8005502:	9307      	str	r3, [sp, #28]
 8005504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005508:	931a      	str	r3, [sp, #104]	; 0x68
 800550a:	4654      	mov	r4, sl
 800550c:	2205      	movs	r2, #5
 800550e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005512:	4854      	ldr	r0, [pc, #336]	; (8005664 <_vfiprintf_r+0x220>)
 8005514:	f7fa fe5c 	bl	80001d0 <memchr>
 8005518:	9a04      	ldr	r2, [sp, #16]
 800551a:	b9d8      	cbnz	r0, 8005554 <_vfiprintf_r+0x110>
 800551c:	06d1      	lsls	r1, r2, #27
 800551e:	bf44      	itt	mi
 8005520:	2320      	movmi	r3, #32
 8005522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005526:	0713      	lsls	r3, r2, #28
 8005528:	bf44      	itt	mi
 800552a:	232b      	movmi	r3, #43	; 0x2b
 800552c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005530:	f89a 3000 	ldrb.w	r3, [sl]
 8005534:	2b2a      	cmp	r3, #42	; 0x2a
 8005536:	d015      	beq.n	8005564 <_vfiprintf_r+0x120>
 8005538:	9a07      	ldr	r2, [sp, #28]
 800553a:	4654      	mov	r4, sl
 800553c:	2000      	movs	r0, #0
 800553e:	f04f 0c0a 	mov.w	ip, #10
 8005542:	4621      	mov	r1, r4
 8005544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005548:	3b30      	subs	r3, #48	; 0x30
 800554a:	2b09      	cmp	r3, #9
 800554c:	d94d      	bls.n	80055ea <_vfiprintf_r+0x1a6>
 800554e:	b1b0      	cbz	r0, 800557e <_vfiprintf_r+0x13a>
 8005550:	9207      	str	r2, [sp, #28]
 8005552:	e014      	b.n	800557e <_vfiprintf_r+0x13a>
 8005554:	eba0 0308 	sub.w	r3, r0, r8
 8005558:	fa09 f303 	lsl.w	r3, r9, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	46a2      	mov	sl, r4
 8005562:	e7d2      	b.n	800550a <_vfiprintf_r+0xc6>
 8005564:	9b03      	ldr	r3, [sp, #12]
 8005566:	1d19      	adds	r1, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	9103      	str	r1, [sp, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	bfbb      	ittet	lt
 8005570:	425b      	neglt	r3, r3
 8005572:	f042 0202 	orrlt.w	r2, r2, #2
 8005576:	9307      	strge	r3, [sp, #28]
 8005578:	9307      	strlt	r3, [sp, #28]
 800557a:	bfb8      	it	lt
 800557c:	9204      	strlt	r2, [sp, #16]
 800557e:	7823      	ldrb	r3, [r4, #0]
 8005580:	2b2e      	cmp	r3, #46	; 0x2e
 8005582:	d10c      	bne.n	800559e <_vfiprintf_r+0x15a>
 8005584:	7863      	ldrb	r3, [r4, #1]
 8005586:	2b2a      	cmp	r3, #42	; 0x2a
 8005588:	d134      	bne.n	80055f4 <_vfiprintf_r+0x1b0>
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	9203      	str	r2, [sp, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	bfb8      	it	lt
 8005596:	f04f 33ff 	movlt.w	r3, #4294967295
 800559a:	3402      	adds	r4, #2
 800559c:	9305      	str	r3, [sp, #20]
 800559e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005674 <_vfiprintf_r+0x230>
 80055a2:	7821      	ldrb	r1, [r4, #0]
 80055a4:	2203      	movs	r2, #3
 80055a6:	4650      	mov	r0, sl
 80055a8:	f7fa fe12 	bl	80001d0 <memchr>
 80055ac:	b138      	cbz	r0, 80055be <_vfiprintf_r+0x17a>
 80055ae:	9b04      	ldr	r3, [sp, #16]
 80055b0:	eba0 000a 	sub.w	r0, r0, sl
 80055b4:	2240      	movs	r2, #64	; 0x40
 80055b6:	4082      	lsls	r2, r0
 80055b8:	4313      	orrs	r3, r2
 80055ba:	3401      	adds	r4, #1
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c2:	4829      	ldr	r0, [pc, #164]	; (8005668 <_vfiprintf_r+0x224>)
 80055c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055c8:	2206      	movs	r2, #6
 80055ca:	f7fa fe01 	bl	80001d0 <memchr>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d03f      	beq.n	8005652 <_vfiprintf_r+0x20e>
 80055d2:	4b26      	ldr	r3, [pc, #152]	; (800566c <_vfiprintf_r+0x228>)
 80055d4:	bb1b      	cbnz	r3, 800561e <_vfiprintf_r+0x1da>
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	3307      	adds	r3, #7
 80055da:	f023 0307 	bic.w	r3, r3, #7
 80055de:	3308      	adds	r3, #8
 80055e0:	9303      	str	r3, [sp, #12]
 80055e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e4:	443b      	add	r3, r7
 80055e6:	9309      	str	r3, [sp, #36]	; 0x24
 80055e8:	e768      	b.n	80054bc <_vfiprintf_r+0x78>
 80055ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ee:	460c      	mov	r4, r1
 80055f0:	2001      	movs	r0, #1
 80055f2:	e7a6      	b.n	8005542 <_vfiprintf_r+0xfe>
 80055f4:	2300      	movs	r3, #0
 80055f6:	3401      	adds	r4, #1
 80055f8:	9305      	str	r3, [sp, #20]
 80055fa:	4619      	mov	r1, r3
 80055fc:	f04f 0c0a 	mov.w	ip, #10
 8005600:	4620      	mov	r0, r4
 8005602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005606:	3a30      	subs	r2, #48	; 0x30
 8005608:	2a09      	cmp	r2, #9
 800560a:	d903      	bls.n	8005614 <_vfiprintf_r+0x1d0>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0c6      	beq.n	800559e <_vfiprintf_r+0x15a>
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	e7c4      	b.n	800559e <_vfiprintf_r+0x15a>
 8005614:	fb0c 2101 	mla	r1, ip, r1, r2
 8005618:	4604      	mov	r4, r0
 800561a:	2301      	movs	r3, #1
 800561c:	e7f0      	b.n	8005600 <_vfiprintf_r+0x1bc>
 800561e:	ab03      	add	r3, sp, #12
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	462a      	mov	r2, r5
 8005624:	4b12      	ldr	r3, [pc, #72]	; (8005670 <_vfiprintf_r+0x22c>)
 8005626:	a904      	add	r1, sp, #16
 8005628:	4630      	mov	r0, r6
 800562a:	f3af 8000 	nop.w
 800562e:	4607      	mov	r7, r0
 8005630:	1c78      	adds	r0, r7, #1
 8005632:	d1d6      	bne.n	80055e2 <_vfiprintf_r+0x19e>
 8005634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005636:	07d9      	lsls	r1, r3, #31
 8005638:	d405      	bmi.n	8005646 <_vfiprintf_r+0x202>
 800563a:	89ab      	ldrh	r3, [r5, #12]
 800563c:	059a      	lsls	r2, r3, #22
 800563e:	d402      	bmi.n	8005646 <_vfiprintf_r+0x202>
 8005640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005642:	f7ff f99f 	bl	8004984 <__retarget_lock_release_recursive>
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	065b      	lsls	r3, r3, #25
 800564a:	f53f af1d 	bmi.w	8005488 <_vfiprintf_r+0x44>
 800564e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005650:	e71c      	b.n	800548c <_vfiprintf_r+0x48>
 8005652:	ab03      	add	r3, sp, #12
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	462a      	mov	r2, r5
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <_vfiprintf_r+0x22c>)
 800565a:	a904      	add	r1, sp, #16
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff fc77 	bl	8004f50 <_printf_i>
 8005662:	e7e4      	b.n	800562e <_vfiprintf_r+0x1ea>
 8005664:	08005aeb 	.word	0x08005aeb
 8005668:	08005af5 	.word	0x08005af5
 800566c:	00000000 	.word	0x00000000
 8005670:	0800541f 	.word	0x0800541f
 8005674:	08005af1 	.word	0x08005af1

08005678 <__swbuf_r>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	4614      	mov	r4, r2
 800567e:	4605      	mov	r5, r0
 8005680:	b118      	cbz	r0, 800568a <__swbuf_r+0x12>
 8005682:	6a03      	ldr	r3, [r0, #32]
 8005684:	b90b      	cbnz	r3, 800568a <__swbuf_r+0x12>
 8005686:	f7ff f869 	bl	800475c <__sinit>
 800568a:	69a3      	ldr	r3, [r4, #24]
 800568c:	60a3      	str	r3, [r4, #8]
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	071a      	lsls	r2, r3, #28
 8005692:	d525      	bpl.n	80056e0 <__swbuf_r+0x68>
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	b31b      	cbz	r3, 80056e0 <__swbuf_r+0x68>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	6922      	ldr	r2, [r4, #16]
 800569c:	1a98      	subs	r0, r3, r2
 800569e:	6963      	ldr	r3, [r4, #20]
 80056a0:	b2f6      	uxtb	r6, r6
 80056a2:	4283      	cmp	r3, r0
 80056a4:	4637      	mov	r7, r6
 80056a6:	dc04      	bgt.n	80056b2 <__swbuf_r+0x3a>
 80056a8:	4621      	mov	r1, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff fdf8 	bl	80052a0 <_fflush_r>
 80056b0:	b9e0      	cbnz	r0, 80056ec <__swbuf_r+0x74>
 80056b2:	68a3      	ldr	r3, [r4, #8]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	60a3      	str	r3, [r4, #8]
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	6022      	str	r2, [r4, #0]
 80056be:	701e      	strb	r6, [r3, #0]
 80056c0:	6962      	ldr	r2, [r4, #20]
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d004      	beq.n	80056d2 <__swbuf_r+0x5a>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	07db      	lsls	r3, r3, #31
 80056cc:	d506      	bpl.n	80056dc <__swbuf_r+0x64>
 80056ce:	2e0a      	cmp	r6, #10
 80056d0:	d104      	bne.n	80056dc <__swbuf_r+0x64>
 80056d2:	4621      	mov	r1, r4
 80056d4:	4628      	mov	r0, r5
 80056d6:	f7ff fde3 	bl	80052a0 <_fflush_r>
 80056da:	b938      	cbnz	r0, 80056ec <__swbuf_r+0x74>
 80056dc:	4638      	mov	r0, r7
 80056de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f806 	bl	80056f4 <__swsetup_r>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d0d5      	beq.n	8005698 <__swbuf_r+0x20>
 80056ec:	f04f 37ff 	mov.w	r7, #4294967295
 80056f0:	e7f4      	b.n	80056dc <__swbuf_r+0x64>
	...

080056f4 <__swsetup_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <__swsetup_r+0xac>)
 80056f8:	4605      	mov	r5, r0
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	460c      	mov	r4, r1
 80056fe:	b118      	cbz	r0, 8005708 <__swsetup_r+0x14>
 8005700:	6a03      	ldr	r3, [r0, #32]
 8005702:	b90b      	cbnz	r3, 8005708 <__swsetup_r+0x14>
 8005704:	f7ff f82a 	bl	800475c <__sinit>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800570e:	0718      	lsls	r0, r3, #28
 8005710:	d422      	bmi.n	8005758 <__swsetup_r+0x64>
 8005712:	06d9      	lsls	r1, r3, #27
 8005714:	d407      	bmi.n	8005726 <__swsetup_r+0x32>
 8005716:	2309      	movs	r3, #9
 8005718:	602b      	str	r3, [r5, #0]
 800571a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	e034      	b.n	8005790 <__swsetup_r+0x9c>
 8005726:	0758      	lsls	r0, r3, #29
 8005728:	d512      	bpl.n	8005750 <__swsetup_r+0x5c>
 800572a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800572c:	b141      	cbz	r1, 8005740 <__swsetup_r+0x4c>
 800572e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005732:	4299      	cmp	r1, r3
 8005734:	d002      	beq.n	800573c <__swsetup_r+0x48>
 8005736:	4628      	mov	r0, r5
 8005738:	f7ff f944 	bl	80049c4 <_free_r>
 800573c:	2300      	movs	r3, #0
 800573e:	6363      	str	r3, [r4, #52]	; 0x34
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	2300      	movs	r3, #0
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f043 0308 	orr.w	r3, r3, #8
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b94b      	cbnz	r3, 8005770 <__swsetup_r+0x7c>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005766:	d003      	beq.n	8005770 <__swsetup_r+0x7c>
 8005768:	4621      	mov	r1, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f000 f88c 	bl	8005888 <__smakebuf_r>
 8005770:	89a0      	ldrh	r0, [r4, #12]
 8005772:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005776:	f010 0301 	ands.w	r3, r0, #1
 800577a:	d00a      	beq.n	8005792 <__swsetup_r+0x9e>
 800577c:	2300      	movs	r3, #0
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	6963      	ldr	r3, [r4, #20]
 8005782:	425b      	negs	r3, r3
 8005784:	61a3      	str	r3, [r4, #24]
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	b943      	cbnz	r3, 800579c <__swsetup_r+0xa8>
 800578a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800578e:	d1c4      	bne.n	800571a <__swsetup_r+0x26>
 8005790:	bd38      	pop	{r3, r4, r5, pc}
 8005792:	0781      	lsls	r1, r0, #30
 8005794:	bf58      	it	pl
 8005796:	6963      	ldrpl	r3, [r4, #20]
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	e7f4      	b.n	8005786 <__swsetup_r+0x92>
 800579c:	2000      	movs	r0, #0
 800579e:	e7f7      	b.n	8005790 <__swsetup_r+0x9c>
 80057a0:	20000064 	.word	0x20000064

080057a4 <_raise_r>:
 80057a4:	291f      	cmp	r1, #31
 80057a6:	b538      	push	{r3, r4, r5, lr}
 80057a8:	4604      	mov	r4, r0
 80057aa:	460d      	mov	r5, r1
 80057ac:	d904      	bls.n	80057b8 <_raise_r+0x14>
 80057ae:	2316      	movs	r3, #22
 80057b0:	6003      	str	r3, [r0, #0]
 80057b2:	f04f 30ff 	mov.w	r0, #4294967295
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80057ba:	b112      	cbz	r2, 80057c2 <_raise_r+0x1e>
 80057bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057c0:	b94b      	cbnz	r3, 80057d6 <_raise_r+0x32>
 80057c2:	4620      	mov	r0, r4
 80057c4:	f000 f830 	bl	8005828 <_getpid_r>
 80057c8:	462a      	mov	r2, r5
 80057ca:	4601      	mov	r1, r0
 80057cc:	4620      	mov	r0, r4
 80057ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057d2:	f000 b817 	b.w	8005804 <_kill_r>
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d00a      	beq.n	80057f0 <_raise_r+0x4c>
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	d103      	bne.n	80057e6 <_raise_r+0x42>
 80057de:	2316      	movs	r3, #22
 80057e0:	6003      	str	r3, [r0, #0]
 80057e2:	2001      	movs	r0, #1
 80057e4:	e7e7      	b.n	80057b6 <_raise_r+0x12>
 80057e6:	2400      	movs	r4, #0
 80057e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057ec:	4628      	mov	r0, r5
 80057ee:	4798      	blx	r3
 80057f0:	2000      	movs	r0, #0
 80057f2:	e7e0      	b.n	80057b6 <_raise_r+0x12>

080057f4 <raise>:
 80057f4:	4b02      	ldr	r3, [pc, #8]	; (8005800 <raise+0xc>)
 80057f6:	4601      	mov	r1, r0
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	f7ff bfd3 	b.w	80057a4 <_raise_r>
 80057fe:	bf00      	nop
 8005800:	20000064 	.word	0x20000064

08005804 <_kill_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d07      	ldr	r5, [pc, #28]	; (8005824 <_kill_r+0x20>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	4611      	mov	r1, r2
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	f7fb fc33 	bl	800107c <_kill>
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	d102      	bne.n	8005820 <_kill_r+0x1c>
 800581a:	682b      	ldr	r3, [r5, #0]
 800581c:	b103      	cbz	r3, 8005820 <_kill_r+0x1c>
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	bd38      	pop	{r3, r4, r5, pc}
 8005822:	bf00      	nop
 8005824:	2000026c 	.word	0x2000026c

08005828 <_getpid_r>:
 8005828:	f7fb bc20 	b.w	800106c <_getpid>

0800582c <_malloc_usable_size_r>:
 800582c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005830:	1f18      	subs	r0, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	bfbc      	itt	lt
 8005836:	580b      	ldrlt	r3, [r1, r0]
 8005838:	18c0      	addlt	r0, r0, r3
 800583a:	4770      	bx	lr

0800583c <__swhatbuf_r>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	460c      	mov	r4, r1
 8005840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005844:	2900      	cmp	r1, #0
 8005846:	b096      	sub	sp, #88	; 0x58
 8005848:	4615      	mov	r5, r2
 800584a:	461e      	mov	r6, r3
 800584c:	da0d      	bge.n	800586a <__swhatbuf_r+0x2e>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005854:	f04f 0100 	mov.w	r1, #0
 8005858:	bf0c      	ite	eq
 800585a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800585e:	2340      	movne	r3, #64	; 0x40
 8005860:	2000      	movs	r0, #0
 8005862:	6031      	str	r1, [r6, #0]
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	b016      	add	sp, #88	; 0x58
 8005868:	bd70      	pop	{r4, r5, r6, pc}
 800586a:	466a      	mov	r2, sp
 800586c:	f000 f848 	bl	8005900 <_fstat_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	dbec      	blt.n	800584e <__swhatbuf_r+0x12>
 8005874:	9901      	ldr	r1, [sp, #4]
 8005876:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800587a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800587e:	4259      	negs	r1, r3
 8005880:	4159      	adcs	r1, r3
 8005882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005886:	e7eb      	b.n	8005860 <__swhatbuf_r+0x24>

08005888 <__smakebuf_r>:
 8005888:	898b      	ldrh	r3, [r1, #12]
 800588a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800588c:	079d      	lsls	r5, r3, #30
 800588e:	4606      	mov	r6, r0
 8005890:	460c      	mov	r4, r1
 8005892:	d507      	bpl.n	80058a4 <__smakebuf_r+0x1c>
 8005894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	2301      	movs	r3, #1
 800589e:	6163      	str	r3, [r4, #20]
 80058a0:	b002      	add	sp, #8
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	ab01      	add	r3, sp, #4
 80058a6:	466a      	mov	r2, sp
 80058a8:	f7ff ffc8 	bl	800583c <__swhatbuf_r>
 80058ac:	9900      	ldr	r1, [sp, #0]
 80058ae:	4605      	mov	r5, r0
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7ff f8fb 	bl	8004aac <_malloc_r>
 80058b6:	b948      	cbnz	r0, 80058cc <__smakebuf_r+0x44>
 80058b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058bc:	059a      	lsls	r2, r3, #22
 80058be:	d4ef      	bmi.n	80058a0 <__smakebuf_r+0x18>
 80058c0:	f023 0303 	bic.w	r3, r3, #3
 80058c4:	f043 0302 	orr.w	r3, r3, #2
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	e7e3      	b.n	8005894 <__smakebuf_r+0xc>
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	6020      	str	r0, [r4, #0]
 80058d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	9b00      	ldr	r3, [sp, #0]
 80058d8:	6163      	str	r3, [r4, #20]
 80058da:	9b01      	ldr	r3, [sp, #4]
 80058dc:	6120      	str	r0, [r4, #16]
 80058de:	b15b      	cbz	r3, 80058f8 <__smakebuf_r+0x70>
 80058e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e4:	4630      	mov	r0, r6
 80058e6:	f000 f81d 	bl	8005924 <_isatty_r>
 80058ea:	b128      	cbz	r0, 80058f8 <__smakebuf_r+0x70>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	431d      	orrs	r5, r3
 80058fc:	81a5      	strh	r5, [r4, #12]
 80058fe:	e7cf      	b.n	80058a0 <__smakebuf_r+0x18>

08005900 <_fstat_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d07      	ldr	r5, [pc, #28]	; (8005920 <_fstat_r+0x20>)
 8005904:	2300      	movs	r3, #0
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	f7fb fc14 	bl	800113a <_fstat>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d102      	bne.n	800591c <_fstat_r+0x1c>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	b103      	cbz	r3, 800591c <_fstat_r+0x1c>
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	2000026c 	.word	0x2000026c

08005924 <_isatty_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d06      	ldr	r5, [pc, #24]	; (8005940 <_isatty_r+0x1c>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fb fc13 	bl	800115a <_isatty>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_isatty_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_isatty_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	2000026c 	.word	0x2000026c

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
