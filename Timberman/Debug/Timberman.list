
Timberman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000628c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e0  080065e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080065e0  080065e0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065e0  080065e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080065e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08006650  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08006650  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3e2  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000232f  00000000  00000000  0002d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002f7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c4  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291ed  00000000  00000000  00030eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea58  00000000  00000000  0005a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe604  00000000  00000000  00068af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f84  00000000  00000000  00167100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016b084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006404 	.word	0x08006404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006404 	.word	0x08006404

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <KPAD_init>:

int KPAD_lastkey;
ADC_HandleTypeDef *KPAD_hadc;

void KPAD_init(ADC_HandleTypeDef *hadc)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	KPAD_lastkey = KPAD_KEYNONE;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <KPAD_init+0x20>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
	KPAD_hadc = hadc;
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <KPAD_init+0x24>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	20000084 	.word	0x20000084
 80002a4:	20000088 	.word	0x20000088

080002a8 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 80002b0:	e002      	b.n	80002b8 <Delay+0x10>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1f9      	bne.n	80002b2 <Delay+0xa>
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <lcd_delay>:
void lcd_delay(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	Delay(200);
 80002d0:	20c8      	movs	r0, #200	; 0xc8
 80002d2:	f7ff ffe9 	bl	80002a8 <Delay>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80002e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002f0:	4b5e      	ldr	r3, [pc, #376]	; (800046c <lcd_cmd+0x190>)
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80002f6:	4b5e      	ldr	r3, [pc, #376]	; (8000470 <lcd_cmd+0x194>)
 80002f8:	2220      	movs	r2, #32
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80002fc:	4b5c      	ldr	r3, [pc, #368]	; (8000470 <lcd_cmd+0x194>)
 80002fe:	2210      	movs	r2, #16
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000302:	4b5b      	ldr	r3, [pc, #364]	; (8000470 <lcd_cmd+0x194>)
 8000304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800030a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000312:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000314:	f7ff ffda 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000318:	4b54      	ldr	r3, [pc, #336]	; (800046c <lcd_cmd+0x190>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a53      	ldr	r2, [pc, #332]	; (800046c <lcd_cmd+0x190>)
 800031e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000322:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 0310 	and.w	r3, r3, #16
 800032a:	2b00      	cmp	r3, #0
 800032c:	d003      	beq.n	8000336 <lcd_cmd+0x5a>
 800032e:	4b50      	ldr	r3, [pc, #320]	; (8000470 <lcd_cmd+0x194>)
 8000330:	2220      	movs	r2, #32
 8000332:	619a      	str	r2, [r3, #24]
 8000334:	e003      	b.n	800033e <lcd_cmd+0x62>
 8000336:	4b4e      	ldr	r3, [pc, #312]	; (8000470 <lcd_cmd+0x194>)
 8000338:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800033c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	2b00      	cmp	r3, #0
 8000346:	d003      	beq.n	8000350 <lcd_cmd+0x74>
 8000348:	4b49      	ldr	r3, [pc, #292]	; (8000470 <lcd_cmd+0x194>)
 800034a:	2210      	movs	r2, #16
 800034c:	619a      	str	r2, [r3, #24]
 800034e:	e003      	b.n	8000358 <lcd_cmd+0x7c>
 8000350:	4b47      	ldr	r3, [pc, #284]	; (8000470 <lcd_cmd+0x194>)
 8000352:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000356:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800035e:	2b00      	cmp	r3, #0
 8000360:	d004      	beq.n	800036c <lcd_cmd+0x90>
 8000362:	4b43      	ldr	r3, [pc, #268]	; (8000470 <lcd_cmd+0x194>)
 8000364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000368:	619a      	str	r2, [r3, #24]
 800036a:	e003      	b.n	8000374 <lcd_cmd+0x98>
 800036c:	4b40      	ldr	r3, [pc, #256]	; (8000470 <lcd_cmd+0x194>)
 800036e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000372:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	da05      	bge.n	8000388 <lcd_cmd+0xac>
 800037c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000384:	619a      	str	r2, [r3, #24]
 8000386:	e004      	b.n	8000392 <lcd_cmd+0xb6>
 8000388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000390:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000392:	f7ff ff9b 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000396:	4b35      	ldr	r3, [pc, #212]	; (800046c <lcd_cmd+0x190>)
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800039c:	4b34      	ldr	r3, [pc, #208]	; (8000470 <lcd_cmd+0x194>)
 800039e:	2220      	movs	r2, #32
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003a2:	4b33      	ldr	r3, [pc, #204]	; (8000470 <lcd_cmd+0x194>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003a8:	4b31      	ldr	r3, [pc, #196]	; (8000470 <lcd_cmd+0x194>)
 80003aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80003ba:	f7ff ff87 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <lcd_cmd+0x190>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a2a      	ldr	r2, [pc, #168]	; (800046c <lcd_cmd+0x190>)
 80003c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c8:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d003      	beq.n	80003dc <lcd_cmd+0x100>
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <lcd_cmd+0x194>)
 80003d6:	2220      	movs	r2, #32
 80003d8:	619a      	str	r2, [r3, #24]
 80003da:	e003      	b.n	80003e4 <lcd_cmd+0x108>
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <lcd_cmd+0x194>)
 80003de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003e2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	f003 0302 	and.w	r3, r3, #2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d003      	beq.n	80003f6 <lcd_cmd+0x11a>
 80003ee:	4b20      	ldr	r3, [pc, #128]	; (8000470 <lcd_cmd+0x194>)
 80003f0:	2210      	movs	r2, #16
 80003f2:	619a      	str	r2, [r3, #24]
 80003f4:	e003      	b.n	80003fe <lcd_cmd+0x122>
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <lcd_cmd+0x194>)
 80003f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003fc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	2b00      	cmp	r3, #0
 8000406:	d004      	beq.n	8000412 <lcd_cmd+0x136>
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <lcd_cmd+0x194>)
 800040a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800040e:	619a      	str	r2, [r3, #24]
 8000410:	e003      	b.n	800041a <lcd_cmd+0x13e>
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <lcd_cmd+0x194>)
 8000414:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000418:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	2b00      	cmp	r3, #0
 8000422:	d005      	beq.n	8000430 <lcd_cmd+0x154>
 8000424:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800042c:	619a      	str	r2, [r3, #24]
 800042e:	e004      	b.n	800043a <lcd_cmd+0x15e>
 8000430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000438:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800043a:	f7ff ff47 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <lcd_cmd+0x190>)
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <lcd_cmd+0x194>)
 8000446:	2220      	movs	r2, #32
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <lcd_cmd+0x194>)
 800044c:	2210      	movs	r2, #16
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <lcd_cmd+0x194>)
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800045c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000460:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	48000800 	.word	0x48000800
 8000470:	48000400 	.word	0x48000400

08000474 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800047e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048c:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800048e:	4b5e      	ldr	r3, [pc, #376]	; (8000608 <lcd_char_cp+0x194>)
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000494:	4b5d      	ldr	r3, [pc, #372]	; (800060c <lcd_char_cp+0x198>)
 8000496:	2220      	movs	r2, #32
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800049a:	4b5c      	ldr	r3, [pc, #368]	; (800060c <lcd_char_cp+0x198>)
 800049c:	2210      	movs	r2, #16
 800049e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80004a0:	4b5a      	ldr	r3, [pc, #360]	; (800060c <lcd_char_cp+0x198>)
 80004a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80004a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b0:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80004b2:	f7ff ff0b 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80004b6:	4b54      	ldr	r3, [pc, #336]	; (8000608 <lcd_char_cp+0x194>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a53      	ldr	r2, [pc, #332]	; (8000608 <lcd_char_cp+0x194>)
 80004bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c0:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f003 0310 	and.w	r3, r3, #16
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d003      	beq.n	80004d4 <lcd_char_cp+0x60>
 80004cc:	4b4f      	ldr	r3, [pc, #316]	; (800060c <lcd_char_cp+0x198>)
 80004ce:	2220      	movs	r2, #32
 80004d0:	619a      	str	r2, [r3, #24]
 80004d2:	e003      	b.n	80004dc <lcd_char_cp+0x68>
 80004d4:	4b4d      	ldr	r3, [pc, #308]	; (800060c <lcd_char_cp+0x198>)
 80004d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004da:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f003 0320 	and.w	r3, r3, #32
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d003      	beq.n	80004ee <lcd_char_cp+0x7a>
 80004e6:	4b49      	ldr	r3, [pc, #292]	; (800060c <lcd_char_cp+0x198>)
 80004e8:	2210      	movs	r2, #16
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	e003      	b.n	80004f6 <lcd_char_cp+0x82>
 80004ee:	4b47      	ldr	r3, [pc, #284]	; (800060c <lcd_char_cp+0x198>)
 80004f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004f4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d004      	beq.n	800050a <lcd_char_cp+0x96>
 8000500:	4b42      	ldr	r3, [pc, #264]	; (800060c <lcd_char_cp+0x198>)
 8000502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000506:	619a      	str	r2, [r3, #24]
 8000508:	e003      	b.n	8000512 <lcd_char_cp+0x9e>
 800050a:	4b40      	ldr	r3, [pc, #256]	; (800060c <lcd_char_cp+0x198>)
 800050c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000510:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	da05      	bge.n	8000526 <lcd_char_cp+0xb2>
 800051a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000522:	619a      	str	r2, [r3, #24]
 8000524:	e004      	b.n	8000530 <lcd_char_cp+0xbc>
 8000526:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800052e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000530:	f7ff fecc 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000534:	4b34      	ldr	r3, [pc, #208]	; (8000608 <lcd_char_cp+0x194>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <lcd_char_cp+0x198>)
 800053c:	2220      	movs	r2, #32
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000540:	4b32      	ldr	r3, [pc, #200]	; (800060c <lcd_char_cp+0x198>)
 8000542:	2210      	movs	r2, #16
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <lcd_char_cp+0x198>)
 8000548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800054e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000556:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000558:	f7ff feb8 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <lcd_char_cp+0x194>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <lcd_char_cp+0x194>)
 8000562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000566:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b00      	cmp	r3, #0
 8000570:	d003      	beq.n	800057a <lcd_char_cp+0x106>
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <lcd_char_cp+0x198>)
 8000574:	2220      	movs	r2, #32
 8000576:	619a      	str	r2, [r3, #24]
 8000578:	e003      	b.n	8000582 <lcd_char_cp+0x10e>
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <lcd_char_cp+0x198>)
 800057c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000580:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <lcd_char_cp+0x120>
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <lcd_char_cp+0x198>)
 800058e:	2210      	movs	r2, #16
 8000590:	619a      	str	r2, [r3, #24]
 8000592:	e003      	b.n	800059c <lcd_char_cp+0x128>
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <lcd_char_cp+0x198>)
 8000596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800059a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d004      	beq.n	80005b0 <lcd_char_cp+0x13c>
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <lcd_char_cp+0x198>)
 80005a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	e003      	b.n	80005b8 <lcd_char_cp+0x144>
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <lcd_char_cp+0x198>)
 80005b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005b6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d005      	beq.n	80005ce <lcd_char_cp+0x15a>
 80005c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	619a      	str	r2, [r3, #24]
 80005cc:	e004      	b.n	80005d8 <lcd_char_cp+0x164>
 80005ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005d6:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80005d8:	f7ff fe78 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <lcd_char_cp+0x194>)
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <lcd_char_cp+0x198>)
 80005e4:	2220      	movs	r2, #32
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <lcd_char_cp+0x198>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <lcd_char_cp+0x198>)
 80005f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	48000800 	.word	0x48000800
 800060c:	48000400 	.word	0x48000400

08000610 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000618:	e008      	b.n	800062c <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff26 	bl	8000474 <lcd_char_cp>
        lcd_delay();
 8000628:	f7ff fe50 	bl	80002cc <lcd_delay>
	while(*out_char)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f2      	bne.n	800061a <lcd_out_cp+0xa>
	}

}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	460b      	mov	r3, r1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	4613      	mov	r3, r2
 800064e:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000650:	20fa      	movs	r0, #250	; 0xfa
 8000652:	f001 f8a1 	bl	8001798 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8000656:	2002      	movs	r0, #2
 8000658:	f7ff fe40 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 800065c:	2032      	movs	r0, #50	; 0x32
 800065e:	f001 f89b 	bl	8001798 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	4313      	orrs	r3, r2
 8000668:	b2da      	uxtb	r2, r3
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	4313      	orrs	r3, r2
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fe30 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 800067c:	2032      	movs	r0, #50	; 0x32
 800067e:	f001 f88b 	bl	8001798 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000682:	2006      	movs	r0, #6
 8000684:	f7ff fe2a 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 8000688:	2032      	movs	r0, #50	; 0x32
 800068a:	f001 f885 	bl	8001798 <HAL_Delay>
    lcd_cmd(0x0E);
 800068e:	200e      	movs	r0, #14
 8000690:	f7ff fe24 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 8000694:	2032      	movs	r0, #50	; 0x32
 8000696:	f001 f87f 	bl	8001798 <HAL_Delay>
    lcd_cmd(0x0C);
 800069a:	200c      	movs	r0, #12
 800069c:	f7ff fe1e 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 80006a0:	2032      	movs	r0, #50	; 0x32
 80006a2:	f001 f879 	bl	8001798 <HAL_Delay>
    lcd_cmd(0x01);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff fe18 	bl	80002dc <lcd_cmd>
    HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f001 f873 	bl	8001798 <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	460a      	mov	r2, r1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d106      	bne.n	80006de <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	337f      	adds	r3, #127	; 0x7f
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe00 	bl	80002dc <lcd_cmd>
 80006dc:	e008      	b.n	80006f0 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d105      	bne.n	80006f0 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	3b41      	subs	r3, #65	; 0x41
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fdf6 	bl	80002dc <lcd_cmd>
	}
    HAL_Delay(5);
 80006f0:	2005      	movs	r0, #5
 80006f2:	f001 f851 	bl	8001798 <HAL_Delay>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	4603      	mov	r3, r0
 8000706:	603a      	str	r2, [r7, #0]
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	460b      	mov	r3, r1
 800070c:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ffd0 	bl	80006ba <lcd_gotoxy>
	lcd_out_cp(out_char);
 800071a:	6838      	ldr	r0, [r7, #0]
 800071c:	f7ff ff78 	bl	8000610 <lcd_out_cp>
    HAL_Delay(5);
 8000720:	2005      	movs	r0, #5
 8000722:	f001 f839 	bl	8001798 <HAL_Delay>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_clear>:
void lcd_clear(void) {
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fdd2 	bl	80002dc <lcd_cmd>
    HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f001 f82d 	bl	8001798 <HAL_Delay>

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <game>:
		}
	} while (value > 4000);
}
// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------- Game ----------------------------------------------------------
void game() {
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
	lcd_clear();
 800074a:	f7ff fff0 	bl	800072e <lcd_clear>
	//srand(time(NULL));
	int randomNumber;
	bool isAlive = true;
 800074e:	2301      	movs	r3, #1
 8000750:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int display[2][6];
	bool canGo = true;
 8000754:	2301      	movs	r3, #1
 8000756:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	/* ====== GENERATE TREE AT THE START ====== */
	for (int i = 0; i < 5; i++) {
 800075a:	2300      	movs	r3, #0
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
 800075e:	e034      	b.n	80007ca <game+0x86>
		randomNumber = rand() % 100;
 8000760:	f004 fc92 	bl	8005088 <rand>
 8000764:	4603      	mov	r3, r0
 8000766:	4aaf      	ldr	r2, [pc, #700]	; (8000a24 <game+0x2e0>)
 8000768:	fb82 1203 	smull	r1, r2, r2, r3
 800076c:	1151      	asrs	r1, r2, #5
 800076e:	17da      	asrs	r2, r3, #31
 8000770:	1a8a      	subs	r2, r1, r2
 8000772:	2164      	movs	r1, #100	; 0x64
 8000774:	fb01 f202 	mul.w	r2, r1, r2
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
		if (randomNumber % 2 == 0) {
 800077c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10f      	bne.n	80007a6 <game+0x62>
			display[0][i] = 4; // set right part of tree on height i to branch
 8000786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	3350      	adds	r3, #80	; 0x50
 800078c:	443b      	add	r3, r7
 800078e:	2204      	movs	r2, #4
 8000790:	f843 2c50 	str.w	r2, [r3, #-80]
			display[1][i] = 7; // set left part of tree on height i to log
 8000794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000796:	3306      	adds	r3, #6
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	3350      	adds	r3, #80	; 0x50
 800079c:	443b      	add	r3, r7
 800079e:	2207      	movs	r2, #7
 80007a0:	f843 2c50 	str.w	r2, [r3, #-80]
 80007a4:	e00e      	b.n	80007c4 <game+0x80>
		} else {
			display[0][i] = 6; // set right part of tree on height i to log
 80007a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	3350      	adds	r3, #80	; 0x50
 80007ac:	443b      	add	r3, r7
 80007ae:	2206      	movs	r2, #6
 80007b0:	f843 2c50 	str.w	r2, [r3, #-80]
			display[1][i] = 5; // set left part of tree on height i to branch
 80007b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007b6:	3306      	adds	r3, #6
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	3350      	adds	r3, #80	; 0x50
 80007bc:	443b      	add	r3, r7
 80007be:	2205      	movs	r2, #5
 80007c0:	f843 2c50 	str.w	r2, [r3, #-80]
	for (int i = 0; i < 5; i++) {
 80007c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007c6:	3301      	adds	r3, #1
 80007c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80007ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	ddc7      	ble.n	8000760 <game+0x1c>
		}
	}
	display[0][5] = 2; // set right part of tree at the bottom to right man
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
	display[1][5] = 7; // set left part of tree at the bottom to log
 80007d4:	2307      	movs	r3, #7
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c

	sprintf(scoreText, "%d", score);
 80007d8:	4b93      	ldr	r3, [pc, #588]	; (8000a28 <game+0x2e4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4993      	ldr	r1, [pc, #588]	; (8000a2c <game+0x2e8>)
 80007e0:	4893      	ldr	r0, [pc, #588]	; (8000a30 <game+0x2ec>)
 80007e2:	f004 fd51 	bl	8005288 <siprintf>
	lcd_print(1, 1, "SCORE:");
 80007e6:	4a93      	ldr	r2, [pc, #588]	; (8000a34 <game+0x2f0>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff ff87 	bl	80006fe <lcd_print>
	lcd_print(2, 1, scoreText);
 80007f0:	4a8f      	ldr	r2, [pc, #572]	; (8000a30 <game+0x2ec>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff ff82 	bl	80006fe <lcd_print>
	lcd_print(1, 16, "|");
 80007fa:	4a8f      	ldr	r2, [pc, #572]	; (8000a38 <game+0x2f4>)
 80007fc:	2110      	movs	r1, #16
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff7d 	bl	80006fe <lcd_print>
	lcd_print(2, 16, "|");
 8000804:	4a8c      	ldr	r2, [pc, #560]	; (8000a38 <game+0x2f4>)
 8000806:	2110      	movs	r1, #16
 8000808:	2002      	movs	r0, #2
 800080a:	f7ff ff78 	bl	80006fe <lcd_print>
	for (int i = 0; i < 2; i++) {
 800080e:	2300      	movs	r3, #0
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
 8000812:	e027      	b.n	8000864 <game+0x120>
		for (int j = 0; j < 6; j++) {
 8000814:	2300      	movs	r3, #0
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
 8000818:	e01e      	b.n	8000858 <game+0x114>
			lcd_gotoxy(i + 1, j + 10);
 800081a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800081c:	b2db      	uxtb	r3, r3
 800081e:	3301      	adds	r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000824:	b2db      	uxtb	r3, r3
 8000826:	330a      	adds	r3, #10
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4619      	mov	r1, r3
 800082c:	4610      	mov	r0, r2
 800082e:	f7ff ff44 	bl	80006ba <lcd_gotoxy>
			lcd_char_cp(display[i][j]);
 8000832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	3350      	adds	r3, #80	; 0x50
 8000844:	443b      	add	r3, r7
 8000846:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe11 	bl	8000474 <lcd_char_cp>
		for (int j = 0; j < 6; j++) {
 8000852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000854:	3301      	adds	r3, #1
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
 8000858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800085a:	2b05      	cmp	r3, #5
 800085c:	dddd      	ble.n	800081a <game+0xd6>
	for (int i = 0; i < 2; i++) {
 800085e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000860:	3301      	adds	r3, #1
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
 8000864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000866:	2b01      	cmp	r3, #1
 8000868:	ddd4      	ble.n	8000814 <game+0xd0>
	}



	/* ====== MAIN GAME LOOP ====== */
	while (isAlive) {
 800086a:	e18a      	b.n	8000b82 <game+0x43e>

		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800086c:	2200      	movs	r2, #0
 800086e:	4973      	ldr	r1, [pc, #460]	; (8000a3c <game+0x2f8>)
 8000870:	4873      	ldr	r0, [pc, #460]	; (8000a40 <game+0x2fc>)
 8000872:	f004 f9bf 	bl	8004bf4 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000876:	2200      	movs	r2, #0
 8000878:	4972      	ldr	r1, [pc, #456]	; (8000a44 <game+0x300>)
 800087a:	4871      	ldr	r0, [pc, #452]	; (8000a40 <game+0x2fc>)
 800087c:	f004 f8d7 	bl	8004a2e <HAL_RTC_GetTime>
		Milliseconds = ((currentTime.SubSeconds)/((float)currentTime.SecondFraction+1) * 100);
 8000880:	4b70      	ldr	r3, [pc, #448]	; (8000a44 <game+0x300>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800088c:	4b6d      	ldr	r3, [pc, #436]	; (8000a44 <game+0x300>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	ee07 3a90 	vmov	s15, r3
 8000894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800089c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80008a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000a48 <game+0x304>
 80008a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b0:	ee17 3a90 	vmov	r3, s15
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b65      	ldr	r3, [pc, #404]	; (8000a4c <game+0x308>)
 80008b8:	801a      	strh	r2, [r3, #0]
		if (currentTime.Seconds > 1 && !canGo) {
 80008ba:	4b62      	ldr	r3, [pc, #392]	; (8000a44 <game+0x300>)
 80008bc:	789b      	ldrb	r3, [r3, #2]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d91f      	bls.n	8000902 <game+0x1be>
 80008c2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008c6:	f083 0301 	eor.w	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d018      	beq.n	8000902 <game+0x1be>
			canGo = true;
 80008d0:	2301      	movs	r3, #1
 80008d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			newTime = currentTime;
 80008d6:	4a5e      	ldr	r2, [pc, #376]	; (8000a50 <game+0x30c>)
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <game+0x300>)
 80008da:	4614      	mov	r4, r2
 80008dc:	461d      	mov	r5, r3
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	682b      	ldr	r3, [r5, #0]
 80008e4:	6023      	str	r3, [r4, #0]
			newTime.Seconds = 0;
 80008e6:	4b5a      	ldr	r3, [pc, #360]	; (8000a50 <game+0x30c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	709a      	strb	r2, [r3, #2]
			newTime.SecondFraction = 0;
 80008ec:	4b58      	ldr	r3, [pc, #352]	; (8000a50 <game+0x30c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
			newTime.SubSeconds = 0;
 80008f2:	4b57      	ldr	r3, [pc, #348]	; (8000a50 <game+0x30c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
			HAL_RTC_SetTime(&hrtc, &newTime, RTC_FORMAT_BIN);
 80008f8:	2200      	movs	r2, #0
 80008fa:	4955      	ldr	r1, [pc, #340]	; (8000a50 <game+0x30c>)
 80008fc:	4850      	ldr	r0, [pc, #320]	; (8000a40 <game+0x2fc>)
 80008fe:	f003 fff9 	bl	80048f4 <HAL_RTC_SetTime>
		}

		HAL_Delay(50);
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f000 ff48 	bl	8001798 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000908:	4852      	ldr	r0, [pc, #328]	; (8000a54 <game+0x310>)
 800090a:	f001 fa9d 	bl	8001e48 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 800090e:	210a      	movs	r1, #10
 8000910:	4850      	ldr	r0, [pc, #320]	; (8000a54 <game+0x310>)
 8000912:	f001 fb53 	bl	8001fbc <HAL_ADC_PollForConversion>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	f040 8132 	bne.w	8000b82 <game+0x43e>
			value = HAL_ADC_GetValue(&hadc1);
 800091e:	484d      	ldr	r0, [pc, #308]	; (8000a54 <game+0x310>)
 8000920:	f001 fc24 	bl	800216c <HAL_ADC_GetValue>
 8000924:	4603      	mov	r3, r0
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <game+0x314>)
 800092a:	801a      	strh	r2, [r3, #0]

			if (canGo) {
 800092c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 8126 	beq.w	8000b82 <game+0x43e>
				canGo = false;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				if (value > 700 && value < 820) { // move player to right
 800093c:	4b46      	ldr	r3, [pc, #280]	; (8000a58 <game+0x314>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000944:	d91b      	bls.n	800097e <game+0x23a>
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <game+0x314>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800094e:	d216      	bcs.n	800097e <game+0x23a>
					display[0][5] = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
					display[1][5] = 7;
 8000954:	2307      	movs	r3, #7
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
					lcd_gotoxy(1, 15);
 8000958:	210f      	movs	r1, #15
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fead 	bl	80006ba <lcd_gotoxy>
					lcd_char_cp(display[0][5]);
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fd85 	bl	8000474 <lcd_char_cp>
					lcd_gotoxy(2, 15);
 800096a:	210f      	movs	r1, #15
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fea4 	bl	80006ba <lcd_gotoxy>
					lcd_char_cp(display[1][5]);
 8000972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd7c 	bl	8000474 <lcd_char_cp>
 800097c:	e01f      	b.n	80009be <game+0x27a>
				} else if (value > 1800 && value < 1920) { // move player to left
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <game+0x314>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000986:	d91a      	bls.n	80009be <game+0x27a>
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <game+0x314>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000990:	d215      	bcs.n	80009be <game+0x27a>
					display[0][5] = 6;
 8000992:	2306      	movs	r3, #6
 8000994:	617b      	str	r3, [r7, #20]
					display[1][5] = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
					lcd_gotoxy(1, 15);
 800099a:	210f      	movs	r1, #15
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff fe8c 	bl	80006ba <lcd_gotoxy>
					lcd_char_cp(display[0][5]);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fd64 	bl	8000474 <lcd_char_cp>
					lcd_gotoxy(2, 15);
 80009ac:	210f      	movs	r1, #15
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff fe83 	bl	80006ba <lcd_gotoxy>
					lcd_char_cp(display[1][5]);
 80009b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fd5b 	bl	8000474 <lcd_char_cp>
				}

				randomNumber = rand() % 100;
 80009be:	f004 fb63 	bl	8005088 <rand>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <game+0x2e0>)
 80009c6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ca:	1151      	asrs	r1, r2, #5
 80009cc:	17da      	asrs	r2, r3, #31
 80009ce:	1a8a      	subs	r2, r1, r2
 80009d0:	2164      	movs	r1, #100	; 0x64
 80009d2:	fb01 f202 	mul.w	r2, r1, r2
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30

				/* ====== LOOSING CONDITION ====== */
				 if (display[0][5] == 0 && display[0][4] == 4) isAlive = false;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d106      	bne.n	80009ee <game+0x2aa>
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d103      	bne.n	80009ee <game+0x2aa>
 80009e6:	2300      	movs	r3, #0
 80009e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80009ec:	e008      	b.n	8000a00 <game+0x2bc>
				 else if (display[1][5] == 1 && display[1][4] == 5) isAlive = false;
 80009ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d105      	bne.n	8000a00 <game+0x2bc>
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	2b05      	cmp	r3, #5
 80009f8:	d102      	bne.n	8000a00 <game+0x2bc>
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

				/* ====== MOVING BOTTOM PART OF TREE DOWN ====== */
				if (display[0][5] == 0) {
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <game+0x2cc>
					display[0][5] = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	617b      	str	r3, [r7, #20]
					display[1][5] = display[1][4];
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a0e:	e006      	b.n	8000a1e <game+0x2da>
				} else if (display[1][5] == 1) {
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d103      	bne.n	8000a1e <game+0x2da>
					display[1][5] = 3;
 8000a16:	2303      	movs	r3, #3
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
					display[0][5] = display[0][4];
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	617b      	str	r3, [r7, #20]
				}

				/* ====== MOVING MIDDLE PART OF TREE DOWN ====== */
				for (int i = 4; i > 0; i--) {
 8000a1e:	2304      	movs	r3, #4
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a22:	e03a      	b.n	8000a9a <game+0x356>
 8000a24:	51eb851f 	.word	0x51eb851f
 8000a28:	20000118 	.word	0x20000118
 8000a2c:	08006444 	.word	0x08006444
 8000a30:	2000011c 	.word	0x2000011c
 8000a34:	08006448 	.word	0x08006448
 8000a38:	08006450 	.word	0x08006450
 8000a3c:	20000154 	.word	0x20000154
 8000a40:	200000f0 	.word	0x200000f0
 8000a44:	20000140 	.word	0x20000140
 8000a48:	42c80000 	.word	0x42c80000
 8000a4c:	20000158 	.word	0x20000158
 8000a50:	2000012c 	.word	0x2000012c
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	20000114 	.word	0x20000114
					display[0][i] = display[0][i - 1]; // move right part of the tree down by 1
 8000a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	3350      	adds	r3, #80	; 0x50
 8000a64:	443b      	add	r3, r7
 8000a66:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8000a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	3350      	adds	r3, #80	; 0x50
 8000a70:	443b      	add	r3, r7
 8000a72:	f843 2c50 	str.w	r2, [r3, #-80]
					display[1][i] = display[1][i - 1]; // move left part of the tree down by 1
 8000a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	3350      	adds	r3, #80	; 0x50
 8000a80:	443b      	add	r3, r7
 8000a82:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8000a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a88:	3306      	adds	r3, #6
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	3350      	adds	r3, #80	; 0x50
 8000a8e:	443b      	add	r3, r7
 8000a90:	f843 2c50 	str.w	r2, [r3, #-80]
				for (int i = 4; i > 0; i--) {
 8000a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a96:	3b01      	subs	r3, #1
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dcdd      	bgt.n	8000a5c <game+0x318>
				}

				/* ====== GENERATING TOP OF THE TREE ====== */
				if (randomNumber % 2 == 0) {
 8000aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d104      	bne.n	8000ab4 <game+0x370>
					display[0][0] = 4; // set right part of tree on height i to branch
 8000aaa:	2304      	movs	r3, #4
 8000aac:	603b      	str	r3, [r7, #0]
					display[1][0] = 7; // set left part of tree on height i to log
 8000aae:	2307      	movs	r3, #7
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	e003      	b.n	8000abc <game+0x378>
				} else {
					display[0][0] = 6; // set right part of tree on height i to log
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	603b      	str	r3, [r7, #0]
					display[1][0] = 5; // set left part of tree on height i to branch
 8000ab8:	2305      	movs	r3, #5
 8000aba:	61bb      	str	r3, [r7, #24]
				}

				/* ====== DISPLAYING EVERYTHING ====== */
				HAL_Delay(300);
 8000abc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ac0:	f000 fe6a 	bl	8001798 <HAL_Delay>
				if ((value > 700 && value < 820)
 8000ac4:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <game+0x454>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000acc:	d904      	bls.n	8000ad8 <game+0x394>
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <game+0x454>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8000ad6:	d309      	bcc.n	8000aec <game+0x3a8>
						|| (value > 1800 && value < 1920)) {
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <game+0x454>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000ae0:	d94f      	bls.n	8000b82 <game+0x43e>
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <game+0x454>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000aea:	d24a      	bcs.n	8000b82 <game+0x43e>
					lcd_clear();
 8000aec:	f7ff fe1f 	bl	800072e <lcd_clear>
					sprintf(scoreText, "%d", score);
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <game+0x458>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	492a      	ldr	r1, [pc, #168]	; (8000ba0 <game+0x45c>)
 8000af8:	482a      	ldr	r0, [pc, #168]	; (8000ba4 <game+0x460>)
 8000afa:	f004 fbc5 	bl	8005288 <siprintf>
					lcd_print(1, 1, "SCORE:");
 8000afe:	4a2a      	ldr	r2, [pc, #168]	; (8000ba8 <game+0x464>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fdfb 	bl	80006fe <lcd_print>
					lcd_print(2, 1, scoreText);
 8000b08:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <game+0x460>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fdf6 	bl	80006fe <lcd_print>
					lcd_print(1, 16, "|");
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <game+0x468>)
 8000b14:	2110      	movs	r1, #16
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fdf1 	bl	80006fe <lcd_print>
					lcd_print(2, 16, "|");
 8000b1c:	4a23      	ldr	r2, [pc, #140]	; (8000bac <game+0x468>)
 8000b1e:	2110      	movs	r1, #16
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff fdec 	bl	80006fe <lcd_print>
					for (int i = 0; i < 2; i++) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b2a:	e027      	b.n	8000b7c <game+0x438>
						for (int j = 0; j < 6; j++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b30:	e01e      	b.n	8000b70 <game+0x42c>
							lcd_gotoxy(i + 1, j + 10);
 8000b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	330a      	adds	r3, #10
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	4610      	mov	r0, r2
 8000b46:	f7ff fdb8 	bl	80006ba <lcd_gotoxy>
							lcd_char_cp(display[i][j]);
 8000b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	3350      	adds	r3, #80	; 0x50
 8000b5c:	443b      	add	r3, r7
 8000b5e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fc85 	bl	8000474 <lcd_char_cp>
						for (int j = 0; j < 6; j++) {
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	dddd      	ble.n	8000b32 <game+0x3ee>
					for (int i = 0; i < 2; i++) {
 8000b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b78:	3301      	adds	r3, #1
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	ddd4      	ble.n	8000b2c <game+0x3e8>
	while (isAlive) {
 8000b82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f47f ae70 	bne.w	800086c <game+0x128>
					}
				}
			}
		}
	}
	gameOver();
 8000b8c:	f000 f810 	bl	8000bb0 <gameOver>
}
 8000b90:	bf00      	nop
 8000b92:	3750      	adds	r7, #80	; 0x50
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bdb0      	pop	{r4, r5, r7, pc}
 8000b98:	20000114 	.word	0x20000114
 8000b9c:	20000118 	.word	0x20000118
 8000ba0:	08006444 	.word	0x08006444
 8000ba4:	2000011c 	.word	0x2000011c
 8000ba8:	08006448 	.word	0x08006448
 8000bac:	08006450 	.word	0x08006450

08000bb0 <gameOver>:
// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------- Game over screen ----------------------------------------------------
void gameOver() {
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	lcd_clear();
 8000bb6:	f7ff fdba 	bl	800072e <lcd_clear>

	sprintf(scoreText, "Score = %d", score);
 8000bba:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <gameOver+0x108>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	493e      	ldr	r1, [pc, #248]	; (8000cbc <gameOver+0x10c>)
 8000bc2:	483f      	ldr	r0, [pc, #252]	; (8000cc0 <gameOver+0x110>)
 8000bc4:	f004 fb60 	bl	8005288 <siprintf>
	int startCol = (16 - strlen(scoreText)) / 2 + 1;
 8000bc8:	483d      	ldr	r0, [pc, #244]	; (8000cc0 <gameOver+0x110>)
 8000bca:	f7ff fb01 	bl	80001d0 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f1c3 0310 	rsb	r3, r3, #16
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	603b      	str	r3, [r7, #0]
	bool display = true;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]

	do {
		HAL_Delay(50);
 8000bde:	2032      	movs	r0, #50	; 0x32
 8000be0:	f000 fdda 	bl	8001798 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000be4:	4837      	ldr	r0, [pc, #220]	; (8000cc4 <gameOver+0x114>)
 8000be6:	f001 f92f 	bl	8001e48 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000bea:	210a      	movs	r1, #10
 8000bec:	4835      	ldr	r0, [pc, #212]	; (8000cc4 <gameOver+0x114>)
 8000bee:	f001 f9e5 	bl	8001fbc <HAL_ADC_PollForConversion>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d155      	bne.n	8000ca4 <gameOver+0xf4>
			value = HAL_ADC_GetValue(&hadc1);
 8000bf8:	4832      	ldr	r0, [pc, #200]	; (8000cc4 <gameOver+0x114>)
 8000bfa:	f001 fab7 	bl	800216c <HAL_ADC_GetValue>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <gameOver+0x118>)
 8000c04:	801a      	strh	r2, [r3, #0]

			HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000c06:	2200      	movs	r2, #0
 8000c08:	4930      	ldr	r1, [pc, #192]	; (8000ccc <gameOver+0x11c>)
 8000c0a:	4831      	ldr	r0, [pc, #196]	; (8000cd0 <gameOver+0x120>)
 8000c0c:	f003 fff2 	bl	8004bf4 <HAL_RTC_GetDate>
			HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000c10:	2200      	movs	r2, #0
 8000c12:	4930      	ldr	r1, [pc, #192]	; (8000cd4 <gameOver+0x124>)
 8000c14:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <gameOver+0x120>)
 8000c16:	f003 ff0a 	bl	8004a2e <HAL_RTC_GetTime>
			if (currentTime.Seconds > 2) {
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <gameOver+0x124>)
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d925      	bls.n	8000c6e <gameOver+0xbe>
				display = !display;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf14      	ite	ne
 8000c28:	2301      	movne	r3, #1
 8000c2a:	2300      	moveq	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f083 0301 	eor.w	r3, r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	71fb      	strb	r3, [r7, #7]
				newTime = currentTime;
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <gameOver+0x128>)
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <gameOver+0x124>)
 8000c42:	4614      	mov	r4, r2
 8000c44:	461d      	mov	r5, r3
 8000c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	6023      	str	r3, [r4, #0]
				newTime.Seconds = 0;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <gameOver+0x128>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	709a      	strb	r2, [r3, #2]
				newTime.SecondFraction = 0;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <gameOver+0x128>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
				newTime.SubSeconds = 0;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <gameOver+0x128>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
				HAL_RTC_SetTime(&hrtc, &newTime, RTC_FORMAT_BIN);
 8000c60:	2200      	movs	r2, #0
 8000c62:	491d      	ldr	r1, [pc, #116]	; (8000cd8 <gameOver+0x128>)
 8000c64:	481a      	ldr	r0, [pc, #104]	; (8000cd0 <gameOver+0x120>)
 8000c66:	f003 fe45 	bl	80048f4 <HAL_RTC_SetTime>
				lcd_clear();
 8000c6a:	f7ff fd60 	bl	800072e <lcd_clear>
			}

			if (display) {
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <gameOver+0xd4>
				lcd_print(1, startCol, scoreText);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <gameOver+0x110>)
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fd3e 	bl	80006fe <lcd_print>
 8000c82:	e00a      	b.n	8000c9a <gameOver+0xea>
			} else if (!display) {
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f083 0301 	eor.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <gameOver+0xea>
				lcd_print(1, 3, "Game Over :(");
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <gameOver+0x12c>)
 8000c92:	2103      	movs	r1, #3
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fd32 	bl	80006fe <lcd_print>
			}
			lcd_print(2, 3, "Menu = PRESS");
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <gameOver+0x130>)
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f7ff fd2d 	bl	80006fe <lcd_print>
		}
	} while (value > 4000);
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <gameOver+0x118>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000cac:	d897      	bhi.n	8000bde <gameOver+0x2e>
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb8:	20000118 	.word	0x20000118
 8000cbc:	08006454 	.word	0x08006454
 8000cc0:	2000011c 	.word	0x2000011c
 8000cc4:	2000008c 	.word	0x2000008c
 8000cc8:	20000114 	.word	0x20000114
 8000ccc:	20000154 	.word	0x20000154
 8000cd0:	200000f0 	.word	0x200000f0
 8000cd4:	20000140 	.word	0x20000140
 8000cd8:	2000012c 	.word	0x2000012c
 8000cdc:	08006460 	.word	0x08006460
 8000ce0:	08006470 	.word	0x08006470

08000ce4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b098      	sub	sp, #96	; 0x60
 8000ce8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// ----------------------------------------------------- Custom characters variables ----------------------------------------------------
	char rightManHit[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x04, 0x1F, 0x1F };
 8000cea:	4a77      	ldr	r2, [pc, #476]	; (8000ec8 <main+0x1e4>)
 8000cec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf4:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftManHit[] = { 0x1F, 0x1F, 0x04, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 8000cf8:	4a74      	ldr	r2, [pc, #464]	; (8000ecc <main+0x1e8>)
 8000cfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d02:	e883 0003 	stmia.w	r3, {r0, r1}

	char rightMan[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x00, 0x1F, 0x1F };
 8000d06:	4a72      	ldr	r2, [pc, #456]	; (8000ed0 <main+0x1ec>)
 8000d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d10:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftMan[] = { 0x1F, 0x1F, 0x00, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 8000d14:	4a6f      	ldr	r2, [pc, #444]	; (8000ed4 <main+0x1f0>)
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d1e:	e883 0003 	stmia.w	r3, {r0, r1}

	char branchRight[] = { 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x1F, 0x1F };
 8000d22:	4a6d      	ldr	r2, [pc, #436]	; (8000ed8 <main+0x1f4>)
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d2c:	e883 0003 	stmia.w	r3, {r0, r1}
	char branchLeft[] = { 0x1F, 0x1F, 0x03, 0x02, 0x02, 0x02, 0x02, 0x00 };
 8000d30:	4a6a      	ldr	r2, [pc, #424]	; (8000edc <main+0x1f8>)
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d3a:	e883 0003 	stmia.w	r3, {r0, r1}

	char logRight[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F };
 8000d3e:	4a68      	ldr	r2, [pc, #416]	; (8000ee0 <main+0x1fc>)
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d48:	e883 0003 	stmia.w	r3, {r0, r1}
	char logLeft[] = { 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000d4c:	4a65      	ldr	r2, [pc, #404]	; (8000ee4 <main+0x200>)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d54:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d58:	f000 fca9 	bl	80016ae <HAL_Init>

	/* USER CODE BEGIN Init */

	// ---------------------------------------------------- Initialization of LCD screen -----------------------------------------------------
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fc6c 	bl	800063e <lcd_init>
	// ---------------------------------------------------------------------------------------------------------------------------------------

	KPAD_init(&hadc1);
 8000d66:	4860      	ldr	r0, [pc, #384]	; (8000ee8 <main+0x204>)
 8000d68:	f7ff fa8a 	bl	8000280 <KPAD_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d6c:	f000 f8be 	bl	8000eec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d70:	f000 fa18 	bl	80011a4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d74:	f000 f90e 	bl	8000f94 <MX_ADC1_Init>
	MX_RTC_Init();
 8000d78:	f000 f982 	bl	8001080 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	// ------------------------------------------------ Assigning custom characters to memory ------------------------------------------------
	lcd_cmd(0x40);
 8000d7c:	2040      	movs	r0, #64	; 0x40
 8000d7e:	f7ff faad 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d86:	e00a      	b.n	8000d9e <main+0xba>
		lcd_char_cp(rightManHit[i]);
 8000d88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fb6e 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	ddf1      	ble.n	8000d88 <main+0xa4>
	lcd_cmd(0x40 + 8);
 8000da4:	2048      	movs	r0, #72	; 0x48
 8000da6:	f7ff fa99 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dae:	e00a      	b.n	8000dc6 <main+0xe2>
		lcd_char_cp(leftManHit[i]);
 8000db0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb5a 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dc8:	2b07      	cmp	r3, #7
 8000dca:	ddf1      	ble.n	8000db0 <main+0xcc>
	lcd_cmd(0x40 + 16);
 8000dcc:	2050      	movs	r0, #80	; 0x50
 8000dce:	f7ff fa85 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8000dd6:	e00a      	b.n	8000dee <main+0x10a>
		lcd_char_cp(rightMan[i]);
 8000dd8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fb46 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dea:	3301      	adds	r3, #1
 8000dec:	657b      	str	r3, [r7, #84]	; 0x54
 8000dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df0:	2b07      	cmp	r3, #7
 8000df2:	ddf1      	ble.n	8000dd8 <main+0xf4>
	lcd_cmd(0x40 + 24);
 8000df4:	2058      	movs	r0, #88	; 0x58
 8000df6:	f7ff fa71 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8000dfe:	e00a      	b.n	8000e16 <main+0x132>
		lcd_char_cp(leftMan[i]);
 8000e00:	f107 0220 	add.w	r2, r7, #32
 8000e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb32 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e12:	3301      	adds	r3, #1
 8000e14:	653b      	str	r3, [r7, #80]	; 0x50
 8000e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e18:	2b07      	cmp	r3, #7
 8000e1a:	ddf1      	ble.n	8000e00 <main+0x11c>
	lcd_cmd(0x40 + 32);
 8000e1c:	2060      	movs	r0, #96	; 0x60
 8000e1e:	f7ff fa5d 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e26:	e00a      	b.n	8000e3e <main+0x15a>
		lcd_char_cp(branchRight[i]);
 8000e28:	f107 0218 	add.w	r2, r7, #24
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb1e 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	ddf1      	ble.n	8000e28 <main+0x144>
	lcd_cmd(0x40 + 40);
 8000e44:	2068      	movs	r0, #104	; 0x68
 8000e46:	f7ff fa49 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e4e:	e00a      	b.n	8000e66 <main+0x182>
		lcd_char_cp(branchLeft[i]);
 8000e50:	f107 0210 	add.w	r2, r7, #16
 8000e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb0a 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e62:	3301      	adds	r3, #1
 8000e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	ddf1      	ble.n	8000e50 <main+0x16c>
	lcd_cmd(0x40 + 48);
 8000e6c:	2070      	movs	r0, #112	; 0x70
 8000e6e:	f7ff fa35 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	647b      	str	r3, [r7, #68]	; 0x44
 8000e76:	e00a      	b.n	8000e8e <main+0x1aa>
		lcd_char_cp(logRight[i]);
 8000e78:	f107 0208 	add.w	r2, r7, #8
 8000e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff faf6 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e90:	2b07      	cmp	r3, #7
 8000e92:	ddf1      	ble.n	8000e78 <main+0x194>
	lcd_cmd(0x40 + 56);
 8000e94:	2078      	movs	r0, #120	; 0x78
 8000e96:	f7ff fa21 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8000e9e:	e009      	b.n	8000eb4 <main+0x1d0>
		lcd_char_cp(logLeft[i]);
 8000ea0:	463a      	mov	r2, r7
 8000ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fae3 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8000eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb6:	2b07      	cmp	r3, #7
 8000eb8:	ddf2      	ble.n	8000ea0 <main+0x1bc>

	lcd_cmd(0x80);
 8000eba:	2080      	movs	r0, #128	; 0x80
 8000ebc:	f7ff fa0e 	bl	80002dc <lcd_cmd>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//menu();
		game();
 8000ec0:	f7ff fc40 	bl	8000744 <game>
 8000ec4:	e7fc      	b.n	8000ec0 <main+0x1dc>
 8000ec6:	bf00      	nop
 8000ec8:	08006480 	.word	0x08006480
 8000ecc:	08006488 	.word	0x08006488
 8000ed0:	08006490 	.word	0x08006490
 8000ed4:	08006498 	.word	0x08006498
 8000ed8:	080064a0 	.word	0x080064a0
 8000edc:	080064a8 	.word	0x080064a8
 8000ee0:	080064b0 	.word	0x080064b0
 8000ee4:	080064b8 	.word	0x080064b8
 8000ee8:	2000008c 	.word	0x2000008c

08000eec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b096      	sub	sp, #88	; 0x58
 8000ef0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2244      	movs	r2, #68	; 0x44
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 fa27 	bl	800534e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f00:	463b      	mov	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f12:	f002 f98d 	bl	8003230 <HAL_PWREx_ControlVoltageScaling>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000f1c:	f000 f9d0 	bl	80012c0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000f20:	2318      	movs	r3, #24
 8000f22:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f30:	2360      	movs	r3, #96	; 0x60
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000f40:	2310      	movs	r3, #16
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f44:	2307      	movs	r3, #7
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 f9c1 	bl	80032dc <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x78>
		Error_Handler();
 8000f60:	f000 f9ae 	bl	80012c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000f6c:	23a0      	movs	r3, #160	; 0xa0
 8000f6e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fd89 	bl	8003a94 <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xa0>
		Error_Handler();
 8000f88:	f000 f99a 	bl	80012c0 <Error_Handler>
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3758      	adds	r7, #88	; 0x58
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fb8:	4a2f      	ldr	r2, [pc, #188]	; (8001078 <MX_ADC1_Init+0xe4>)
 8000fba:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_ADC1_Init+0xe0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_ADC1_Init+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_ADC1_Init+0xe0>)
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_ADC1_Init+0xe0>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001016:	4817      	ldr	r0, [pc, #92]	; (8001074 <MX_ADC1_Init+0xe0>)
 8001018:	f000 fdc6 	bl	8001ba8 <HAL_ADC_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_ADC1_Init+0x92>
		Error_Handler();
 8001022:	f000 f94d 	bl	80012c0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4810      	ldr	r0, [pc, #64]	; (8001074 <MX_ADC1_Init+0xe0>)
 8001032:	f001 fd47 	bl	8002ac4 <HAL_ADCEx_MultiModeConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0xac>
		Error_Handler();
 800103c:	f000 f940 	bl	80012c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_ADC1_Init+0xe8>)
 8001042:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001044:	2306      	movs	r3, #6
 8001046:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104c:	237f      	movs	r3, #127	; 0x7f
 800104e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001050:	2304      	movs	r3, #4
 8001052:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_ADC1_Init+0xe0>)
 800105e:	f001 f893 	bl	8002188 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0xd8>
		Error_Handler();
 8001068:	f000 f92a 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000008c 	.word	0x2000008c
 8001078:	50040000 	.word	0x50040000
 800107c:	14f00020 	.word	0x14f00020

08001080 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b092      	sub	sp, #72	; 0x48
 8001084:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001086:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = { 0 };
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	222c      	movs	r2, #44	; 0x2c
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 f954 	bl	800534e <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <MX_RTC_Init+0x118>)
 80010a8:	4a3c      	ldr	r2, [pc, #240]	; (800119c <MX_RTC_Init+0x11c>)
 80010aa:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <MX_RTC_Init+0x118>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <MX_RTC_Init+0x118>)
 80010b4:	227f      	movs	r2, #127	; 0x7f
 80010b6:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <MX_RTC_Init+0x118>)
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <MX_RTC_Init+0x118>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <MX_RTC_Init+0x118>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <MX_RTC_Init+0x118>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <MX_RTC_Init+0x118>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_RTC_Init+0x118>)
 80010d8:	f003 fb84 	bl	80047e4 <HAL_RTC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_RTC_Init+0x66>
		Error_Handler();
 80010e2:	f000 f8ed 	bl	80012c0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	4823      	ldr	r0, [pc, #140]	; (8001198 <MX_RTC_Init+0x118>)
 800110a:	f003 fbf3 	bl	80048f4 <HAL_RTC_SetTime>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_RTC_Init+0x98>
		Error_Handler();
 8001114:	f000 f8d4 	bl	80012c0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 800111e:	2301      	movs	r3, #1
 8001120:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8001124:	2301      	movs	r3, #1
 8001126:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001134:	2201      	movs	r2, #1
 8001136:	4619      	mov	r1, r3
 8001138:	4817      	ldr	r0, [pc, #92]	; (8001198 <MX_RTC_Init+0x118>)
 800113a:	f003 fcd4 	bl	8004ae6 <HAL_RTC_SetDate>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_RTC_Init+0xc8>
		Error_Handler();
 8001144:	f000 f8bc 	bl	80012c0 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001148:	2300      	movs	r3, #0
 800114a:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 800114c:	2300      	movs	r3, #0
 800114e:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001150:	2300      	movs	r3, #0
 8001152:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_RTC_Init+0x120>)
 8001162:	61bb      	str	r3, [r7, #24]
			| RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 800116c:	2301      	movs	r3, #1
 800116e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8001172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_RTC_Init+0x118>)
 8001180:	f003 fd85 	bl	8004c8e <HAL_RTC_SetAlarm>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_RTC_Init+0x10e>
		Error_Handler();
 800118a:	f000 f899 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3748      	adds	r7, #72	; 0x48
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000f0 	.word	0x200000f0
 800119c:	40002800 	.word	0x40002800
 80011a0:	80808000 	.word	0x80808000

080011a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a37      	ldr	r2, [pc, #220]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a31      	ldr	r2, [pc, #196]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <MX_GPIO_Init+0x110>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin,
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001208:	482b      	ldr	r0, [pc, #172]	; (80012b8 <MX_GPIO_Init+0x114>)
 800120a:	f001 ffc7 	bl	800319c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	482a      	ldr	r0, [pc, #168]	; (80012bc <MX_GPIO_Init+0x118>)
 8001214:	f001 ffc2 	bl	800319c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin | LCD_RS_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f001 ffbb 	bl	800319c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001230:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4619      	mov	r1, r3
 800123c:	481f      	ldr	r0, [pc, #124]	; (80012bc <MX_GPIO_Init+0x118>)
 800123e:	f001 fe03 	bl	8002e48 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin;
 8001242:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001246:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4619      	mov	r1, r3
 800125a:	4817      	ldr	r0, [pc, #92]	; (80012b8 <MX_GPIO_Init+0x114>)
 800125c:	f001 fdf4 	bl	8002e48 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_EN_Pin */
	GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <MX_GPIO_Init+0x118>)
 8001278:	f001 fde6 	bl	8002e48 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = LCD_D7_Pin | LCD_RS_Pin;
 800127c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001280:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f001 fdd6 	bl	8002e48 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2028      	movs	r0, #40	; 0x28
 80012a2:	f001 fd9a 	bl	8002dda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a6:	2028      	movs	r0, #40	; 0x28
 80012a8:	f001 fdb3 	bl	8002e12 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800

080012c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012c8:	e7fe      	b.n	80012c8 <Error_Handler+0x8>
	...

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_MspInit+0x44>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_MspInit+0x44>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6613      	str	r3, [r2, #96]	; 0x60
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_MspInit+0x44>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_MspInit+0x44>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_MspInit+0x44>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6593      	str	r3, [r2, #88]	; 0x58
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_MspInit+0x44>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0ac      	sub	sp, #176	; 0xb0
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2288      	movs	r2, #136	; 0x88
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f004 f80a 	bl	800534e <memset>
  if(hadc->Instance==ADC1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_ADC_MspInit+0xc8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d147      	bne.n	80013d4 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001348:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800134a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800134e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800135a:	2310      	movs	r3, #16
 800135c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001362:	2302      	movs	r3, #2
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001366:	2302      	movs	r3, #2
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800136a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fd79 	bl	8003e6c <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001380:	f7ff ff9e 	bl	80012c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0xcc>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <HAL_ADC_MspInit+0xcc>)
 800138a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0xcc>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_ADC_MspInit+0xcc>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0xcc>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_ADC_MspInit+0xcc>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LCD_Pin;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013ba:	230b      	movs	r3, #11
 80013bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f001 fd3a 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	37b0      	adds	r7, #176	; 0xb0
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	50040000 	.word	0x50040000
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0a4      	sub	sp, #144	; 0x90
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2288      	movs	r2, #136	; 0x88
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 ffaa 	bl	800534e <memset>
  if(hrtc->Instance==RTC)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_RTC_MspInit+0x5c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d118      	bne.n	8001436 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800140a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fd28 	bl	8003e6c <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001422:	f7ff ff4d 	bl	80012c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_RTC_MspInit+0x60>)
 8001428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_RTC_MspInit+0x60>)
 800142e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3790      	adds	r7, #144	; 0x90
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40002800 	.word	0x40002800
 8001444:	40021000 	.word	0x40021000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 f960 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80014a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a4:	f001 fe92 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_kill>:

int _kill(int pid, int sig)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014c6:	f003 ff91 	bl	80053ec <__errno>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2216      	movs	r2, #22
 80014ce:	601a      	str	r2, [r3, #0]
  return -1;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_exit>:

void _exit (int status)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ffe7 	bl	80014bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ee:	e7fe      	b.n	80014ee <_exit+0x12>

080014f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
  }

  return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
  }
  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	605a      	str	r2, [r3, #4]
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f003 fef6 	bl	80053ec <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20018000 	.word	0x20018000
 800162c:	00000400 	.word	0x00000400
 8001630:	2000015c 	.word	0x2000015c
 8001634:	200002b0 	.word	0x200002b0

08001638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001660:	f7ff ffea 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <LoopForever+0x6>)
  ldr r1, =_edata
 8001666:	490d      	ldr	r1, [pc, #52]	; (800169c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <LoopForever+0xe>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800167c:	4c0a      	ldr	r4, [pc, #40]	; (80016a8 <LoopForever+0x16>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168a:	f003 feb5 	bl	80053f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800168e:	f7ff fb29 	bl	8000ce4 <main>

08001692 <LoopForever>:

LoopForever:
    b LoopForever
 8001692:	e7fe      	b.n	8001692 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001694:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016a0:	080065e8 	.word	0x080065e8
  ldr r2, =_sbss
 80016a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016a8:	200002b0 	.word	0x200002b0

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>

080016ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f001 fb83 	bl	8002dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016be:	200f      	movs	r0, #15
 80016c0:	f000 f80e 	bl	80016e0 <HAL_InitTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	e001      	b.n	80016d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d0:	f7ff fdfc 	bl	80012cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d4:	79fb      	ldrb	r3, [r7, #7]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_InitTick+0x6c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d023      	beq.n	800173c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_InitTick+0x70>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_InitTick+0x6c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fb8f 	bl	8002e2e <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10f      	bne.n	8001736 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d809      	bhi.n	8001730 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f001 fb59 	bl	8002dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_InitTick+0x74>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e007      	b.n	8001740 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e004      	b.n	8001740 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	e001      	b.n	8001740 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008
 800177c:	20000160 	.word	0x20000160

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000160 	.word	0x20000160

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff ffee 	bl	8001780 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffde 	bl	8001780 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008

080017e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3360      	adds	r3, #96	; 0x60
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <LL_ADC_SetOffset+0x44>)
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	4313      	orrs	r3, r2
 8001878:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	03fff000 	.word	0x03fff000

08001890 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3360      	adds	r3, #96	; 0x60
 800189e:	461a      	mov	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3360      	adds	r3, #96	; 0x60
 80018cc:	461a      	mov	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3330      	adds	r3, #48	; 0x30
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	211f      	movs	r1, #31
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	f003 011f 	and.w	r1, r3, #31
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	431a      	orrs	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3314      	adds	r3, #20
 8001980:	461a      	mov	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	0e5b      	lsrs	r3, r3, #25
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	0d1b      	lsrs	r3, r3, #20
 8001998:	f003 031f 	and.w	r3, r3, #31
 800199c:	2107      	movs	r1, #7
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	401a      	ands	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	0d1b      	lsrs	r3, r3, #20
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0318 	and.w	r3, r3, #24
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <LL_ADC_SetChannelSingleDiff+0x44>)
 80019ec:	40d9      	lsrs	r1, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	400b      	ands	r3, r1
 80019f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f6:	431a      	orrs	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	0007ffff 	.word	0x0007ffff

08001a10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6093      	str	r3, [r2, #8]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a80:	d101      	bne.n	8001a86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ad0:	d101      	bne.n	8001ad6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <LL_ADC_IsEnabled+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_ADC_IsEnabled+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b46:	f043 0204 	orr.w	r2, r3, #4
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d101      	bne.n	8001b98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e130      	b.n	8001e24 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fb9f 	bl	8001314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff3f 	bl	8001a6c <LL_ADC_IsDeepPowerDownEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff25 	bl	8001a48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff5a 	bl	8001abc <LL_ADC_IsInternalRegulatorEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff3e 	bl	8001a94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c18:	4b84      	ldr	r3, [pc, #528]	; (8001e2c <HAL_ADC_Init+0x284>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	4a84      	ldr	r2, [pc, #528]	; (8001e30 <HAL_ADC_Init+0x288>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	099b      	lsrs	r3, r3, #6
 8001c26:	3301      	adds	r3, #1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f9      	bne.n	8001c2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff3c 	bl	8001abc <LL_ADC_IsInternalRegulatorEnabled>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff75 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 8001c70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80c9 	bne.w	8001e12 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 80c5 	bne.w	8001e12 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c90:	f043 0202 	orr.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff35 	bl	8001b0c <LL_ADC_IsEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca8:	4862      	ldr	r0, [pc, #392]	; (8001e34 <HAL_ADC_Init+0x28c>)
 8001caa:	f7ff ff2f 	bl	8001b0c <LL_ADC_IsEnabled>
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4861      	ldr	r0, [pc, #388]	; (8001e38 <HAL_ADC_Init+0x290>)
 8001cb2:	f7ff ff2b 	bl	8001b0c <LL_ADC_IsEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	431c      	orrs	r4, r3
 8001cba:	4860      	ldr	r0, [pc, #384]	; (8001e3c <HAL_ADC_Init+0x294>)
 8001cbc:	f7ff ff26 	bl	8001b0c <LL_ADC_IsEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	485c      	ldr	r0, [pc, #368]	; (8001e40 <HAL_ADC_Init+0x298>)
 8001cd0:	f7ff fd86 	bl	80017e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e5b      	ldrb	r3, [r3, #25]
 8001cd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ce4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d106      	bne.n	8001d10 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	3b01      	subs	r3, #1
 8001d08:	045b      	lsls	r3, r3, #17
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HAL_ADC_Init+0x29c>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff1b 	bl	8001b80 <LL_ADC_INJ_IsConversionOngoing>
 8001d4a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13d      	bne.n	8001dce <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d13a      	bne.n	8001dce <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d5c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d64:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d74:	f023 0302 	bic.w	r3, r3, #2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	69b9      	ldr	r1, [r7, #24]
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d118      	bne.n	8001dbe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d96:	f023 0304 	bic.w	r3, r3, #4
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dae:	430a      	orrs	r2, r1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	e007      	b.n	8001dce <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10c      	bne.n	8001df0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f023 010f 	bic.w	r1, r3, #15
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
 8001dee:	e007      	b.n	8001e00 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 020f 	bic.w	r2, r2, #15
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f023 0303 	bic.w	r3, r3, #3
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
 8001e10:	e007      	b.n	8001e22 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	053e2d63 	.word	0x053e2d63
 8001e34:	50040000 	.word	0x50040000
 8001e38:	50040100 	.word	0x50040100
 8001e3c:	50040200 	.word	0x50040200
 8001e40:	50040300 	.word	0x50040300
 8001e44:	fff0c007 	.word	0xfff0c007

08001e48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e50:	4857      	ldr	r0, [pc, #348]	; (8001fb0 <HAL_ADC_Start+0x168>)
 8001e52:	f7ff fddd 	bl	8001a10 <LL_ADC_GetMultimode>
 8001e56:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe7c 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 809c 	bne.w	8001fa2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_Start+0x30>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e097      	b.n	8001fa8 <HAL_ADC_Start+0x160>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fd73 	bl	800296c <ADC_Enable>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 8083 	bne.w	8001f98 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a42      	ldr	r2, [pc, #264]	; (8001fb4 <HAL_ADC_Start+0x16c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d002      	beq.n	8001eb6 <HAL_ADC_Start+0x6e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	e000      	b.n	8001eb8 <HAL_ADC_Start+0x70>
 8001eb6:	4b40      	ldr	r3, [pc, #256]	; (8001fb8 <HAL_ADC_Start+0x170>)
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d002      	beq.n	8001ec6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ede:	d106      	bne.n	8001eee <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f023 0206 	bic.w	r2, r3, #6
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	659a      	str	r2, [r3, #88]	; 0x58
 8001eec:	e002      	b.n	8001ef4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	221c      	movs	r2, #28
 8001efa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <HAL_ADC_Start+0x16c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d002      	beq.n	8001f14 <HAL_ADC_Start+0xcc>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e000      	b.n	8001f16 <HAL_ADC_Start+0xce>
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_ADC_Start+0x170>)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d008      	beq.n	8001f30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d002      	beq.n	8001f30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d114      	bne.n	8001f5a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fded 	bl	8001b32 <LL_ADC_REG_StartConversion>
 8001f58:	e025      	b.n	8001fa6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_ADC_Start+0x16c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_Start+0x12e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Start+0x130>
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_ADC_Start+0x170>)
 8001f78:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00f      	beq.n	8001fa6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
 8001f96:	e006      	b.n	8001fa6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fa0:	e001      	b.n	8001fa6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	50040300 	.word	0x50040300
 8001fb4:	50040100 	.word	0x50040100
 8001fb8:	50040000 	.word	0x50040000

08001fbc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc6:	4866      	ldr	r0, [pc, #408]	; (8002160 <HAL_ADC_PollForConversion+0x1a4>)
 8001fc8:	f7ff fd22 	bl	8001a10 <LL_ADC_GetMultimode>
 8001fcc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d102      	bne.n	8001fdc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e02a      	b.n	8002032 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d002      	beq.n	8001fee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d111      	bne.n	8002012 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0a4      	b.n	8002156 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800200c:	2304      	movs	r3, #4
 800200e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002010:	e00f      	b.n	8002032 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002012:	4853      	ldr	r0, [pc, #332]	; (8002160 <HAL_ADC_PollForConversion+0x1a4>)
 8002014:	f7ff fd0a 	bl	8001a2c <LL_ADC_GetMultiDMATransfer>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e093      	b.n	8002156 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800202e:	2304      	movs	r3, #4
 8002030:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002032:	f7ff fba5 	bl	8001780 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002038:	e021      	b.n	800207e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d01d      	beq.n	800207e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002042:	f7ff fb9d 	bl	8001780 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <HAL_ADC_PollForConversion+0x9c>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d112      	bne.n	800207e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e06b      	b.n	8002156 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0d6      	beq.n	800203a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc28 	bl	80018f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e5b      	ldrb	r3, [r3, #25]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <HAL_ADC_PollForConversion+0x1a8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d002      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x136>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e000      	b.n	80020f4 <HAL_ADC_PollForConversion+0x138>
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_ADC_PollForConversion+0x1ac>)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d008      	beq.n	800210e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d002      	beq.n	800210e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b09      	cmp	r3, #9
 800210c:	d104      	bne.n	8002118 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	e00c      	b.n	8002132 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_ADC_PollForConversion+0x1a8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d002      	beq.n	8002128 <HAL_ADC_PollForConversion+0x16c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e000      	b.n	800212a <HAL_ADC_PollForConversion+0x16e>
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_ADC_PollForConversion+0x1ac>)
 800212a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d104      	bne.n	8002142 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2208      	movs	r2, #8
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e008      	b.n	8002154 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	220c      	movs	r2, #12
 8002152:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	50040300 	.word	0x50040300
 8002164:	50040100 	.word	0x50040100
 8002168:	50040000 	.word	0x50040000

0800216c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0b6      	sub	sp, #216	; 0xd8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e3c9      	b.n	800293e <HAL_ADC_ConfigChannel+0x7b6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fccf 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 83aa 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d824      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	3b02      	subs	r3, #2
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d81b      	bhi.n	8002216 <HAL_ADC_ConfigChannel+0x8e>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_ADC_ConfigChannel+0x5c>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fd 	.word	0x080021fd
 80021ec:	08002205 	.word	0x08002205
 80021f0:	0800220d 	.word	0x0800220d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021f4:	230c      	movs	r3, #12
 80021f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021fa:	e010      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80021fc:	2312      	movs	r3, #18
 80021fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002202:	e00c      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002204:	2318      	movs	r3, #24
 8002206:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800220a:	e008      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800220c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002214:	e003      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002216:	2306      	movs	r3, #6
 8002218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800221c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800222c:	f7ff fb74 	bl	8001918 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fc90 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 800223a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fc9c 	bl	8001b80 <LL_ADC_INJ_IsConversionOngoing>
 8002248:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 81a4 	bne.w	800259e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 819f 	bne.w	800259e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	461a      	mov	r2, r3
 800226e:	f7ff fb7f 	bl	8001970 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d00a      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6919      	ldr	r1, [r3, #16]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a4:	f7ff fad0 	bl	8001848 <LL_ADC_SetOffset>
 80022a8:	e179      	b.n	800259e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff faed 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x14e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fae2 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	e01e      	b.n	8002314 <HAL_ADC_ConfigChannel+0x18c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fad7 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e004      	b.n	8002312 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1a4>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	e018      	b.n	800235e <HAL_ADC_ConfigChannel+0x1d6>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e004      	b.n	800235e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff faa6 	bl	80018bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fa8a 	bl	8001890 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <HAL_ADC_ConfigChannel+0x214>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fa7f 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	f003 021f 	and.w	r2, r3, #31
 800239a:	e01e      	b.n	80023da <HAL_ADC_ConfigChannel+0x252>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fa74 	bl	8001890 <LL_ADC_GetOffsetChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80023ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80023c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x26a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	e018      	b.n	8002424 <HAL_ADC_ConfigChannel+0x29c>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800240a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800240e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e004      	b.n	8002424 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800241a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002424:	429a      	cmp	r2, r3
 8002426:	d106      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fa43 	bl	80018bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fa27 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x2da>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2102      	movs	r1, #2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fa1c 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	e01e      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x318>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2102      	movs	r1, #2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fa11 	bl	8001890 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e004      	b.n	800249e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x330>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	e014      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x35a>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80024c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80024cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e004      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80024d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2102      	movs	r1, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f9e4 	bl	80018bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2103      	movs	r1, #3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f9c8 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x398>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2103      	movs	r1, #3
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff f9bd 	bl	8001890 <LL_ADC_GetOffsetChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	f003 021f 	and.w	r2, r3, #31
 800251e:	e017      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3c8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2103      	movs	r1, #3
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f9b2 	bl	8001890 <LL_ADC_GetOffsetChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800253c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x3e0>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	e011      	b.n	800258c <HAL_ADC_ConfigChannel+0x404>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002578:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800257a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	2103      	movs	r1, #3
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f98f 	bl	80018bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fab2 	bl	8001b0c <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8140 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	461a      	mov	r2, r3
 80025be:	f7ff fa03 	bl	80019c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a8f      	ldr	r2, [pc, #572]	; (8002804 <HAL_ADC_ConfigChannel+0x67c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	f040 8131 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10b      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x46e>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	3301      	adds	r3, #1
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	bf94      	ite	ls
 80025ee:	2301      	movls	r3, #1
 80025f0:	2300      	movhi	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	e019      	b.n	800262a <HAL_ADC_ConfigChannel+0x4a2>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002606:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e003      	b.n	800261a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b09      	cmp	r3, #9
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262a:	2b00      	cmp	r3, #0
 800262c:	d079      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <HAL_ADC_ConfigChannel+0x4c2>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	3301      	adds	r3, #1
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002648:	e015      	b.n	8002676 <HAL_ADC_ConfigChannel+0x4ee>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3301      	adds	r3, #1
 8002670:	069b      	lsls	r3, r3, #26
 8002672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x50e>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	3301      	adds	r3, #1
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	e017      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x53e>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80026a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	ea42 0103 	orr.w	r1, r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x564>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	e018      	b.n	800271e <HAL_ADC_ConfigChannel+0x596>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e003      	b.n	8002710 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f003 021f 	and.w	r2, r3, #31
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271e:	430b      	orrs	r3, r1
 8002720:	e081      	b.n	8002826 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_ADC_ConfigChannel+0x5b6>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273c:	e015      	b.n	800276a <HAL_ADC_ConfigChannel+0x5e2>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e003      	b.n	8002762 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3301      	adds	r3, #1
 8002764:	069b      	lsls	r3, r3, #26
 8002766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_ADC_ConfigChannel+0x602>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	3301      	adds	r3, #1
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	e017      	b.n	80027ba <HAL_ADC_ConfigChannel+0x632>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	61bb      	str	r3, [r7, #24]
  return result;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e003      	b.n	80027ae <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x65e>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 021f 	and.w	r2, r3, #31
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	3b1e      	subs	r3, #30
 80027de:	051b      	lsls	r3, r3, #20
 80027e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e4:	e01e      	b.n	8002824 <HAL_ADC_ConfigChannel+0x69c>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	60fb      	str	r3, [r7, #12]
  return result;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e006      	b.n	8002810 <HAL_ADC_ConfigChannel+0x688>
 8002802:	bf00      	nop
 8002804:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f003 021f 	and.w	r2, r3, #31
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	3b1e      	subs	r3, #30
 800281e:	051b      	lsls	r3, r3, #20
 8002820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002824:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282a:	4619      	mov	r1, r3
 800282c:	f7ff f8a0 	bl	8001970 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b44      	ldr	r3, [pc, #272]	; (8002948 <HAL_ADC_ConfigChannel+0x7c0>)
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d07a      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800283c:	4843      	ldr	r0, [pc, #268]	; (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 800283e:	f7fe fff5 	bl	800182c <LL_ADC_GetCommonPathInternalCh>
 8002842:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a41      	ldr	r2, [pc, #260]	; (8002950 <HAL_ADC_ConfigChannel+0x7c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d12c      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d126      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3c      	ldr	r2, [pc, #240]	; (8002954 <HAL_ADC_ConfigChannel+0x7cc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x6e8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <HAL_ADC_ConfigChannel+0x7d0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d15d      	bne.n	800292c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002878:	4619      	mov	r1, r3
 800287a:	4834      	ldr	r0, [pc, #208]	; (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 800287c:	f7fe ffc3 	bl	8001806 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_ADC_ConfigChannel+0x7d4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	4a36      	ldr	r2, [pc, #216]	; (8002960 <HAL_ADC_ConfigChannel+0x7d8>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800289a:	e002      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028a8:	e040      	b.n	800292c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <HAL_ADC_ConfigChannel+0x7dc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d118      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d112      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_ADC_ConfigChannel+0x7cc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x74c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a22      	ldr	r2, [pc, #136]	; (8002958 <HAL_ADC_ConfigChannel+0x7d0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d12d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028dc:	4619      	mov	r1, r3
 80028de:	481b      	ldr	r0, [pc, #108]	; (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 80028e0:	f7fe ff91 	bl	8001806 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e4:	e024      	b.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_ADC_ConfigChannel+0x7e0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d120      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_ADC_ConfigChannel+0x7cc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d115      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800290a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800290e:	4619      	mov	r1, r3
 8002910:	480e      	ldr	r0, [pc, #56]	; (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 8002912:	f7fe ff78 	bl	8001806 <LL_ADC_SetCommonPathInternalCh>
 8002916:	e00c      	b.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800292a:	e002      	b.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002930:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800293a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800293e:	4618      	mov	r0, r3
 8002940:	37d8      	adds	r7, #216	; 0xd8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	80080000 	.word	0x80080000
 800294c:	50040300 	.word	0x50040300
 8002950:	c7520000 	.word	0xc7520000
 8002954:	50040000 	.word	0x50040000
 8002958:	50040200 	.word	0x50040200
 800295c:	20000000 	.word	0x20000000
 8002960:	053e2d63 	.word	0x053e2d63
 8002964:	cb840000 	.word	0xcb840000
 8002968:	80000001 	.word	0x80000001

0800296c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f8c5 	bl	8001b0c <LL_ADC_IsEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d169      	bne.n	8002a5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <ADC_Enable+0xfc>)
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f043 0210 	orr.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e055      	b.n	8002a5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f894 	bl	8001ae4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029bc:	482b      	ldr	r0, [pc, #172]	; (8002a6c <ADC_Enable+0x100>)
 80029be:	f7fe ff35 	bl	800182c <LL_ADC_GetCommonPathInternalCh>
 80029c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029cc:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <ADC_Enable+0x104>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <ADC_Enable+0x108>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029e6:	e002      	b.n	80029ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fec4 	bl	8001780 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029fa:	e028      	b.n	8002a4e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f883 	bl	8001b0c <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f867 	bl	8001ae4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a16:	f7fe feb3 	bl	8001780 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d914      	bls.n	8002a4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00d      	beq.n	8002a4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e007      	b.n	8002a5e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d1cf      	bne.n	80029fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	8000003f 	.word	0x8000003f
 8002a6c:	50040300 	.word	0x50040300
 8002a70:	20000000 	.word	0x20000000
 8002a74:	053e2d63 	.word	0x053e2d63

08002a78 <LL_ADC_IsEnabled>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <LL_ADC_IsEnabled+0x18>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <LL_ADC_IsEnabled+0x1a>
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_REG_IsConversionOngoing>:
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d101      	bne.n	8002ab6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b09f      	sub	sp, #124	; 0x7c
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e093      	b.n	8002c0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002aea:	2300      	movs	r3, #0
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002aee:	2300      	movs	r3, #0
 8002af0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a47      	ldr	r2, [pc, #284]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d102      	bne.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002afc:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	e001      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e072      	b.n	8002c0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ffb9 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ffb3 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d154      	bne.n	8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d151      	bne.n	8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d02c      	beq.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b62:	035b      	lsls	r3, r3, #13
 8002b64:	430b      	orrs	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6c:	4829      	ldr	r0, [pc, #164]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b6e:	f7ff ff83 	bl	8002a78 <LL_ADC_IsEnabled>
 8002b72:	4604      	mov	r4, r0
 8002b74:	4828      	ldr	r0, [pc, #160]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b76:	f7ff ff7f 	bl	8002a78 <LL_ADC_IsEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	431c      	orrs	r4, r3
 8002b7e:	4828      	ldr	r0, [pc, #160]	; (8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b80:	f7ff ff7a 	bl	8002a78 <LL_ADC_IsEnabled>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4323      	orrs	r3, r4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d137      	bne.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b94:	f023 030f 	bic.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	6811      	ldr	r1, [r2, #0]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba8:	e028      	b.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb6:	4817      	ldr	r0, [pc, #92]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bb8:	f7ff ff5e 	bl	8002a78 <LL_ADC_IsEnabled>
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	4816      	ldr	r0, [pc, #88]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bc0:	f7ff ff5a 	bl	8002a78 <LL_ADC_IsEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	431c      	orrs	r4, r3
 8002bc8:	4815      	ldr	r0, [pc, #84]	; (8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bca:	f7ff ff55 	bl	8002a78 <LL_ADC_IsEnabled>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4323      	orrs	r3, r4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d112      	bne.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bde:	f023 030f 	bic.w	r3, r3, #15
 8002be2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002be4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002be6:	e009      	b.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002bfa:	e000      	b.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	377c      	adds	r7, #124	; 0x7c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}
 8002c12:	bf00      	nop
 8002c14:	50040000 	.word	0x50040000
 8002c18:	50040100 	.word	0x50040100
 8002c1c:	50040300 	.word	0x50040300
 8002c20:	50040200 	.word	0x50040200

08002c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <__NVIC_GetPriorityGrouping+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 0307 	and.w	r3, r3, #7
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4907      	ldr	r1, [pc, #28]	; (8002cc0 <__NVIC_EnableIRQ+0x38>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d90:	d301      	bcc.n	8002d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00f      	b.n	8002db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <SysTick_Config+0x40>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9e:	210f      	movs	r1, #15
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	f7ff ff8e 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <SysTick_Config+0x40>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SysTick_Config+0x40>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	e000e010 	.word	0xe000e010

08002dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff29 	bl	8002c24 <__NVIC_SetPriorityGrouping>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dec:	f7ff ff3e 	bl	8002c6c <__NVIC_GetPriorityGrouping>
 8002df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff8e 	bl	8002d18 <NVIC_EncodePriority>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5d 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff31 	bl	8002c88 <__NVIC_EnableIRQ>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffa2 	bl	8002d80 <SysTick_Config>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e56:	e17f      	b.n	8003158 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8171 	beq.w	8003152 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d005      	beq.n	8002e88 <HAL_GPIO_Init+0x40>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d130      	bne.n	8002eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 0201 	and.w	r2, r3, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d118      	bne.n	8002f28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002efc:	2201      	movs	r2, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	f003 0201 	and.w	r2, r3, #1
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d017      	beq.n	8002f64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80ac 	beq.w	8003152 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_GPIO_Init+0x330>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_GPIO_Init+0x330>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6613      	str	r3, [r2, #96]	; 0x60
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_GPIO_Init+0x330>)
 8003008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003012:	4a5a      	ldr	r2, [pc, #360]	; (800317c <HAL_GPIO_Init+0x334>)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800303c:	d025      	beq.n	800308a <HAL_GPIO_Init+0x242>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_GPIO_Init+0x338>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01f      	beq.n	8003086 <HAL_GPIO_Init+0x23e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <HAL_GPIO_Init+0x33c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_Init+0x23a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <HAL_GPIO_Init+0x340>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0x236>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_GPIO_Init+0x344>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_Init+0x232>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <HAL_GPIO_Init+0x348>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_Init+0x22e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4a      	ldr	r2, [pc, #296]	; (8003194 <HAL_GPIO_Init+0x34c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_Init+0x22a>
 800306e:	2306      	movs	r3, #6
 8003070:	e00c      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003072:	2307      	movs	r3, #7
 8003074:	e00a      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003076:	2305      	movs	r3, #5
 8003078:	e008      	b.n	800308c <HAL_GPIO_Init+0x244>
 800307a:	2304      	movs	r3, #4
 800307c:	e006      	b.n	800308c <HAL_GPIO_Init+0x244>
 800307e:	2303      	movs	r3, #3
 8003080:	e004      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003082:	2302      	movs	r3, #2
 8003084:	e002      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_GPIO_Init+0x244>
 800308a:	2300      	movs	r3, #0
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	f002 0203 	and.w	r2, r2, #3
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	4093      	lsls	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800309c:	4937      	ldr	r1, [pc, #220]	; (800317c <HAL_GPIO_Init+0x334>)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	3302      	adds	r3, #2
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030ce:	4a32      	ldr	r2, [pc, #200]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_GPIO_Init+0x350>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_GPIO_Init+0x350>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_GPIO_Init+0x350>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <HAL_GPIO_Init+0x350>)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3301      	adds	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	f47f ae78 	bne.w	8002e58 <HAL_GPIO_Init+0x10>
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	40010000 	.word	0x40010000
 8003180:	48000400 	.word	0x48000400
 8003184:	48000800 	.word	0x48000800
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48001000 	.word	0x48001000
 8003190:	48001400 	.word	0x48001400
 8003194:	48001800 	.word	0x48001800
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f806 	bl	80031fc <HAL_GPIO_EXTI_Callback>
  }
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <HAL_PWREx_GetVoltageRange+0x18>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323e:	d130      	bne.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324c:	d038      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2232      	movs	r2, #50	; 0x32
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003274:	e002      	b.n	800327c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3b01      	subs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003288:	d102      	bne.n	8003290 <HAL_PWREx_ControlVoltageScaling+0x60>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f2      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d110      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e00f      	b.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ae:	d007      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40007000 	.word	0x40007000
 80032d4:	20000000 	.word	0x20000000
 80032d8:	431bde83 	.word	0x431bde83

080032dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e3ca      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	4b97      	ldr	r3, [pc, #604]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f8:	4b94      	ldr	r3, [pc, #592]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80e4 	beq.w	80034d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_RCC_OscConfig+0x4a>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	f040 808b 	bne.w	8003434 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 8087 	bne.w	8003434 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003326:	4b89      	ldr	r3, [pc, #548]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x62>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e3a2      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <HAL_RCC_OscConfig+0x7c>
 800334e:	4b7f      	ldr	r3, [pc, #508]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003356:	e005      	b.n	8003364 <HAL_RCC_OscConfig+0x88>
 8003358:	4b7c      	ldr	r3, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800335a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003364:	4293      	cmp	r3, r2
 8003366:	d223      	bcs.n	80033b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fd1d 	bl	8003dac <RCC_SetFlashLatencyFromMSIRange>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e383      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337c:	4b73      	ldr	r3, [pc, #460]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a72      	ldr	r2, [pc, #456]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003382:	f043 0308 	orr.w	r3, r3, #8
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b70      	ldr	r3, [pc, #448]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	496d      	ldr	r1, [pc, #436]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800339a:	4b6c      	ldr	r3, [pc, #432]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4968      	ldr	r1, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
 80033ae:	e025      	b.n	80033fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b0:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033b6:	f043 0308 	orr.w	r3, r3, #8
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b63      	ldr	r3, [pc, #396]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4960      	ldr	r1, [pc, #384]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ce:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	495b      	ldr	r1, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fcdd 	bl	8003dac <RCC_SetFlashLatencyFromMSIRange>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e343      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033fc:	f000 fc4a 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b52      	ldr	r3, [pc, #328]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	4950      	ldr	r1, [pc, #320]	; (8003550 <HAL_RCC_OscConfig+0x274>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	4a4e      	ldr	r2, [pc, #312]	; (8003554 <HAL_RCC_OscConfig+0x278>)
 800341a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800341c:	4b4e      	ldr	r3, [pc, #312]	; (8003558 <HAL_RCC_OscConfig+0x27c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe f95d 	bl	80016e0 <HAL_InitTick>
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d052      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	e327      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d032      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800343c:	4b43      	ldr	r3, [pc, #268]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a42      	ldr	r2, [pc, #264]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003448:	f7fe f99a 	bl	8001780 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003450:	f7fe f996 	bl	8001780 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e310      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003462:	4b3a      	ldr	r3, [pc, #232]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a36      	ldr	r2, [pc, #216]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4931      	ldr	r1, [pc, #196]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	492c      	ldr	r1, [pc, #176]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e01a      	b.n	80034d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a2:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ae:	f7fe f967 	bl	8001780 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b6:	f7fe f963 	bl	8001780 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e2dd      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x1da>
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d074      	beq.n	80035ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d005      	beq.n	80034f6 <HAL_RCC_OscConfig+0x21a>
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d10e      	bne.n	800350e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d10b      	bne.n	800350e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_RCC_OscConfig+0x270>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d064      	beq.n	80035cc <HAL_RCC_OscConfig+0x2f0>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d160      	bne.n	80035cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e2ba      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x24a>
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0b      	ldr	r2, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e026      	b.n	8003574 <HAL_RCC_OscConfig+0x298>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352e:	d115      	bne.n	800355c <HAL_RCC_OscConfig+0x280>
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a05      	ldr	r2, [pc, #20]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a02      	ldr	r2, [pc, #8]	; (800354c <HAL_RCC_OscConfig+0x270>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e014      	b.n	8003574 <HAL_RCC_OscConfig+0x298>
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	080064c0 	.word	0x080064c0
 8003554:	20000000 	.word	0x20000000
 8003558:	20000004 	.word	0x20000004
 800355c:	4ba0      	ldr	r3, [pc, #640]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a9f      	ldr	r2, [pc, #636]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b9d      	ldr	r3, [pc, #628]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a9c      	ldr	r2, [pc, #624]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe f900 	bl	8001780 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe f8fc 	bl	8001780 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e276      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b92      	ldr	r3, [pc, #584]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x2a8>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe f8ec 	bl	8001780 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe f8e8 	bl	8001780 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e262      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x2d0>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d060      	beq.n	800369c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x310>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d119      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d116      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ec:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_OscConfig+0x328>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e23f      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4973      	ldr	r1, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003618:	e040      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d023      	beq.n	800366a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003622:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6e      	ldr	r2, [pc, #440]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe f8a7 	bl	8001780 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe f8a3 	bl	8001780 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e21d      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003648:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b62      	ldr	r3, [pc, #392]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	495f      	ldr	r1, [pc, #380]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	e018      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5c      	ldr	r2, [pc, #368]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fe f883 	bl	8001780 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7fe f87f 	bl	8001780 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e1f9      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03c      	beq.n	8003722 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b6:	4a4a      	ldr	r2, [pc, #296]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe f85e 	bl	8001780 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fe f85a 	bl	8001780 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1d4      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x3ec>
 80036e8:	e01b      	b.n	8003722 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ea:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f0:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe f841 	bl	8001780 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe f83d 	bl	8001780 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1b7      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a6 	beq.w	800387c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	6593      	str	r3, [r2, #88]	; 0x58
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fe f804 	bl	8001780 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe f800 	bl	8001780 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e17a      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x508>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d108      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d8>
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b2:	e029      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d115      	bne.n	80037e8 <HAL_RCC_OscConfig+0x50c>
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
 80037e8:	4b9c      	ldr	r3, [pc, #624]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a9b      	ldr	r2, [pc, #620]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f8:	4b98      	ldr	r3, [pc, #608]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a97      	ldr	r2, [pc, #604]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd ffb6 	bl	8001780 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fd ffb2 	bl	8001780 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e12a      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	4b8b      	ldr	r3, [pc, #556]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ed      	beq.n	8003818 <HAL_RCC_OscConfig+0x53c>
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd ff9f 	bl	8001780 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd ff9b 	bl	8001780 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e113      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ed      	bne.n	8003846 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b7a      	ldr	r3, [pc, #488]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a79      	ldr	r2, [pc, #484]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80fe 	beq.w	8003a82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	2b02      	cmp	r3, #2
 800388c:	f040 80d0 	bne.w	8003a30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003890:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0203 	and.w	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d130      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	3b01      	subs	r3, #1
 80038b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d127      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d11f      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d0:	2a07      	cmp	r2, #7
 80038d2:	bf14      	ite	ne
 80038d4:	2201      	movne	r2, #1
 80038d6:	2200      	moveq	r2, #0
 80038d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038da:	4293      	cmp	r3, r2
 80038dc:	d113      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	3b01      	subs	r3, #1
 8003900:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d06e      	beq.n	80039e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d069      	beq.n	80039e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800390c:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003918:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0ad      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003928:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a4b      	ldr	r2, [pc, #300]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 800392e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003932:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003934:	f7fd ff24 	bl	8001780 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd ff20 	bl	8001780 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e09a      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394e:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395a:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	4b40      	ldr	r3, [pc, #256]	; (8003a60 <HAL_RCC_OscConfig+0x784>)
 8003960:	4013      	ands	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800396a:	3a01      	subs	r2, #1
 800396c:	0112      	lsls	r2, r2, #4
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003974:	0212      	lsls	r2, r2, #8
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800397c:	0852      	lsrs	r2, r2, #1
 800397e:	3a01      	subs	r2, #1
 8003980:	0552      	lsls	r2, r2, #21
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003988:	0852      	lsrs	r2, r2, #1
 800398a:	3a01      	subs	r2, #1
 800398c:	0652      	lsls	r2, r2, #25
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003994:	0912      	lsrs	r2, r2, #4
 8003996:	0452      	lsls	r2, r2, #17
 8003998:	430a      	orrs	r2, r1
 800399a:	4930      	ldr	r1, [pc, #192]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b8:	f7fd fee2 	bl	8001780 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd fede 	bl	8001780 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e058      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039de:	e050      	b.n	8003a82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e04f      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d148      	bne.n	8003a82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a08:	f7fd feba 	bl	8001780 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fd feb6 	bl	8001780 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e030      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x734>
 8003a2e:	e028      	b.n	8003a82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d023      	beq.n	8003a7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <HAL_RCC_OscConfig+0x780>)
 8003a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd fe9d 	bl	8001780 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	e00c      	b.n	8003a64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fd fe99 	bl	8001780 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d905      	bls.n	8003a64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e013      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_OscConfig+0x7b0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ec      	bne.n	8003a4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_OscConfig+0x7b0>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4905      	ldr	r1, [pc, #20]	; (8003a8c <HAL_RCC_OscConfig+0x7b0>)
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_OscConfig+0x7b4>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60cb      	str	r3, [r1, #12]
 8003a7c:	e001      	b.n	8003a82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	feeefffc 	.word	0xfeeefffc

08003a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0e7      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b75      	ldr	r3, [pc, #468]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d910      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b72      	ldr	r3, [pc, #456]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 0207 	bic.w	r2, r3, #7
 8003abe:	4970      	ldr	r1, [pc, #448]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b6e      	ldr	r3, [pc, #440]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0cf      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d908      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b63      	ldr	r3, [pc, #396]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4960      	ldr	r1, [pc, #384]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d04c      	beq.n	8003bac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1a:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d121      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0a6      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b32:	4b54      	ldr	r3, [pc, #336]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e09a      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e08e      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e086      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4943      	ldr	r1, [pc, #268]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fe00 	bl	8001780 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fd fdfc 	bl	8001780 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e06e      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d208      	bcs.n	8003bda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	492b      	ldr	r1, [pc, #172]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d210      	bcs.n	8003c0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 0207 	bic.w	r2, r3, #7
 8003bf0:	4923      	ldr	r1, [pc, #140]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e036      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4918      	ldr	r1, [pc, #96]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4910      	ldr	r1, [pc, #64]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c48:	f000 f824 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	490b      	ldr	r1, [pc, #44]	; (8003c88 <HAL_RCC_ClockConfig+0x1f4>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1f8>)
 8003c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1fc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fd fd37 	bl	80016e0 <HAL_InitTick>
 8003c72:	4603      	mov	r3, r0
 8003c74:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c76:	7afb      	ldrb	r3, [r7, #11]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40021000 	.word	0x40021000
 8003c88:	080064c0 	.word	0x080064c0
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca2:	4b3e      	ldr	r3, [pc, #248]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d121      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d11e      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cc8:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10d      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d102      	bne.n	8003d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e004      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d18:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d134      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d003      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0xac>
 8003d38:	e005      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d3c:	617b      	str	r3, [r7, #20]
      break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d42:	617b      	str	r3, [r7, #20]
      break;
 8003d44:	e002      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	617b      	str	r3, [r7, #20]
      break;
 8003d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	fb03 f202 	mul.w	r2, r3, r2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	0e5b      	lsrs	r3, r3, #25
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3724      	adds	r7, #36	; 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	080064d0 	.word	0x080064d0
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003db8:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dc4:	f7ff fa26 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003dc8:	6178      	str	r0, [r7, #20]
 8003dca:	e014      	b.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dcc:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	4a24      	ldr	r2, [pc, #144]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd8:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003de4:	f7ff fa16 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003de8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfc:	d10b      	bne.n	8003e16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d919      	bls.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2ba0      	cmp	r3, #160	; 0xa0
 8003e08:	d902      	bls.n	8003e10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	e013      	b.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e10:	2301      	movs	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	e010      	b.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d902      	bls.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e00a      	b.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d102      	bne.n	8003e2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e28:	2302      	movs	r3, #2
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	e004      	b.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d101      	bne.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e34:	2301      	movs	r3, #1
 8003e36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 0207 	bic.w	r2, r3, #7
 8003e40:	4909      	ldr	r1, [pc, #36]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e48:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40022000 	.word	0x40022000

08003e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e74:	2300      	movs	r3, #0
 8003e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d041      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e90:	d02a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e96:	d824      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea2:	d81e      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eac:	d010      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003eae:	e018      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eb0:	4b86      	ldr	r3, [pc, #536]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a85      	ldr	r2, [pc, #532]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ebc:	e015      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fabb 	bl	8004440 <RCCEx_PLLSAI1_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ece:	e00c      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3320      	adds	r3, #32
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fba6 	bl	8004628 <RCCEx_PLLSAI2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ee6:	e000      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10b      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef0:	4b76      	ldr	r3, [pc, #472]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efe:	4973      	ldr	r1, [pc, #460]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f06:	e001      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d041      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f20:	d02a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f26:	d824      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f32:	d81e      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f3c:	d010      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f3e:	e018      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f40:	4b62      	ldr	r3, [pc, #392]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a61      	ldr	r2, [pc, #388]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f4c:	e015      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa73 	bl	8004440 <RCCEx_PLLSAI1_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f5e:	e00c      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3320      	adds	r3, #32
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fb5e 	bl	8004628 <RCCEx_PLLSAI2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f70:	e003      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	74fb      	strb	r3, [r7, #19]
      break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f80:	4b52      	ldr	r3, [pc, #328]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8e:	494f      	ldr	r1, [pc, #316]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f96:	e001      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80a0 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fae:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b41      	ldr	r3, [pc, #260]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	4a40      	ldr	r2, [pc, #256]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd0:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe0:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3a      	ldr	r2, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fec:	f7fd fbc8 	bl	8001780 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ff2:	e009      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fd fbc4 	bl	8001780 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d902      	bls.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	74fb      	strb	r3, [r7, #19]
        break;
 8004006:	e005      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004008:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ef      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d15c      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	429a      	cmp	r2, r3
 8004036:	d019      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004042:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004044:	4b21      	ldr	r3, [pc, #132]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a20      	ldr	r2, [pc, #128]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fd fb83 	bl	8001780 <HAL_GetTick>
 800407a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407c:	e00b      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fd fb7f 	bl	8001780 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d902      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	74fb      	strb	r3, [r7, #19]
            break;
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ec      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ba:	4904      	ldr	r1, [pc, #16]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040c2:	e009      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	74bb      	strb	r3, [r7, #18]
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d8:	7c7b      	ldrb	r3, [r7, #17]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4b9e      	ldr	r3, [pc, #632]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	4a9d      	ldr	r2, [pc, #628]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f6:	4b98      	ldr	r3, [pc, #608]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f023 0203 	bic.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	4994      	ldr	r1, [pc, #592]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004118:	4b8f      	ldr	r3, [pc, #572]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f023 020c 	bic.w	r2, r3, #12
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	498c      	ldr	r1, [pc, #560]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413a:	4b87      	ldr	r3, [pc, #540]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	4983      	ldr	r1, [pc, #524]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800415c:	4b7e      	ldr	r3, [pc, #504]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	497b      	ldr	r1, [pc, #492]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800417e:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	4972      	ldr	r1, [pc, #456]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041a0:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	496a      	ldr	r1, [pc, #424]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c2:	4b65      	ldr	r3, [pc, #404]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	4961      	ldr	r1, [pc, #388]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e4:	4b5c      	ldr	r3, [pc, #368]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f2:	4959      	ldr	r1, [pc, #356]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004206:	4b54      	ldr	r3, [pc, #336]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	4950      	ldr	r1, [pc, #320]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004228:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	4948      	ldr	r1, [pc, #288]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800424a:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	493f      	ldr	r1, [pc, #252]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800426c:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427a:	4937      	ldr	r1, [pc, #220]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428a:	d106      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428c:	4b32      	ldr	r3, [pc, #200]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a31      	ldr	r2, [pc, #196]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	60d3      	str	r3, [r2, #12]
 8004298:	e011      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a2:	d10c      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f8c8 	bl	8004440 <RCCEx_PLLSAI1_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d028      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	491f      	ldr	r1, [pc, #124]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f4:	60d3      	str	r3, [r2, #12]
 80042f6:	e011      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f899 	bl	8004440 <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02b      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004346:	d109      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a02      	ldr	r2, [pc, #8]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004352:	60d3      	str	r3, [r2, #12]
 8004354:	e014      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004364:	d10c      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f867 	bl	8004440 <RCCEx_PLLSAI1_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02f      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439a:	4928      	ldr	r1, [pc, #160]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043aa:	d10d      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	2102      	movs	r1, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f844 	bl	8004440 <RCCEx_PLLSAI1_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d014      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	74bb      	strb	r3, [r7, #18]
 80043c6:	e011      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3320      	adds	r3, #32
 80043d6:	2102      	movs	r1, #2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f925 	bl	8004628 <RCCEx_PLLSAI2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004406:	490d      	ldr	r1, [pc, #52]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442a:	4904      	ldr	r1, [pc, #16]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004432:	7cbb      	ldrb	r3, [r7, #18]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000

08004440 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800444e:	4b75      	ldr	r3, [pc, #468]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d018      	beq.n	800448c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800445a:	4b72      	ldr	r3, [pc, #456]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0203 	and.w	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d10d      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
       ||
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004472:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
       ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d047      	beq.n	8004516 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
 800448a:	e044      	b.n	8004516 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d018      	beq.n	80044c6 <RCCEx_PLLSAI1_Config+0x86>
 8004494:	2b03      	cmp	r3, #3
 8004496:	d825      	bhi.n	80044e4 <RCCEx_PLLSAI1_Config+0xa4>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d002      	beq.n	80044a2 <RCCEx_PLLSAI1_Config+0x62>
 800449c:	2b02      	cmp	r3, #2
 800449e:	d009      	beq.n	80044b4 <RCCEx_PLLSAI1_Config+0x74>
 80044a0:	e020      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044a2:	4b60      	ldr	r3, [pc, #384]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11d      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b2:	e01a      	b.n	80044ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b4:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d116      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c4:	e013      	b.n	80044ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044c6:	4b57      	ldr	r3, [pc, #348]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044d2:	4b54      	ldr	r3, [pc, #336]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044e2:	e006      	b.n	80044f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
      break;
 80044e8:	e004      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ea:	bf00      	nop
 80044ec:	e002      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ee:	bf00      	nop
 80044f0:	e000      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044fa:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	430b      	orrs	r3, r1
 8004510:	4944      	ldr	r1, [pc, #272]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d17d      	bne.n	8004618 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800451c:	4b41      	ldr	r3, [pc, #260]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a40      	ldr	r2, [pc, #256]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004522:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004528:	f7fd f92a 	bl	8001780 <HAL_GetTick>
 800452c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800452e:	e009      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004530:	f7fd f926 	bl	8001780 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d902      	bls.n	8004544 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	73fb      	strb	r3, [r7, #15]
        break;
 8004542:	e005      	b.n	8004550 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004544:	4b37      	ldr	r3, [pc, #220]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ef      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d160      	bne.n	8004618 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d111      	bne.n	8004580 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6892      	ldr	r2, [r2, #8]
 800456c:	0211      	lsls	r1, r2, #8
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	0912      	lsrs	r2, r2, #4
 8004574:	0452      	lsls	r2, r2, #17
 8004576:	430a      	orrs	r2, r1
 8004578:	492a      	ldr	r1, [pc, #168]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]
 800457e:	e027      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d112      	bne.n	80045ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004586:	4b27      	ldr	r3, [pc, #156]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800458e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6892      	ldr	r2, [r2, #8]
 8004596:	0211      	lsls	r1, r2, #8
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6912      	ldr	r2, [r2, #16]
 800459c:	0852      	lsrs	r2, r2, #1
 800459e:	3a01      	subs	r2, #1
 80045a0:	0552      	lsls	r2, r2, #21
 80045a2:	430a      	orrs	r2, r1
 80045a4:	491f      	ldr	r1, [pc, #124]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	610b      	str	r3, [r1, #16]
 80045aa:	e011      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	0211      	lsls	r1, r2, #8
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6952      	ldr	r2, [r2, #20]
 80045c2:	0852      	lsrs	r2, r2, #1
 80045c4:	3a01      	subs	r2, #1
 80045c6:	0652      	lsls	r2, r2, #25
 80045c8:	430a      	orrs	r2, r1
 80045ca:	4916      	ldr	r1, [pc, #88]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fd f8d0 	bl	8001780 <HAL_GetTick>
 80045e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e2:	e009      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045e4:	f7fd f8cc 	bl	8001780 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d902      	bls.n	80045f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	73fb      	strb	r3, [r7, #15]
          break;
 80045f6:	e005      	b.n	8004604 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ef      	beq.n	80045e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	4904      	ldr	r1, [pc, #16]	; (8004624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000

08004628 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004636:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004642:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0203 	and.w	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d10d      	bne.n	800466e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
       ||
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800465a:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
       ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d047      	beq.n	80046fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	e044      	b.n	80046fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d018      	beq.n	80046ae <RCCEx_PLLSAI2_Config+0x86>
 800467c:	2b03      	cmp	r3, #3
 800467e:	d825      	bhi.n	80046cc <RCCEx_PLLSAI2_Config+0xa4>
 8004680:	2b01      	cmp	r3, #1
 8004682:	d002      	beq.n	800468a <RCCEx_PLLSAI2_Config+0x62>
 8004684:	2b02      	cmp	r3, #2
 8004686:	d009      	beq.n	800469c <RCCEx_PLLSAI2_Config+0x74>
 8004688:	e020      	b.n	80046cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800468a:	4b55      	ldr	r3, [pc, #340]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d11d      	bne.n	80046d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469a:	e01a      	b.n	80046d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d116      	bne.n	80046d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ac:	e013      	b.n	80046d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ae:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ba:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046ca:	e006      	b.n	80046da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      break;
 80046d0:	e004      	b.n	80046dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046d2:	bf00      	nop
 80046d4:	e002      	b.n	80046dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046da:	bf00      	nop
    }

    if(status == HAL_OK)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046e2:	4b3f      	ldr	r3, [pc, #252]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	430b      	orrs	r3, r1
 80046f8:	4939      	ldr	r1, [pc, #228]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d167      	bne.n	80047d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004704:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a35      	ldr	r2, [pc, #212]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004710:	f7fd f836 	bl	8001780 <HAL_GetTick>
 8004714:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004716:	e009      	b.n	800472c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004718:	f7fd f832 	bl	8001780 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d902      	bls.n	800472c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	73fb      	strb	r3, [r7, #15]
        break;
 800472a:	e005      	b.n	8004738 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800472c:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ef      	bne.n	8004718 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d14a      	bne.n	80047d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d111      	bne.n	8004768 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004744:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6892      	ldr	r2, [r2, #8]
 8004754:	0211      	lsls	r1, r2, #8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68d2      	ldr	r2, [r2, #12]
 800475a:	0912      	lsrs	r2, r2, #4
 800475c:	0452      	lsls	r2, r2, #17
 800475e:	430a      	orrs	r2, r1
 8004760:	491f      	ldr	r1, [pc, #124]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	614b      	str	r3, [r1, #20]
 8004766:	e011      	b.n	800478c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004770:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6892      	ldr	r2, [r2, #8]
 8004778:	0211      	lsls	r1, r2, #8
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6912      	ldr	r2, [r2, #16]
 800477e:	0852      	lsrs	r2, r2, #1
 8004780:	3a01      	subs	r2, #1
 8004782:	0652      	lsls	r2, r2, #25
 8004784:	430a      	orrs	r2, r1
 8004786:	4916      	ldr	r1, [pc, #88]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800478c:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fc fff2 	bl	8001780 <HAL_GetTick>
 800479c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800479e:	e009      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047a0:	f7fc ffee 	bl	8001780 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d902      	bls.n	80047b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	73fb      	strb	r3, [r7, #15]
          break;
 80047b2:	e005      	b.n	80047c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0ef      	beq.n	80047a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4904      	ldr	r1, [pc, #16]	; (80047e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000

080047e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d079      	beq.n	80048ea <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fdea 	bl	80013e4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b10      	cmp	r3, #16
 8004824:	d058      	beq.n	80048d8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	22ca      	movs	r2, #202	; 0xca
 800482c:	625a      	str	r2, [r3, #36]	; 0x24
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2253      	movs	r2, #83	; 0x53
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fb7a 	bl	8004f30 <RTC_EnterInitMode>
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d127      	bne.n	8004896 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004858:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68d2      	ldr	r2, [r2, #12]
 8004880:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6919      	ldr	r1, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	041a      	lsls	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fb7e 	bl	8004f98 <RTC_ExitInitMode>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d113      	bne.n	80048ce <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0203 	bic.w	r2, r2, #3
 80048b4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	22ff      	movs	r2, #255	; 0xff
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24
 80048d6:	e001      	b.n	80048dc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_RTC_SetTime+0x1a>
 800490a:	2302      	movs	r3, #2
 800490c:	e08b      	b.n	8004a26 <HAL_RTC_SetTime+0x132>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	22ca      	movs	r2, #202	; 0xca
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2253      	movs	r2, #83	; 0x53
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fafe 	bl	8004f30 <RTC_EnterInitMode>
 8004934:	4603      	mov	r3, r0
 8004936:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d163      	bne.n	8004a06 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d126      	bne.n	8004992 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fb59 	bl	8005014 <RTC_ByteToBcd2>
 8004962:	4603      	mov	r3, r0
 8004964:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fb52 	bl	8005014 <RTC_ByteToBcd2>
 8004970:	4603      	mov	r3, r0
 8004972:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004974:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	789b      	ldrb	r3, [r3, #2]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fb4a 	bl	8005014 <RTC_ByteToBcd2>
 8004980:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004982:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	78db      	ldrb	r3, [r3, #3]
 800498a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e018      	b.n	80049c4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2200      	movs	r2, #0
 80049a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	78db      	ldrb	r3, [r3, #3]
 80049be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80049ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80049d2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 facb 	bl	8004f98 <RTC_ExitInitMode>
 8004a02:	4603      	mov	r3, r0
 8004a04:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	22ff      	movs	r2, #255	; 0xff
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}

08004a2e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a60:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	0c1b      	lsrs	r3, r3, #16
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	0d9b      	lsrs	r3, r3, #22
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d11a      	bne.n	8004adc <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fad2 	bl	8005054 <RTC_Bcd2ToByte>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fac9 	bl	8005054 <RTC_Bcd2ToByte>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	789b      	ldrb	r3, [r3, #2]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fac0 	bl	8005054 <RTC_Bcd2ToByte>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ae6:	b590      	push	{r4, r7, lr}
 8004ae8:	b087      	sub	sp, #28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_RTC_SetDate+0x1a>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e075      	b.n	8004bec <HAL_RTC_SetDate+0x106>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10e      	bne.n	8004b34 <HAL_RTC_SetDate+0x4e>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	330a      	adds	r3, #10
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11c      	bne.n	8004b74 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	78db      	ldrb	r3, [r3, #3]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fa68 	bl	8005014 <RTC_ByteToBcd2>
 8004b44:	4603      	mov	r3, r0
 8004b46:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fa61 	bl	8005014 <RTC_ByteToBcd2>
 8004b52:	4603      	mov	r3, r0
 8004b54:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b56:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	789b      	ldrb	r3, [r3, #2]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fa59 	bl	8005014 <RTC_ByteToBcd2>
 8004b62:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b64:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e00e      	b.n	8004b92 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	78db      	ldrb	r3, [r3, #3]
 8004b78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b80:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	22ca      	movs	r2, #202	; 0xca
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2253      	movs	r2, #83	; 0x53
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f9c4 	bl	8004f30 <RTC_EnterInitMode>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bc0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f9e8 	bl	8004f98 <RTC_ExitInitMode>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}

08004bf4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	0b5b      	lsrs	r3, r3, #13
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	78db      	ldrb	r3, [r3, #3]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f9fe 	bl	8005054 <RTC_Bcd2ToByte>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f9f5 	bl	8005054 <RTC_Bcd2ToByte>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	789b      	ldrb	r3, [r3, #2]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f9ec 	bl	8005054 <RTC_Bcd2ToByte>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c8e:	b590      	push	{r4, r7, lr}
 8004c90:	b089      	sub	sp, #36	; 0x24
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RTC_SetAlarm+0x1a>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e11b      	b.n	8004ee0 <HAL_RTC_SetAlarm+0x252>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d137      	bne.n	8004d2e <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f99c 	bl	8005014 <RTC_ByteToBcd2>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 f995 	bl	8005014 <RTC_ByteToBcd2>
 8004cea:	4603      	mov	r3, r0
 8004cec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	789b      	ldrb	r3, [r3, #2]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f98d 	bl	8005014 <RTC_ByteToBcd2>
 8004cfa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004cfc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	78db      	ldrb	r3, [r3, #3]
 8004d04:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d06:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f97f 	bl	8005014 <RTC_ByteToBcd2>
 8004d16:	4603      	mov	r3, r0
 8004d18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e023      	b.n	8004d76 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d4e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	78db      	ldrb	r3, [r3, #3]
 8004d5a:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d5c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d6c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	22ca      	movs	r2, #202	; 0xca
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2253      	movs	r2, #83	; 0x53
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9a:	d14a      	bne.n	8004e32 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004daa:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004dbc:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dcc:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004dce:	f7fc fcd7 	bl	8001780 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004dd4:	e015      	b.n	8004e02 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dd6:	f7fc fcd3 	bl	8001780 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de4:	d90d      	bls.n	8004e02 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	22ff      	movs	r2, #255	; 0xff
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2203      	movs	r2, #3
 8004df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e06e      	b.n	8004ee0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0e2      	beq.n	8004dd6 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	e049      	b.n	8004ec6 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e40:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004e52:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e62:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004e64:	f7fc fc8c 	bl	8001780 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e6a:	e015      	b.n	8004e98 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e6c:	f7fc fc88 	bl	8001780 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e7a:	d90d      	bls.n	8004e98 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	22ff      	movs	r2, #255	; 0xff
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2203      	movs	r2, #3
 8004e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e023      	b.n	8004ee0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0e2      	beq.n	8004e6c <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	22ff      	movs	r2, #255	; 0xff
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd90      	pop	{r4, r7, pc}

08004ee8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <HAL_RTC_WaitForSynchro+0x44>)
 8004ef6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004ef8:	f7fc fc42 	bl	8001780 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004efe:	e009      	b.n	8004f14 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f00:	f7fc fc3e 	bl	8001780 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f0e:	d901      	bls.n	8004f14 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e007      	b.n	8004f24 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ee      	beq.n	8004f00 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	0003ff5f 	.word	0x0003ff5f

08004f30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d120      	bne.n	8004f8c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f54:	f7fc fc14 	bl	8001780 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f5a:	e00d      	b.n	8004f78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004f5c:	f7fc fc10 	bl	8001780 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f6a:	d905      	bls.n	8004f78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2203      	movs	r2, #3
 8004f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <RTC_EnterInitMode+0x5c>
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d1e7      	bne.n	8004f5c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10c      	bne.n	8004fd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ff93 	bl	8004ee8 <HAL_RTC_WaitForSynchro>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01e      	beq.n	8005006 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e017      	b.n	8005006 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004fdc:	f023 0320 	bic.w	r3, r3, #32
 8004fe0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff80 	bl	8004ee8 <HAL_RTC_WaitForSynchro>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <RTC_ExitInitMode+0x78>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <RTC_ExitInitMode+0x78>)
 8005000:	f043 0320 	orr.w	r3, r3, #32
 8005004:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40002800 	.word	0x40002800

08005014 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005026:	e005      	b.n	8005034 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3301      	adds	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	3b0a      	subs	r3, #10
 8005032:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	2b09      	cmp	r3, #9
 8005038:	d8f6      	bhi.n	8005028 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	b2da      	uxtb	r2, r3
 8005042:	7afb      	ldrb	r3, [r7, #11]
 8005044:	4313      	orrs	r3, r2
 8005046:	b2db      	uxtb	r3, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	0092      	lsls	r2, r2, #2
 8005068:	4413      	add	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	b2da      	uxtb	r2, r3
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	4413      	add	r3, r2
 800507a:	b2db      	uxtb	r3, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <rand>:
 8005088:	4b16      	ldr	r3, [pc, #88]	; (80050e4 <rand+0x5c>)
 800508a:	b510      	push	{r4, lr}
 800508c:	681c      	ldr	r4, [r3, #0]
 800508e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005090:	b9b3      	cbnz	r3, 80050c0 <rand+0x38>
 8005092:	2018      	movs	r0, #24
 8005094:	f000 fa42 	bl	800551c <malloc>
 8005098:	4602      	mov	r2, r0
 800509a:	6320      	str	r0, [r4, #48]	; 0x30
 800509c:	b920      	cbnz	r0, 80050a8 <rand+0x20>
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <rand+0x60>)
 80050a0:	4812      	ldr	r0, [pc, #72]	; (80050ec <rand+0x64>)
 80050a2:	2152      	movs	r1, #82	; 0x52
 80050a4:	f000 f9d0 	bl	8005448 <__assert_func>
 80050a8:	4911      	ldr	r1, [pc, #68]	; (80050f0 <rand+0x68>)
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <rand+0x6c>)
 80050ac:	e9c0 1300 	strd	r1, r3, [r0]
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <rand+0x70>)
 80050b2:	6083      	str	r3, [r0, #8]
 80050b4:	230b      	movs	r3, #11
 80050b6:	8183      	strh	r3, [r0, #12]
 80050b8:	2100      	movs	r1, #0
 80050ba:	2001      	movs	r0, #1
 80050bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80050c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80050c2:	480e      	ldr	r0, [pc, #56]	; (80050fc <rand+0x74>)
 80050c4:	690b      	ldr	r3, [r1, #16]
 80050c6:	694c      	ldr	r4, [r1, #20]
 80050c8:	4a0d      	ldr	r2, [pc, #52]	; (8005100 <rand+0x78>)
 80050ca:	4358      	muls	r0, r3
 80050cc:	fb02 0004 	mla	r0, r2, r4, r0
 80050d0:	fba3 3202 	umull	r3, r2, r3, r2
 80050d4:	3301      	adds	r3, #1
 80050d6:	eb40 0002 	adc.w	r0, r0, r2
 80050da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80050de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80050e2:	bd10      	pop	{r4, pc}
 80050e4:	20000064 	.word	0x20000064
 80050e8:	08006500 	.word	0x08006500
 80050ec:	08006517 	.word	0x08006517
 80050f0:	abcd330e 	.word	0xabcd330e
 80050f4:	e66d1234 	.word	0xe66d1234
 80050f8:	0005deec 	.word	0x0005deec
 80050fc:	5851f42d 	.word	0x5851f42d
 8005100:	4c957f2d 	.word	0x4c957f2d

08005104 <std>:
 8005104:	2300      	movs	r3, #0
 8005106:	b510      	push	{r4, lr}
 8005108:	4604      	mov	r4, r0
 800510a:	e9c0 3300 	strd	r3, r3, [r0]
 800510e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005112:	6083      	str	r3, [r0, #8]
 8005114:	8181      	strh	r1, [r0, #12]
 8005116:	6643      	str	r3, [r0, #100]	; 0x64
 8005118:	81c2      	strh	r2, [r0, #14]
 800511a:	6183      	str	r3, [r0, #24]
 800511c:	4619      	mov	r1, r3
 800511e:	2208      	movs	r2, #8
 8005120:	305c      	adds	r0, #92	; 0x5c
 8005122:	f000 f914 	bl	800534e <memset>
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <std+0x58>)
 8005128:	6263      	str	r3, [r4, #36]	; 0x24
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <std+0x5c>)
 800512c:	62a3      	str	r3, [r4, #40]	; 0x28
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <std+0x60>)
 8005130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005132:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <std+0x64>)
 8005134:	6323      	str	r3, [r4, #48]	; 0x30
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <std+0x68>)
 8005138:	6224      	str	r4, [r4, #32]
 800513a:	429c      	cmp	r4, r3
 800513c:	d006      	beq.n	800514c <std+0x48>
 800513e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005142:	4294      	cmp	r4, r2
 8005144:	d002      	beq.n	800514c <std+0x48>
 8005146:	33d0      	adds	r3, #208	; 0xd0
 8005148:	429c      	cmp	r4, r3
 800514a:	d105      	bne.n	8005158 <std+0x54>
 800514c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005154:	f000 b974 	b.w	8005440 <__retarget_lock_init_recursive>
 8005158:	bd10      	pop	{r4, pc}
 800515a:	bf00      	nop
 800515c:	080052c9 	.word	0x080052c9
 8005160:	080052eb 	.word	0x080052eb
 8005164:	08005323 	.word	0x08005323
 8005168:	08005347 	.word	0x08005347
 800516c:	20000164 	.word	0x20000164

08005170 <stdio_exit_handler>:
 8005170:	4a02      	ldr	r2, [pc, #8]	; (800517c <stdio_exit_handler+0xc>)
 8005172:	4903      	ldr	r1, [pc, #12]	; (8005180 <stdio_exit_handler+0x10>)
 8005174:	4803      	ldr	r0, [pc, #12]	; (8005184 <stdio_exit_handler+0x14>)
 8005176:	f000 b869 	b.w	800524c <_fwalk_sglue>
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c
 8005180:	08005d61 	.word	0x08005d61
 8005184:	20000018 	.word	0x20000018

08005188 <cleanup_stdio>:
 8005188:	6841      	ldr	r1, [r0, #4]
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <cleanup_stdio+0x34>)
 800518c:	4299      	cmp	r1, r3
 800518e:	b510      	push	{r4, lr}
 8005190:	4604      	mov	r4, r0
 8005192:	d001      	beq.n	8005198 <cleanup_stdio+0x10>
 8005194:	f000 fde4 	bl	8005d60 <_fflush_r>
 8005198:	68a1      	ldr	r1, [r4, #8]
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <cleanup_stdio+0x38>)
 800519c:	4299      	cmp	r1, r3
 800519e:	d002      	beq.n	80051a6 <cleanup_stdio+0x1e>
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 fddd 	bl	8005d60 <_fflush_r>
 80051a6:	68e1      	ldr	r1, [r4, #12]
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <cleanup_stdio+0x3c>)
 80051aa:	4299      	cmp	r1, r3
 80051ac:	d004      	beq.n	80051b8 <cleanup_stdio+0x30>
 80051ae:	4620      	mov	r0, r4
 80051b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b4:	f000 bdd4 	b.w	8005d60 <_fflush_r>
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	bf00      	nop
 80051bc:	20000164 	.word	0x20000164
 80051c0:	200001cc 	.word	0x200001cc
 80051c4:	20000234 	.word	0x20000234

080051c8 <global_stdio_init.part.0>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <global_stdio_init.part.0+0x30>)
 80051cc:	4c0b      	ldr	r4, [pc, #44]	; (80051fc <global_stdio_init.part.0+0x34>)
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <global_stdio_init.part.0+0x38>)
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	4620      	mov	r0, r4
 80051d4:	2200      	movs	r2, #0
 80051d6:	2104      	movs	r1, #4
 80051d8:	f7ff ff94 	bl	8005104 <std>
 80051dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051e0:	2201      	movs	r2, #1
 80051e2:	2109      	movs	r1, #9
 80051e4:	f7ff ff8e 	bl	8005104 <std>
 80051e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051ec:	2202      	movs	r2, #2
 80051ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f2:	2112      	movs	r1, #18
 80051f4:	f7ff bf86 	b.w	8005104 <std>
 80051f8:	2000029c 	.word	0x2000029c
 80051fc:	20000164 	.word	0x20000164
 8005200:	08005171 	.word	0x08005171

08005204 <__sfp_lock_acquire>:
 8005204:	4801      	ldr	r0, [pc, #4]	; (800520c <__sfp_lock_acquire+0x8>)
 8005206:	f000 b91c 	b.w	8005442 <__retarget_lock_acquire_recursive>
 800520a:	bf00      	nop
 800520c:	200002a5 	.word	0x200002a5

08005210 <__sfp_lock_release>:
 8005210:	4801      	ldr	r0, [pc, #4]	; (8005218 <__sfp_lock_release+0x8>)
 8005212:	f000 b917 	b.w	8005444 <__retarget_lock_release_recursive>
 8005216:	bf00      	nop
 8005218:	200002a5 	.word	0x200002a5

0800521c <__sinit>:
 800521c:	b510      	push	{r4, lr}
 800521e:	4604      	mov	r4, r0
 8005220:	f7ff fff0 	bl	8005204 <__sfp_lock_acquire>
 8005224:	6a23      	ldr	r3, [r4, #32]
 8005226:	b11b      	cbz	r3, 8005230 <__sinit+0x14>
 8005228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800522c:	f7ff bff0 	b.w	8005210 <__sfp_lock_release>
 8005230:	4b04      	ldr	r3, [pc, #16]	; (8005244 <__sinit+0x28>)
 8005232:	6223      	str	r3, [r4, #32]
 8005234:	4b04      	ldr	r3, [pc, #16]	; (8005248 <__sinit+0x2c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f5      	bne.n	8005228 <__sinit+0xc>
 800523c:	f7ff ffc4 	bl	80051c8 <global_stdio_init.part.0>
 8005240:	e7f2      	b.n	8005228 <__sinit+0xc>
 8005242:	bf00      	nop
 8005244:	08005189 	.word	0x08005189
 8005248:	2000029c 	.word	0x2000029c

0800524c <_fwalk_sglue>:
 800524c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005250:	4607      	mov	r7, r0
 8005252:	4688      	mov	r8, r1
 8005254:	4614      	mov	r4, r2
 8005256:	2600      	movs	r6, #0
 8005258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800525c:	f1b9 0901 	subs.w	r9, r9, #1
 8005260:	d505      	bpl.n	800526e <_fwalk_sglue+0x22>
 8005262:	6824      	ldr	r4, [r4, #0]
 8005264:	2c00      	cmp	r4, #0
 8005266:	d1f7      	bne.n	8005258 <_fwalk_sglue+0xc>
 8005268:	4630      	mov	r0, r6
 800526a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d907      	bls.n	8005284 <_fwalk_sglue+0x38>
 8005274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005278:	3301      	adds	r3, #1
 800527a:	d003      	beq.n	8005284 <_fwalk_sglue+0x38>
 800527c:	4629      	mov	r1, r5
 800527e:	4638      	mov	r0, r7
 8005280:	47c0      	blx	r8
 8005282:	4306      	orrs	r6, r0
 8005284:	3568      	adds	r5, #104	; 0x68
 8005286:	e7e9      	b.n	800525c <_fwalk_sglue+0x10>

08005288 <siprintf>:
 8005288:	b40e      	push	{r1, r2, r3}
 800528a:	b500      	push	{lr}
 800528c:	b09c      	sub	sp, #112	; 0x70
 800528e:	ab1d      	add	r3, sp, #116	; 0x74
 8005290:	9002      	str	r0, [sp, #8]
 8005292:	9006      	str	r0, [sp, #24]
 8005294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005298:	4809      	ldr	r0, [pc, #36]	; (80052c0 <siprintf+0x38>)
 800529a:	9107      	str	r1, [sp, #28]
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4909      	ldr	r1, [pc, #36]	; (80052c4 <siprintf+0x3c>)
 80052a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052a4:	9105      	str	r1, [sp, #20]
 80052a6:	6800      	ldr	r0, [r0, #0]
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	a902      	add	r1, sp, #8
 80052ac:	f000 fa44 	bl	8005738 <_svfiprintf_r>
 80052b0:	9b02      	ldr	r3, [sp, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	b01c      	add	sp, #112	; 0x70
 80052b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052bc:	b003      	add	sp, #12
 80052be:	4770      	bx	lr
 80052c0:	20000064 	.word	0x20000064
 80052c4:	ffff0208 	.word	0xffff0208

080052c8 <__sread>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	f000 f868 	bl	80053a4 <_read_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	bfab      	itete	ge
 80052d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052da:	89a3      	ldrhlt	r3, [r4, #12]
 80052dc:	181b      	addge	r3, r3, r0
 80052de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052e2:	bfac      	ite	ge
 80052e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052e6:	81a3      	strhlt	r3, [r4, #12]
 80052e8:	bd10      	pop	{r4, pc}

080052ea <__swrite>:
 80052ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ee:	461f      	mov	r7, r3
 80052f0:	898b      	ldrh	r3, [r1, #12]
 80052f2:	05db      	lsls	r3, r3, #23
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	4616      	mov	r6, r2
 80052fa:	d505      	bpl.n	8005308 <__swrite+0x1e>
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	2302      	movs	r3, #2
 8005302:	2200      	movs	r2, #0
 8005304:	f000 f83c 	bl	8005380 <_lseek_r>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	4632      	mov	r2, r6
 8005316:	463b      	mov	r3, r7
 8005318:	4628      	mov	r0, r5
 800531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	f000 b853 	b.w	80053c8 <_write_r>

08005322 <__sseek>:
 8005322:	b510      	push	{r4, lr}
 8005324:	460c      	mov	r4, r1
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 f829 	bl	8005380 <_lseek_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	bf15      	itete	ne
 8005334:	6560      	strne	r0, [r4, #84]	; 0x54
 8005336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800533a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800533e:	81a3      	strheq	r3, [r4, #12]
 8005340:	bf18      	it	ne
 8005342:	81a3      	strhne	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__sclose>:
 8005346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534a:	f000 b809 	b.w	8005360 <_close_r>

0800534e <memset>:
 800534e:	4402      	add	r2, r0
 8005350:	4603      	mov	r3, r0
 8005352:	4293      	cmp	r3, r2
 8005354:	d100      	bne.n	8005358 <memset+0xa>
 8005356:	4770      	bx	lr
 8005358:	f803 1b01 	strb.w	r1, [r3], #1
 800535c:	e7f9      	b.n	8005352 <memset+0x4>
	...

08005360 <_close_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4d06      	ldr	r5, [pc, #24]	; (800537c <_close_r+0x1c>)
 8005364:	2300      	movs	r3, #0
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	f7fc f8f9 	bl	8001562 <_close>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_close_r+0x1a>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_close_r+0x1a>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	200002a0 	.word	0x200002a0

08005380 <_lseek_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	; (80053a0 <_lseek_r+0x20>)
 8005384:	4604      	mov	r4, r0
 8005386:	4608      	mov	r0, r1
 8005388:	4611      	mov	r1, r2
 800538a:	2200      	movs	r2, #0
 800538c:	602a      	str	r2, [r5, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fc f90e 	bl	80015b0 <_lseek>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_lseek_r+0x1e>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_lseek_r+0x1e>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	200002a0 	.word	0x200002a0

080053a4 <_read_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	; (80053c4 <_read_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fc f89c 	bl	80014f0 <_read>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_read_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_read_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	200002a0 	.word	0x200002a0

080053c8 <_write_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	; (80053e8 <_write_r+0x20>)
 80053cc:	4604      	mov	r4, r0
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fc f8a7 	bl	800152a <_write>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_write_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_write_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	200002a0 	.word	0x200002a0

080053ec <__errno>:
 80053ec:	4b01      	ldr	r3, [pc, #4]	; (80053f4 <__errno+0x8>)
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000064 	.word	0x20000064

080053f8 <__libc_init_array>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	4d0d      	ldr	r5, [pc, #52]	; (8005430 <__libc_init_array+0x38>)
 80053fc:	4c0d      	ldr	r4, [pc, #52]	; (8005434 <__libc_init_array+0x3c>)
 80053fe:	1b64      	subs	r4, r4, r5
 8005400:	10a4      	asrs	r4, r4, #2
 8005402:	2600      	movs	r6, #0
 8005404:	42a6      	cmp	r6, r4
 8005406:	d109      	bne.n	800541c <__libc_init_array+0x24>
 8005408:	4d0b      	ldr	r5, [pc, #44]	; (8005438 <__libc_init_array+0x40>)
 800540a:	4c0c      	ldr	r4, [pc, #48]	; (800543c <__libc_init_array+0x44>)
 800540c:	f000 fffa 	bl	8006404 <_init>
 8005410:	1b64      	subs	r4, r4, r5
 8005412:	10a4      	asrs	r4, r4, #2
 8005414:	2600      	movs	r6, #0
 8005416:	42a6      	cmp	r6, r4
 8005418:	d105      	bne.n	8005426 <__libc_init_array+0x2e>
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005420:	4798      	blx	r3
 8005422:	3601      	adds	r6, #1
 8005424:	e7ee      	b.n	8005404 <__libc_init_array+0xc>
 8005426:	f855 3b04 	ldr.w	r3, [r5], #4
 800542a:	4798      	blx	r3
 800542c:	3601      	adds	r6, #1
 800542e:	e7f2      	b.n	8005416 <__libc_init_array+0x1e>
 8005430:	080065e0 	.word	0x080065e0
 8005434:	080065e0 	.word	0x080065e0
 8005438:	080065e0 	.word	0x080065e0
 800543c:	080065e4 	.word	0x080065e4

08005440 <__retarget_lock_init_recursive>:
 8005440:	4770      	bx	lr

08005442 <__retarget_lock_acquire_recursive>:
 8005442:	4770      	bx	lr

08005444 <__retarget_lock_release_recursive>:
 8005444:	4770      	bx	lr
	...

08005448 <__assert_func>:
 8005448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800544a:	4614      	mov	r4, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <__assert_func+0x2c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4605      	mov	r5, r0
 8005454:	68d8      	ldr	r0, [r3, #12]
 8005456:	b14c      	cbz	r4, 800546c <__assert_func+0x24>
 8005458:	4b07      	ldr	r3, [pc, #28]	; (8005478 <__assert_func+0x30>)
 800545a:	9100      	str	r1, [sp, #0]
 800545c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005460:	4906      	ldr	r1, [pc, #24]	; (800547c <__assert_func+0x34>)
 8005462:	462b      	mov	r3, r5
 8005464:	f000 fca4 	bl	8005db0 <fiprintf>
 8005468:	f000 fcec 	bl	8005e44 <abort>
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <__assert_func+0x38>)
 800546e:	461c      	mov	r4, r3
 8005470:	e7f3      	b.n	800545a <__assert_func+0x12>
 8005472:	bf00      	nop
 8005474:	20000064 	.word	0x20000064
 8005478:	0800656f 	.word	0x0800656f
 800547c:	0800657c 	.word	0x0800657c
 8005480:	080065aa 	.word	0x080065aa

08005484 <_free_r>:
 8005484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005486:	2900      	cmp	r1, #0
 8005488:	d044      	beq.n	8005514 <_free_r+0x90>
 800548a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548e:	9001      	str	r0, [sp, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f1a1 0404 	sub.w	r4, r1, #4
 8005496:	bfb8      	it	lt
 8005498:	18e4      	addlt	r4, r4, r3
 800549a:	f000 f8e7 	bl	800566c <__malloc_lock>
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <_free_r+0x94>)
 80054a0:	9801      	ldr	r0, [sp, #4]
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	b933      	cbnz	r3, 80054b4 <_free_r+0x30>
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	6014      	str	r4, [r2, #0]
 80054aa:	b003      	add	sp, #12
 80054ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054b0:	f000 b8e2 	b.w	8005678 <__malloc_unlock>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d908      	bls.n	80054ca <_free_r+0x46>
 80054b8:	6825      	ldr	r5, [r4, #0]
 80054ba:	1961      	adds	r1, r4, r5
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf01      	itttt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	1949      	addeq	r1, r1, r5
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	e7ed      	b.n	80054a6 <_free_r+0x22>
 80054ca:	461a      	mov	r2, r3
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b10b      	cbz	r3, 80054d4 <_free_r+0x50>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d9fa      	bls.n	80054ca <_free_r+0x46>
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	1855      	adds	r5, r2, r1
 80054d8:	42a5      	cmp	r5, r4
 80054da:	d10b      	bne.n	80054f4 <_free_r+0x70>
 80054dc:	6824      	ldr	r4, [r4, #0]
 80054de:	4421      	add	r1, r4
 80054e0:	1854      	adds	r4, r2, r1
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	6011      	str	r1, [r2, #0]
 80054e6:	d1e0      	bne.n	80054aa <_free_r+0x26>
 80054e8:	681c      	ldr	r4, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	6053      	str	r3, [r2, #4]
 80054ee:	440c      	add	r4, r1
 80054f0:	6014      	str	r4, [r2, #0]
 80054f2:	e7da      	b.n	80054aa <_free_r+0x26>
 80054f4:	d902      	bls.n	80054fc <_free_r+0x78>
 80054f6:	230c      	movs	r3, #12
 80054f8:	6003      	str	r3, [r0, #0]
 80054fa:	e7d6      	b.n	80054aa <_free_r+0x26>
 80054fc:	6825      	ldr	r5, [r4, #0]
 80054fe:	1961      	adds	r1, r4, r5
 8005500:	428b      	cmp	r3, r1
 8005502:	bf04      	itt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	6063      	str	r3, [r4, #4]
 800550a:	bf04      	itt	eq
 800550c:	1949      	addeq	r1, r1, r5
 800550e:	6021      	streq	r1, [r4, #0]
 8005510:	6054      	str	r4, [r2, #4]
 8005512:	e7ca      	b.n	80054aa <_free_r+0x26>
 8005514:	b003      	add	sp, #12
 8005516:	bd30      	pop	{r4, r5, pc}
 8005518:	200002a8 	.word	0x200002a8

0800551c <malloc>:
 800551c:	4b02      	ldr	r3, [pc, #8]	; (8005528 <malloc+0xc>)
 800551e:	4601      	mov	r1, r0
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	f000 b823 	b.w	800556c <_malloc_r>
 8005526:	bf00      	nop
 8005528:	20000064 	.word	0x20000064

0800552c <sbrk_aligned>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4e0e      	ldr	r6, [pc, #56]	; (8005568 <sbrk_aligned+0x3c>)
 8005530:	460c      	mov	r4, r1
 8005532:	6831      	ldr	r1, [r6, #0]
 8005534:	4605      	mov	r5, r0
 8005536:	b911      	cbnz	r1, 800553e <sbrk_aligned+0x12>
 8005538:	f000 fc66 	bl	8005e08 <_sbrk_r>
 800553c:	6030      	str	r0, [r6, #0]
 800553e:	4621      	mov	r1, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fc61 	bl	8005e08 <_sbrk_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d00a      	beq.n	8005560 <sbrk_aligned+0x34>
 800554a:	1cc4      	adds	r4, r0, #3
 800554c:	f024 0403 	bic.w	r4, r4, #3
 8005550:	42a0      	cmp	r0, r4
 8005552:	d007      	beq.n	8005564 <sbrk_aligned+0x38>
 8005554:	1a21      	subs	r1, r4, r0
 8005556:	4628      	mov	r0, r5
 8005558:	f000 fc56 	bl	8005e08 <_sbrk_r>
 800555c:	3001      	adds	r0, #1
 800555e:	d101      	bne.n	8005564 <sbrk_aligned+0x38>
 8005560:	f04f 34ff 	mov.w	r4, #4294967295
 8005564:	4620      	mov	r0, r4
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	200002ac 	.word	0x200002ac

0800556c <_malloc_r>:
 800556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005570:	1ccd      	adds	r5, r1, #3
 8005572:	f025 0503 	bic.w	r5, r5, #3
 8005576:	3508      	adds	r5, #8
 8005578:	2d0c      	cmp	r5, #12
 800557a:	bf38      	it	cc
 800557c:	250c      	movcc	r5, #12
 800557e:	2d00      	cmp	r5, #0
 8005580:	4607      	mov	r7, r0
 8005582:	db01      	blt.n	8005588 <_malloc_r+0x1c>
 8005584:	42a9      	cmp	r1, r5
 8005586:	d905      	bls.n	8005594 <_malloc_r+0x28>
 8005588:	230c      	movs	r3, #12
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	2600      	movs	r6, #0
 800558e:	4630      	mov	r0, r6
 8005590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005594:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005668 <_malloc_r+0xfc>
 8005598:	f000 f868 	bl	800566c <__malloc_lock>
 800559c:	f8d8 3000 	ldr.w	r3, [r8]
 80055a0:	461c      	mov	r4, r3
 80055a2:	bb5c      	cbnz	r4, 80055fc <_malloc_r+0x90>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ffc0 	bl	800552c <sbrk_aligned>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4604      	mov	r4, r0
 80055b0:	d155      	bne.n	800565e <_malloc_r+0xf2>
 80055b2:	f8d8 4000 	ldr.w	r4, [r8]
 80055b6:	4626      	mov	r6, r4
 80055b8:	2e00      	cmp	r6, #0
 80055ba:	d145      	bne.n	8005648 <_malloc_r+0xdc>
 80055bc:	2c00      	cmp	r4, #0
 80055be:	d048      	beq.n	8005652 <_malloc_r+0xe6>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	4631      	mov	r1, r6
 80055c4:	4638      	mov	r0, r7
 80055c6:	eb04 0903 	add.w	r9, r4, r3
 80055ca:	f000 fc1d 	bl	8005e08 <_sbrk_r>
 80055ce:	4581      	cmp	r9, r0
 80055d0:	d13f      	bne.n	8005652 <_malloc_r+0xe6>
 80055d2:	6821      	ldr	r1, [r4, #0]
 80055d4:	1a6d      	subs	r5, r5, r1
 80055d6:	4629      	mov	r1, r5
 80055d8:	4638      	mov	r0, r7
 80055da:	f7ff ffa7 	bl	800552c <sbrk_aligned>
 80055de:	3001      	adds	r0, #1
 80055e0:	d037      	beq.n	8005652 <_malloc_r+0xe6>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	442b      	add	r3, r5
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d038      	beq.n	8005662 <_malloc_r+0xf6>
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	42a2      	cmp	r2, r4
 80055f4:	d12b      	bne.n	800564e <_malloc_r+0xe2>
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	e00f      	b.n	800561c <_malloc_r+0xb0>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	1b52      	subs	r2, r2, r5
 8005600:	d41f      	bmi.n	8005642 <_malloc_r+0xd6>
 8005602:	2a0b      	cmp	r2, #11
 8005604:	d917      	bls.n	8005636 <_malloc_r+0xca>
 8005606:	1961      	adds	r1, r4, r5
 8005608:	42a3      	cmp	r3, r4
 800560a:	6025      	str	r5, [r4, #0]
 800560c:	bf18      	it	ne
 800560e:	6059      	strne	r1, [r3, #4]
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	bf08      	it	eq
 8005614:	f8c8 1000 	streq.w	r1, [r8]
 8005618:	5162      	str	r2, [r4, r5]
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	4638      	mov	r0, r7
 800561e:	f104 060b 	add.w	r6, r4, #11
 8005622:	f000 f829 	bl	8005678 <__malloc_unlock>
 8005626:	f026 0607 	bic.w	r6, r6, #7
 800562a:	1d23      	adds	r3, r4, #4
 800562c:	1af2      	subs	r2, r6, r3
 800562e:	d0ae      	beq.n	800558e <_malloc_r+0x22>
 8005630:	1b9b      	subs	r3, r3, r6
 8005632:	50a3      	str	r3, [r4, r2]
 8005634:	e7ab      	b.n	800558e <_malloc_r+0x22>
 8005636:	42a3      	cmp	r3, r4
 8005638:	6862      	ldr	r2, [r4, #4]
 800563a:	d1dd      	bne.n	80055f8 <_malloc_r+0x8c>
 800563c:	f8c8 2000 	str.w	r2, [r8]
 8005640:	e7ec      	b.n	800561c <_malloc_r+0xb0>
 8005642:	4623      	mov	r3, r4
 8005644:	6864      	ldr	r4, [r4, #4]
 8005646:	e7ac      	b.n	80055a2 <_malloc_r+0x36>
 8005648:	4634      	mov	r4, r6
 800564a:	6876      	ldr	r6, [r6, #4]
 800564c:	e7b4      	b.n	80055b8 <_malloc_r+0x4c>
 800564e:	4613      	mov	r3, r2
 8005650:	e7cc      	b.n	80055ec <_malloc_r+0x80>
 8005652:	230c      	movs	r3, #12
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4638      	mov	r0, r7
 8005658:	f000 f80e 	bl	8005678 <__malloc_unlock>
 800565c:	e797      	b.n	800558e <_malloc_r+0x22>
 800565e:	6025      	str	r5, [r4, #0]
 8005660:	e7dc      	b.n	800561c <_malloc_r+0xb0>
 8005662:	605b      	str	r3, [r3, #4]
 8005664:	deff      	udf	#255	; 0xff
 8005666:	bf00      	nop
 8005668:	200002a8 	.word	0x200002a8

0800566c <__malloc_lock>:
 800566c:	4801      	ldr	r0, [pc, #4]	; (8005674 <__malloc_lock+0x8>)
 800566e:	f7ff bee8 	b.w	8005442 <__retarget_lock_acquire_recursive>
 8005672:	bf00      	nop
 8005674:	200002a4 	.word	0x200002a4

08005678 <__malloc_unlock>:
 8005678:	4801      	ldr	r0, [pc, #4]	; (8005680 <__malloc_unlock+0x8>)
 800567a:	f7ff bee3 	b.w	8005444 <__retarget_lock_release_recursive>
 800567e:	bf00      	nop
 8005680:	200002a4 	.word	0x200002a4

08005684 <__ssputs_r>:
 8005684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	688e      	ldr	r6, [r1, #8]
 800568a:	461f      	mov	r7, r3
 800568c:	42be      	cmp	r6, r7
 800568e:	680b      	ldr	r3, [r1, #0]
 8005690:	4682      	mov	sl, r0
 8005692:	460c      	mov	r4, r1
 8005694:	4690      	mov	r8, r2
 8005696:	d82c      	bhi.n	80056f2 <__ssputs_r+0x6e>
 8005698:	898a      	ldrh	r2, [r1, #12]
 800569a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800569e:	d026      	beq.n	80056ee <__ssputs_r+0x6a>
 80056a0:	6965      	ldr	r5, [r4, #20]
 80056a2:	6909      	ldr	r1, [r1, #16]
 80056a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056a8:	eba3 0901 	sub.w	r9, r3, r1
 80056ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056b0:	1c7b      	adds	r3, r7, #1
 80056b2:	444b      	add	r3, r9
 80056b4:	106d      	asrs	r5, r5, #1
 80056b6:	429d      	cmp	r5, r3
 80056b8:	bf38      	it	cc
 80056ba:	461d      	movcc	r5, r3
 80056bc:	0553      	lsls	r3, r2, #21
 80056be:	d527      	bpl.n	8005710 <__ssputs_r+0x8c>
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7ff ff53 	bl	800556c <_malloc_r>
 80056c6:	4606      	mov	r6, r0
 80056c8:	b360      	cbz	r0, 8005724 <__ssputs_r+0xa0>
 80056ca:	6921      	ldr	r1, [r4, #16]
 80056cc:	464a      	mov	r2, r9
 80056ce:	f000 fbab 	bl	8005e28 <memcpy>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	6126      	str	r6, [r4, #16]
 80056e0:	6165      	str	r5, [r4, #20]
 80056e2:	444e      	add	r6, r9
 80056e4:	eba5 0509 	sub.w	r5, r5, r9
 80056e8:	6026      	str	r6, [r4, #0]
 80056ea:	60a5      	str	r5, [r4, #8]
 80056ec:	463e      	mov	r6, r7
 80056ee:	42be      	cmp	r6, r7
 80056f0:	d900      	bls.n	80056f4 <__ssputs_r+0x70>
 80056f2:	463e      	mov	r6, r7
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	4632      	mov	r2, r6
 80056f8:	4641      	mov	r1, r8
 80056fa:	f000 fb6b 	bl	8005dd4 <memmove>
 80056fe:	68a3      	ldr	r3, [r4, #8]
 8005700:	1b9b      	subs	r3, r3, r6
 8005702:	60a3      	str	r3, [r4, #8]
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	4433      	add	r3, r6
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	2000      	movs	r0, #0
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005710:	462a      	mov	r2, r5
 8005712:	f000 fb9e 	bl	8005e52 <_realloc_r>
 8005716:	4606      	mov	r6, r0
 8005718:	2800      	cmp	r0, #0
 800571a:	d1e0      	bne.n	80056de <__ssputs_r+0x5a>
 800571c:	6921      	ldr	r1, [r4, #16]
 800571e:	4650      	mov	r0, sl
 8005720:	f7ff feb0 	bl	8005484 <_free_r>
 8005724:	230c      	movs	r3, #12
 8005726:	f8ca 3000 	str.w	r3, [sl]
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	e7e9      	b.n	800570c <__ssputs_r+0x88>

08005738 <_svfiprintf_r>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	4698      	mov	r8, r3
 800573e:	898b      	ldrh	r3, [r1, #12]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	b09d      	sub	sp, #116	; 0x74
 8005744:	4607      	mov	r7, r0
 8005746:	460d      	mov	r5, r1
 8005748:	4614      	mov	r4, r2
 800574a:	d50e      	bpl.n	800576a <_svfiprintf_r+0x32>
 800574c:	690b      	ldr	r3, [r1, #16]
 800574e:	b963      	cbnz	r3, 800576a <_svfiprintf_r+0x32>
 8005750:	2140      	movs	r1, #64	; 0x40
 8005752:	f7ff ff0b 	bl	800556c <_malloc_r>
 8005756:	6028      	str	r0, [r5, #0]
 8005758:	6128      	str	r0, [r5, #16]
 800575a:	b920      	cbnz	r0, 8005766 <_svfiprintf_r+0x2e>
 800575c:	230c      	movs	r3, #12
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e0d0      	b.n	8005908 <_svfiprintf_r+0x1d0>
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	616b      	str	r3, [r5, #20]
 800576a:	2300      	movs	r3, #0
 800576c:	9309      	str	r3, [sp, #36]	; 0x24
 800576e:	2320      	movs	r3, #32
 8005770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005774:	f8cd 800c 	str.w	r8, [sp, #12]
 8005778:	2330      	movs	r3, #48	; 0x30
 800577a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005920 <_svfiprintf_r+0x1e8>
 800577e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005782:	f04f 0901 	mov.w	r9, #1
 8005786:	4623      	mov	r3, r4
 8005788:	469a      	mov	sl, r3
 800578a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800578e:	b10a      	cbz	r2, 8005794 <_svfiprintf_r+0x5c>
 8005790:	2a25      	cmp	r2, #37	; 0x25
 8005792:	d1f9      	bne.n	8005788 <_svfiprintf_r+0x50>
 8005794:	ebba 0b04 	subs.w	fp, sl, r4
 8005798:	d00b      	beq.n	80057b2 <_svfiprintf_r+0x7a>
 800579a:	465b      	mov	r3, fp
 800579c:	4622      	mov	r2, r4
 800579e:	4629      	mov	r1, r5
 80057a0:	4638      	mov	r0, r7
 80057a2:	f7ff ff6f 	bl	8005684 <__ssputs_r>
 80057a6:	3001      	adds	r0, #1
 80057a8:	f000 80a9 	beq.w	80058fe <_svfiprintf_r+0x1c6>
 80057ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ae:	445a      	add	r2, fp
 80057b0:	9209      	str	r2, [sp, #36]	; 0x24
 80057b2:	f89a 3000 	ldrb.w	r3, [sl]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80a1 	beq.w	80058fe <_svfiprintf_r+0x1c6>
 80057bc:	2300      	movs	r3, #0
 80057be:	f04f 32ff 	mov.w	r2, #4294967295
 80057c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057c6:	f10a 0a01 	add.w	sl, sl, #1
 80057ca:	9304      	str	r3, [sp, #16]
 80057cc:	9307      	str	r3, [sp, #28]
 80057ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057d2:	931a      	str	r3, [sp, #104]	; 0x68
 80057d4:	4654      	mov	r4, sl
 80057d6:	2205      	movs	r2, #5
 80057d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057dc:	4850      	ldr	r0, [pc, #320]	; (8005920 <_svfiprintf_r+0x1e8>)
 80057de:	f7fa fcff 	bl	80001e0 <memchr>
 80057e2:	9a04      	ldr	r2, [sp, #16]
 80057e4:	b9d8      	cbnz	r0, 800581e <_svfiprintf_r+0xe6>
 80057e6:	06d0      	lsls	r0, r2, #27
 80057e8:	bf44      	itt	mi
 80057ea:	2320      	movmi	r3, #32
 80057ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057f0:	0711      	lsls	r1, r2, #28
 80057f2:	bf44      	itt	mi
 80057f4:	232b      	movmi	r3, #43	; 0x2b
 80057f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057fa:	f89a 3000 	ldrb.w	r3, [sl]
 80057fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005800:	d015      	beq.n	800582e <_svfiprintf_r+0xf6>
 8005802:	9a07      	ldr	r2, [sp, #28]
 8005804:	4654      	mov	r4, sl
 8005806:	2000      	movs	r0, #0
 8005808:	f04f 0c0a 	mov.w	ip, #10
 800580c:	4621      	mov	r1, r4
 800580e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005812:	3b30      	subs	r3, #48	; 0x30
 8005814:	2b09      	cmp	r3, #9
 8005816:	d94d      	bls.n	80058b4 <_svfiprintf_r+0x17c>
 8005818:	b1b0      	cbz	r0, 8005848 <_svfiprintf_r+0x110>
 800581a:	9207      	str	r2, [sp, #28]
 800581c:	e014      	b.n	8005848 <_svfiprintf_r+0x110>
 800581e:	eba0 0308 	sub.w	r3, r0, r8
 8005822:	fa09 f303 	lsl.w	r3, r9, r3
 8005826:	4313      	orrs	r3, r2
 8005828:	9304      	str	r3, [sp, #16]
 800582a:	46a2      	mov	sl, r4
 800582c:	e7d2      	b.n	80057d4 <_svfiprintf_r+0x9c>
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	1d19      	adds	r1, r3, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	9103      	str	r1, [sp, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	bfbb      	ittet	lt
 800583a:	425b      	neglt	r3, r3
 800583c:	f042 0202 	orrlt.w	r2, r2, #2
 8005840:	9307      	strge	r3, [sp, #28]
 8005842:	9307      	strlt	r3, [sp, #28]
 8005844:	bfb8      	it	lt
 8005846:	9204      	strlt	r2, [sp, #16]
 8005848:	7823      	ldrb	r3, [r4, #0]
 800584a:	2b2e      	cmp	r3, #46	; 0x2e
 800584c:	d10c      	bne.n	8005868 <_svfiprintf_r+0x130>
 800584e:	7863      	ldrb	r3, [r4, #1]
 8005850:	2b2a      	cmp	r3, #42	; 0x2a
 8005852:	d134      	bne.n	80058be <_svfiprintf_r+0x186>
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	1d1a      	adds	r2, r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	9203      	str	r2, [sp, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	bfb8      	it	lt
 8005860:	f04f 33ff 	movlt.w	r3, #4294967295
 8005864:	3402      	adds	r4, #2
 8005866:	9305      	str	r3, [sp, #20]
 8005868:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005930 <_svfiprintf_r+0x1f8>
 800586c:	7821      	ldrb	r1, [r4, #0]
 800586e:	2203      	movs	r2, #3
 8005870:	4650      	mov	r0, sl
 8005872:	f7fa fcb5 	bl	80001e0 <memchr>
 8005876:	b138      	cbz	r0, 8005888 <_svfiprintf_r+0x150>
 8005878:	9b04      	ldr	r3, [sp, #16]
 800587a:	eba0 000a 	sub.w	r0, r0, sl
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	4082      	lsls	r2, r0
 8005882:	4313      	orrs	r3, r2
 8005884:	3401      	adds	r4, #1
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800588c:	4825      	ldr	r0, [pc, #148]	; (8005924 <_svfiprintf_r+0x1ec>)
 800588e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005892:	2206      	movs	r2, #6
 8005894:	f7fa fca4 	bl	80001e0 <memchr>
 8005898:	2800      	cmp	r0, #0
 800589a:	d038      	beq.n	800590e <_svfiprintf_r+0x1d6>
 800589c:	4b22      	ldr	r3, [pc, #136]	; (8005928 <_svfiprintf_r+0x1f0>)
 800589e:	bb1b      	cbnz	r3, 80058e8 <_svfiprintf_r+0x1b0>
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	3307      	adds	r3, #7
 80058a4:	f023 0307 	bic.w	r3, r3, #7
 80058a8:	3308      	adds	r3, #8
 80058aa:	9303      	str	r3, [sp, #12]
 80058ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ae:	4433      	add	r3, r6
 80058b0:	9309      	str	r3, [sp, #36]	; 0x24
 80058b2:	e768      	b.n	8005786 <_svfiprintf_r+0x4e>
 80058b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80058b8:	460c      	mov	r4, r1
 80058ba:	2001      	movs	r0, #1
 80058bc:	e7a6      	b.n	800580c <_svfiprintf_r+0xd4>
 80058be:	2300      	movs	r3, #0
 80058c0:	3401      	adds	r4, #1
 80058c2:	9305      	str	r3, [sp, #20]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f04f 0c0a 	mov.w	ip, #10
 80058ca:	4620      	mov	r0, r4
 80058cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058d0:	3a30      	subs	r2, #48	; 0x30
 80058d2:	2a09      	cmp	r2, #9
 80058d4:	d903      	bls.n	80058de <_svfiprintf_r+0x1a6>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0c6      	beq.n	8005868 <_svfiprintf_r+0x130>
 80058da:	9105      	str	r1, [sp, #20]
 80058dc:	e7c4      	b.n	8005868 <_svfiprintf_r+0x130>
 80058de:	fb0c 2101 	mla	r1, ip, r1, r2
 80058e2:	4604      	mov	r4, r0
 80058e4:	2301      	movs	r3, #1
 80058e6:	e7f0      	b.n	80058ca <_svfiprintf_r+0x192>
 80058e8:	ab03      	add	r3, sp, #12
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	462a      	mov	r2, r5
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <_svfiprintf_r+0x1f4>)
 80058f0:	a904      	add	r1, sp, #16
 80058f2:	4638      	mov	r0, r7
 80058f4:	f3af 8000 	nop.w
 80058f8:	1c42      	adds	r2, r0, #1
 80058fa:	4606      	mov	r6, r0
 80058fc:	d1d6      	bne.n	80058ac <_svfiprintf_r+0x174>
 80058fe:	89ab      	ldrh	r3, [r5, #12]
 8005900:	065b      	lsls	r3, r3, #25
 8005902:	f53f af2d 	bmi.w	8005760 <_svfiprintf_r+0x28>
 8005906:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005908:	b01d      	add	sp, #116	; 0x74
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	ab03      	add	r3, sp, #12
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	462a      	mov	r2, r5
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <_svfiprintf_r+0x1f4>)
 8005916:	a904      	add	r1, sp, #16
 8005918:	4638      	mov	r0, r7
 800591a:	f000 f879 	bl	8005a10 <_printf_i>
 800591e:	e7eb      	b.n	80058f8 <_svfiprintf_r+0x1c0>
 8005920:	080065ab 	.word	0x080065ab
 8005924:	080065b5 	.word	0x080065b5
 8005928:	00000000 	.word	0x00000000
 800592c:	08005685 	.word	0x08005685
 8005930:	080065b1 	.word	0x080065b1

08005934 <_printf_common>:
 8005934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	4616      	mov	r6, r2
 800593a:	4699      	mov	r9, r3
 800593c:	688a      	ldr	r2, [r1, #8]
 800593e:	690b      	ldr	r3, [r1, #16]
 8005940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005944:	4293      	cmp	r3, r2
 8005946:	bfb8      	it	lt
 8005948:	4613      	movlt	r3, r2
 800594a:	6033      	str	r3, [r6, #0]
 800594c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005950:	4607      	mov	r7, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b10a      	cbz	r2, 800595a <_printf_common+0x26>
 8005956:	3301      	adds	r3, #1
 8005958:	6033      	str	r3, [r6, #0]
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	0699      	lsls	r1, r3, #26
 800595e:	bf42      	ittt	mi
 8005960:	6833      	ldrmi	r3, [r6, #0]
 8005962:	3302      	addmi	r3, #2
 8005964:	6033      	strmi	r3, [r6, #0]
 8005966:	6825      	ldr	r5, [r4, #0]
 8005968:	f015 0506 	ands.w	r5, r5, #6
 800596c:	d106      	bne.n	800597c <_printf_common+0x48>
 800596e:	f104 0a19 	add.w	sl, r4, #25
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	6832      	ldr	r2, [r6, #0]
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	42ab      	cmp	r3, r5
 800597a:	dc26      	bgt.n	80059ca <_printf_common+0x96>
 800597c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005980:	1e13      	subs	r3, r2, #0
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	bf18      	it	ne
 8005986:	2301      	movne	r3, #1
 8005988:	0692      	lsls	r2, r2, #26
 800598a:	d42b      	bmi.n	80059e4 <_printf_common+0xb0>
 800598c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005990:	4649      	mov	r1, r9
 8005992:	4638      	mov	r0, r7
 8005994:	47c0      	blx	r8
 8005996:	3001      	adds	r0, #1
 8005998:	d01e      	beq.n	80059d8 <_printf_common+0xa4>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	6922      	ldr	r2, [r4, #16]
 800599e:	f003 0306 	and.w	r3, r3, #6
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	bf02      	ittt	eq
 80059a6:	68e5      	ldreq	r5, [r4, #12]
 80059a8:	6833      	ldreq	r3, [r6, #0]
 80059aa:	1aed      	subeq	r5, r5, r3
 80059ac:	68a3      	ldr	r3, [r4, #8]
 80059ae:	bf0c      	ite	eq
 80059b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059b4:	2500      	movne	r5, #0
 80059b6:	4293      	cmp	r3, r2
 80059b8:	bfc4      	itt	gt
 80059ba:	1a9b      	subgt	r3, r3, r2
 80059bc:	18ed      	addgt	r5, r5, r3
 80059be:	2600      	movs	r6, #0
 80059c0:	341a      	adds	r4, #26
 80059c2:	42b5      	cmp	r5, r6
 80059c4:	d11a      	bne.n	80059fc <_printf_common+0xc8>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e008      	b.n	80059dc <_printf_common+0xa8>
 80059ca:	2301      	movs	r3, #1
 80059cc:	4652      	mov	r2, sl
 80059ce:	4649      	mov	r1, r9
 80059d0:	4638      	mov	r0, r7
 80059d2:	47c0      	blx	r8
 80059d4:	3001      	adds	r0, #1
 80059d6:	d103      	bne.n	80059e0 <_printf_common+0xac>
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e0:	3501      	adds	r5, #1
 80059e2:	e7c6      	b.n	8005972 <_printf_common+0x3e>
 80059e4:	18e1      	adds	r1, r4, r3
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	2030      	movs	r0, #48	; 0x30
 80059ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ee:	4422      	add	r2, r4
 80059f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059f8:	3302      	adds	r3, #2
 80059fa:	e7c7      	b.n	800598c <_printf_common+0x58>
 80059fc:	2301      	movs	r3, #1
 80059fe:	4622      	mov	r2, r4
 8005a00:	4649      	mov	r1, r9
 8005a02:	4638      	mov	r0, r7
 8005a04:	47c0      	blx	r8
 8005a06:	3001      	adds	r0, #1
 8005a08:	d0e6      	beq.n	80059d8 <_printf_common+0xa4>
 8005a0a:	3601      	adds	r6, #1
 8005a0c:	e7d9      	b.n	80059c2 <_printf_common+0x8e>
	...

08005a10 <_printf_i>:
 8005a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	7e0f      	ldrb	r7, [r1, #24]
 8005a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a18:	2f78      	cmp	r7, #120	; 0x78
 8005a1a:	4691      	mov	r9, r2
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	469a      	mov	sl, r3
 8005a22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a26:	d807      	bhi.n	8005a38 <_printf_i+0x28>
 8005a28:	2f62      	cmp	r7, #98	; 0x62
 8005a2a:	d80a      	bhi.n	8005a42 <_printf_i+0x32>
 8005a2c:	2f00      	cmp	r7, #0
 8005a2e:	f000 80d4 	beq.w	8005bda <_printf_i+0x1ca>
 8005a32:	2f58      	cmp	r7, #88	; 0x58
 8005a34:	f000 80c0 	beq.w	8005bb8 <_printf_i+0x1a8>
 8005a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a40:	e03a      	b.n	8005ab8 <_printf_i+0xa8>
 8005a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a46:	2b15      	cmp	r3, #21
 8005a48:	d8f6      	bhi.n	8005a38 <_printf_i+0x28>
 8005a4a:	a101      	add	r1, pc, #4	; (adr r1, 8005a50 <_printf_i+0x40>)
 8005a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a50:	08005aa9 	.word	0x08005aa9
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005a39 	.word	0x08005a39
 8005a5c:	08005a39 	.word	0x08005a39
 8005a60:	08005a39 	.word	0x08005a39
 8005a64:	08005a39 	.word	0x08005a39
 8005a68:	08005abd 	.word	0x08005abd
 8005a6c:	08005a39 	.word	0x08005a39
 8005a70:	08005a39 	.word	0x08005a39
 8005a74:	08005a39 	.word	0x08005a39
 8005a78:	08005a39 	.word	0x08005a39
 8005a7c:	08005bc1 	.word	0x08005bc1
 8005a80:	08005ae9 	.word	0x08005ae9
 8005a84:	08005b7b 	.word	0x08005b7b
 8005a88:	08005a39 	.word	0x08005a39
 8005a8c:	08005a39 	.word	0x08005a39
 8005a90:	08005be3 	.word	0x08005be3
 8005a94:	08005a39 	.word	0x08005a39
 8005a98:	08005ae9 	.word	0x08005ae9
 8005a9c:	08005a39 	.word	0x08005a39
 8005aa0:	08005a39 	.word	0x08005a39
 8005aa4:	08005b83 	.word	0x08005b83
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e09f      	b.n	8005bfc <_printf_i+0x1ec>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	0607      	lsls	r7, r0, #24
 8005ac2:	f103 0104 	add.w	r1, r3, #4
 8005ac6:	6029      	str	r1, [r5, #0]
 8005ac8:	d501      	bpl.n	8005ace <_printf_i+0xbe>
 8005aca:	681e      	ldr	r6, [r3, #0]
 8005acc:	e003      	b.n	8005ad6 <_printf_i+0xc6>
 8005ace:	0646      	lsls	r6, r0, #25
 8005ad0:	d5fb      	bpl.n	8005aca <_printf_i+0xba>
 8005ad2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	da03      	bge.n	8005ae2 <_printf_i+0xd2>
 8005ada:	232d      	movs	r3, #45	; 0x2d
 8005adc:	4276      	negs	r6, r6
 8005ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae2:	485a      	ldr	r0, [pc, #360]	; (8005c4c <_printf_i+0x23c>)
 8005ae4:	230a      	movs	r3, #10
 8005ae6:	e012      	b.n	8005b0e <_printf_i+0xfe>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	1d19      	adds	r1, r3, #4
 8005aee:	6029      	str	r1, [r5, #0]
 8005af0:	0605      	lsls	r5, r0, #24
 8005af2:	d501      	bpl.n	8005af8 <_printf_i+0xe8>
 8005af4:	681e      	ldr	r6, [r3, #0]
 8005af6:	e002      	b.n	8005afe <_printf_i+0xee>
 8005af8:	0641      	lsls	r1, r0, #25
 8005afa:	d5fb      	bpl.n	8005af4 <_printf_i+0xe4>
 8005afc:	881e      	ldrh	r6, [r3, #0]
 8005afe:	4853      	ldr	r0, [pc, #332]	; (8005c4c <_printf_i+0x23c>)
 8005b00:	2f6f      	cmp	r7, #111	; 0x6f
 8005b02:	bf0c      	ite	eq
 8005b04:	2308      	moveq	r3, #8
 8005b06:	230a      	movne	r3, #10
 8005b08:	2100      	movs	r1, #0
 8005b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b0e:	6865      	ldr	r5, [r4, #4]
 8005b10:	60a5      	str	r5, [r4, #8]
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	bfa2      	ittt	ge
 8005b16:	6821      	ldrge	r1, [r4, #0]
 8005b18:	f021 0104 	bicge.w	r1, r1, #4
 8005b1c:	6021      	strge	r1, [r4, #0]
 8005b1e:	b90e      	cbnz	r6, 8005b24 <_printf_i+0x114>
 8005b20:	2d00      	cmp	r5, #0
 8005b22:	d04b      	beq.n	8005bbc <_printf_i+0x1ac>
 8005b24:	4615      	mov	r5, r2
 8005b26:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b2a:	fb03 6711 	mls	r7, r3, r1, r6
 8005b2e:	5dc7      	ldrb	r7, [r0, r7]
 8005b30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b34:	4637      	mov	r7, r6
 8005b36:	42bb      	cmp	r3, r7
 8005b38:	460e      	mov	r6, r1
 8005b3a:	d9f4      	bls.n	8005b26 <_printf_i+0x116>
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d10b      	bne.n	8005b58 <_printf_i+0x148>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	07de      	lsls	r6, r3, #31
 8005b44:	d508      	bpl.n	8005b58 <_printf_i+0x148>
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	6861      	ldr	r1, [r4, #4]
 8005b4a:	4299      	cmp	r1, r3
 8005b4c:	bfde      	ittt	le
 8005b4e:	2330      	movle	r3, #48	; 0x30
 8005b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b58:	1b52      	subs	r2, r2, r5
 8005b5a:	6122      	str	r2, [r4, #16]
 8005b5c:	f8cd a000 	str.w	sl, [sp]
 8005b60:	464b      	mov	r3, r9
 8005b62:	aa03      	add	r2, sp, #12
 8005b64:	4621      	mov	r1, r4
 8005b66:	4640      	mov	r0, r8
 8005b68:	f7ff fee4 	bl	8005934 <_printf_common>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d14a      	bne.n	8005c06 <_printf_i+0x1f6>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	b004      	add	sp, #16
 8005b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	f043 0320 	orr.w	r3, r3, #32
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	4833      	ldr	r0, [pc, #204]	; (8005c50 <_printf_i+0x240>)
 8005b84:	2778      	movs	r7, #120	; 0x78
 8005b86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	6829      	ldr	r1, [r5, #0]
 8005b8e:	061f      	lsls	r7, r3, #24
 8005b90:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b94:	d402      	bmi.n	8005b9c <_printf_i+0x18c>
 8005b96:	065f      	lsls	r7, r3, #25
 8005b98:	bf48      	it	mi
 8005b9a:	b2b6      	uxthmi	r6, r6
 8005b9c:	07df      	lsls	r7, r3, #31
 8005b9e:	bf48      	it	mi
 8005ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ba4:	6029      	str	r1, [r5, #0]
 8005ba6:	bf48      	it	mi
 8005ba8:	6023      	strmi	r3, [r4, #0]
 8005baa:	b91e      	cbnz	r6, 8005bb4 <_printf_i+0x1a4>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	f023 0320 	bic.w	r3, r3, #32
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	e7a7      	b.n	8005b08 <_printf_i+0xf8>
 8005bb8:	4824      	ldr	r0, [pc, #144]	; (8005c4c <_printf_i+0x23c>)
 8005bba:	e7e4      	b.n	8005b86 <_printf_i+0x176>
 8005bbc:	4615      	mov	r5, r2
 8005bbe:	e7bd      	b.n	8005b3c <_printf_i+0x12c>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	6826      	ldr	r6, [r4, #0]
 8005bc4:	6961      	ldr	r1, [r4, #20]
 8005bc6:	1d18      	adds	r0, r3, #4
 8005bc8:	6028      	str	r0, [r5, #0]
 8005bca:	0635      	lsls	r5, r6, #24
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	d501      	bpl.n	8005bd4 <_printf_i+0x1c4>
 8005bd0:	6019      	str	r1, [r3, #0]
 8005bd2:	e002      	b.n	8005bda <_printf_i+0x1ca>
 8005bd4:	0670      	lsls	r0, r6, #25
 8005bd6:	d5fb      	bpl.n	8005bd0 <_printf_i+0x1c0>
 8005bd8:	8019      	strh	r1, [r3, #0]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	4615      	mov	r5, r2
 8005be0:	e7bc      	b.n	8005b5c <_printf_i+0x14c>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	1d1a      	adds	r2, r3, #4
 8005be6:	602a      	str	r2, [r5, #0]
 8005be8:	681d      	ldr	r5, [r3, #0]
 8005bea:	6862      	ldr	r2, [r4, #4]
 8005bec:	2100      	movs	r1, #0
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f7fa faf6 	bl	80001e0 <memchr>
 8005bf4:	b108      	cbz	r0, 8005bfa <_printf_i+0x1ea>
 8005bf6:	1b40      	subs	r0, r0, r5
 8005bf8:	6060      	str	r0, [r4, #4]
 8005bfa:	6863      	ldr	r3, [r4, #4]
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c04:	e7aa      	b.n	8005b5c <_printf_i+0x14c>
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	47d0      	blx	sl
 8005c10:	3001      	adds	r0, #1
 8005c12:	d0ad      	beq.n	8005b70 <_printf_i+0x160>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	079b      	lsls	r3, r3, #30
 8005c18:	d413      	bmi.n	8005c42 <_printf_i+0x232>
 8005c1a:	68e0      	ldr	r0, [r4, #12]
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	4298      	cmp	r0, r3
 8005c20:	bfb8      	it	lt
 8005c22:	4618      	movlt	r0, r3
 8005c24:	e7a6      	b.n	8005b74 <_printf_i+0x164>
 8005c26:	2301      	movs	r3, #1
 8005c28:	4632      	mov	r2, r6
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	47d0      	blx	sl
 8005c30:	3001      	adds	r0, #1
 8005c32:	d09d      	beq.n	8005b70 <_printf_i+0x160>
 8005c34:	3501      	adds	r5, #1
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	9903      	ldr	r1, [sp, #12]
 8005c3a:	1a5b      	subs	r3, r3, r1
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	dcf2      	bgt.n	8005c26 <_printf_i+0x216>
 8005c40:	e7eb      	b.n	8005c1a <_printf_i+0x20a>
 8005c42:	2500      	movs	r5, #0
 8005c44:	f104 0619 	add.w	r6, r4, #25
 8005c48:	e7f5      	b.n	8005c36 <_printf_i+0x226>
 8005c4a:	bf00      	nop
 8005c4c:	080065bc 	.word	0x080065bc
 8005c50:	080065cd 	.word	0x080065cd

08005c54 <__sflush_r>:
 8005c54:	898a      	ldrh	r2, [r1, #12]
 8005c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	0710      	lsls	r0, r2, #28
 8005c5e:	460c      	mov	r4, r1
 8005c60:	d458      	bmi.n	8005d14 <__sflush_r+0xc0>
 8005c62:	684b      	ldr	r3, [r1, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dc05      	bgt.n	8005c74 <__sflush_r+0x20>
 8005c68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dc02      	bgt.n	8005c74 <__sflush_r+0x20>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	d0f9      	beq.n	8005c6e <__sflush_r+0x1a>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c80:	682f      	ldr	r7, [r5, #0]
 8005c82:	6a21      	ldr	r1, [r4, #32]
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	d032      	beq.n	8005cee <__sflush_r+0x9a>
 8005c88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	075a      	lsls	r2, r3, #29
 8005c8e:	d505      	bpl.n	8005c9c <__sflush_r+0x48>
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	1ac0      	subs	r0, r0, r3
 8005c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c96:	b10b      	cbz	r3, 8005c9c <__sflush_r+0x48>
 8005c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c9a:	1ac0      	subs	r0, r0, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ca2:	6a21      	ldr	r1, [r4, #32]
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	d106      	bne.n	8005cbc <__sflush_r+0x68>
 8005cae:	6829      	ldr	r1, [r5, #0]
 8005cb0:	291d      	cmp	r1, #29
 8005cb2:	d82b      	bhi.n	8005d0c <__sflush_r+0xb8>
 8005cb4:	4a29      	ldr	r2, [pc, #164]	; (8005d5c <__sflush_r+0x108>)
 8005cb6:	410a      	asrs	r2, r1
 8005cb8:	07d6      	lsls	r6, r2, #31
 8005cba:	d427      	bmi.n	8005d0c <__sflush_r+0xb8>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	6062      	str	r2, [r4, #4]
 8005cc0:	04d9      	lsls	r1, r3, #19
 8005cc2:	6922      	ldr	r2, [r4, #16]
 8005cc4:	6022      	str	r2, [r4, #0]
 8005cc6:	d504      	bpl.n	8005cd2 <__sflush_r+0x7e>
 8005cc8:	1c42      	adds	r2, r0, #1
 8005cca:	d101      	bne.n	8005cd0 <__sflush_r+0x7c>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b903      	cbnz	r3, 8005cd2 <__sflush_r+0x7e>
 8005cd0:	6560      	str	r0, [r4, #84]	; 0x54
 8005cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd4:	602f      	str	r7, [r5, #0]
 8005cd6:	2900      	cmp	r1, #0
 8005cd8:	d0c9      	beq.n	8005c6e <__sflush_r+0x1a>
 8005cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cde:	4299      	cmp	r1, r3
 8005ce0:	d002      	beq.n	8005ce8 <__sflush_r+0x94>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7ff fbce 	bl	8005484 <_free_r>
 8005ce8:	2000      	movs	r0, #0
 8005cea:	6360      	str	r0, [r4, #52]	; 0x34
 8005cec:	e7c0      	b.n	8005c70 <__sflush_r+0x1c>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b0      	blx	r6
 8005cf4:	1c41      	adds	r1, r0, #1
 8005cf6:	d1c8      	bne.n	8005c8a <__sflush_r+0x36>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0c5      	beq.n	8005c8a <__sflush_r+0x36>
 8005cfe:	2b1d      	cmp	r3, #29
 8005d00:	d001      	beq.n	8005d06 <__sflush_r+0xb2>
 8005d02:	2b16      	cmp	r3, #22
 8005d04:	d101      	bne.n	8005d0a <__sflush_r+0xb6>
 8005d06:	602f      	str	r7, [r5, #0]
 8005d08:	e7b1      	b.n	8005c6e <__sflush_r+0x1a>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	e7ad      	b.n	8005c70 <__sflush_r+0x1c>
 8005d14:	690f      	ldr	r7, [r1, #16]
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	d0a9      	beq.n	8005c6e <__sflush_r+0x1a>
 8005d1a:	0793      	lsls	r3, r2, #30
 8005d1c:	680e      	ldr	r6, [r1, #0]
 8005d1e:	bf08      	it	eq
 8005d20:	694b      	ldreq	r3, [r1, #20]
 8005d22:	600f      	str	r7, [r1, #0]
 8005d24:	bf18      	it	ne
 8005d26:	2300      	movne	r3, #0
 8005d28:	eba6 0807 	sub.w	r8, r6, r7
 8005d2c:	608b      	str	r3, [r1, #8]
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	dd9c      	ble.n	8005c6e <__sflush_r+0x1a>
 8005d34:	6a21      	ldr	r1, [r4, #32]
 8005d36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d38:	4643      	mov	r3, r8
 8005d3a:	463a      	mov	r2, r7
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b0      	blx	r6
 8005d40:	2800      	cmp	r0, #0
 8005d42:	dc06      	bgt.n	8005d52 <__sflush_r+0xfe>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	e78e      	b.n	8005c70 <__sflush_r+0x1c>
 8005d52:	4407      	add	r7, r0
 8005d54:	eba8 0800 	sub.w	r8, r8, r0
 8005d58:	e7e9      	b.n	8005d2e <__sflush_r+0xda>
 8005d5a:	bf00      	nop
 8005d5c:	dfbffffe 	.word	0xdfbffffe

08005d60 <_fflush_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	4605      	mov	r5, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	b913      	cbnz	r3, 8005d70 <_fflush_r+0x10>
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	b118      	cbz	r0, 8005d7a <_fflush_r+0x1a>
 8005d72:	6a03      	ldr	r3, [r0, #32]
 8005d74:	b90b      	cbnz	r3, 8005d7a <_fflush_r+0x1a>
 8005d76:	f7ff fa51 	bl	800521c <__sinit>
 8005d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f3      	beq.n	8005d6a <_fflush_r+0xa>
 8005d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d84:	07d0      	lsls	r0, r2, #31
 8005d86:	d404      	bmi.n	8005d92 <_fflush_r+0x32>
 8005d88:	0599      	lsls	r1, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_fflush_r+0x32>
 8005d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d8e:	f7ff fb58 	bl	8005442 <__retarget_lock_acquire_recursive>
 8005d92:	4628      	mov	r0, r5
 8005d94:	4621      	mov	r1, r4
 8005d96:	f7ff ff5d 	bl	8005c54 <__sflush_r>
 8005d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d9c:	07da      	lsls	r2, r3, #31
 8005d9e:	4605      	mov	r5, r0
 8005da0:	d4e4      	bmi.n	8005d6c <_fflush_r+0xc>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	059b      	lsls	r3, r3, #22
 8005da6:	d4e1      	bmi.n	8005d6c <_fflush_r+0xc>
 8005da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005daa:	f7ff fb4b 	bl	8005444 <__retarget_lock_release_recursive>
 8005dae:	e7dd      	b.n	8005d6c <_fflush_r+0xc>

08005db0 <fiprintf>:
 8005db0:	b40e      	push	{r1, r2, r3}
 8005db2:	b503      	push	{r0, r1, lr}
 8005db4:	4601      	mov	r1, r0
 8005db6:	ab03      	add	r3, sp, #12
 8005db8:	4805      	ldr	r0, [pc, #20]	; (8005dd0 <fiprintf+0x20>)
 8005dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dbe:	6800      	ldr	r0, [r0, #0]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	f000 f89f 	bl	8005f04 <_vfiprintf_r>
 8005dc6:	b002      	add	sp, #8
 8005dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dcc:	b003      	add	sp, #12
 8005dce:	4770      	bx	lr
 8005dd0:	20000064 	.word	0x20000064

08005dd4 <memmove>:
 8005dd4:	4288      	cmp	r0, r1
 8005dd6:	b510      	push	{r4, lr}
 8005dd8:	eb01 0402 	add.w	r4, r1, r2
 8005ddc:	d902      	bls.n	8005de4 <memmove+0x10>
 8005dde:	4284      	cmp	r4, r0
 8005de0:	4623      	mov	r3, r4
 8005de2:	d807      	bhi.n	8005df4 <memmove+0x20>
 8005de4:	1e43      	subs	r3, r0, #1
 8005de6:	42a1      	cmp	r1, r4
 8005de8:	d008      	beq.n	8005dfc <memmove+0x28>
 8005dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005df2:	e7f8      	b.n	8005de6 <memmove+0x12>
 8005df4:	4402      	add	r2, r0
 8005df6:	4601      	mov	r1, r0
 8005df8:	428a      	cmp	r2, r1
 8005dfa:	d100      	bne.n	8005dfe <memmove+0x2a>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e06:	e7f7      	b.n	8005df8 <memmove+0x24>

08005e08 <_sbrk_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4d06      	ldr	r5, [pc, #24]	; (8005e24 <_sbrk_r+0x1c>)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	f7fb fbda 	bl	80015cc <_sbrk>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_sbrk_r+0x1a>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_sbrk_r+0x1a>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	200002a0 	.word	0x200002a0

08005e28 <memcpy>:
 8005e28:	440a      	add	r2, r1
 8005e2a:	4291      	cmp	r1, r2
 8005e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e30:	d100      	bne.n	8005e34 <memcpy+0xc>
 8005e32:	4770      	bx	lr
 8005e34:	b510      	push	{r4, lr}
 8005e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e3e:	4291      	cmp	r1, r2
 8005e40:	d1f9      	bne.n	8005e36 <memcpy+0xe>
 8005e42:	bd10      	pop	{r4, pc}

08005e44 <abort>:
 8005e44:	b508      	push	{r3, lr}
 8005e46:	2006      	movs	r0, #6
 8005e48:	f000 fa34 	bl	80062b4 <raise>
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7fb fb45 	bl	80014dc <_exit>

08005e52 <_realloc_r>:
 8005e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	4680      	mov	r8, r0
 8005e58:	4614      	mov	r4, r2
 8005e5a:	460e      	mov	r6, r1
 8005e5c:	b921      	cbnz	r1, 8005e68 <_realloc_r+0x16>
 8005e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	4611      	mov	r1, r2
 8005e64:	f7ff bb82 	b.w	800556c <_malloc_r>
 8005e68:	b92a      	cbnz	r2, 8005e76 <_realloc_r+0x24>
 8005e6a:	f7ff fb0b 	bl	8005484 <_free_r>
 8005e6e:	4625      	mov	r5, r4
 8005e70:	4628      	mov	r0, r5
 8005e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e76:	f000 fa39 	bl	80062ec <_malloc_usable_size_r>
 8005e7a:	4284      	cmp	r4, r0
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	d802      	bhi.n	8005e86 <_realloc_r+0x34>
 8005e80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e84:	d812      	bhi.n	8005eac <_realloc_r+0x5a>
 8005e86:	4621      	mov	r1, r4
 8005e88:	4640      	mov	r0, r8
 8005e8a:	f7ff fb6f 	bl	800556c <_malloc_r>
 8005e8e:	4605      	mov	r5, r0
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d0ed      	beq.n	8005e70 <_realloc_r+0x1e>
 8005e94:	42bc      	cmp	r4, r7
 8005e96:	4622      	mov	r2, r4
 8005e98:	4631      	mov	r1, r6
 8005e9a:	bf28      	it	cs
 8005e9c:	463a      	movcs	r2, r7
 8005e9e:	f7ff ffc3 	bl	8005e28 <memcpy>
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	f7ff faed 	bl	8005484 <_free_r>
 8005eaa:	e7e1      	b.n	8005e70 <_realloc_r+0x1e>
 8005eac:	4635      	mov	r5, r6
 8005eae:	e7df      	b.n	8005e70 <_realloc_r+0x1e>

08005eb0 <__sfputc_r>:
 8005eb0:	6893      	ldr	r3, [r2, #8]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	b410      	push	{r4}
 8005eb8:	6093      	str	r3, [r2, #8]
 8005eba:	da08      	bge.n	8005ece <__sfputc_r+0x1e>
 8005ebc:	6994      	ldr	r4, [r2, #24]
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	db01      	blt.n	8005ec6 <__sfputc_r+0x16>
 8005ec2:	290a      	cmp	r1, #10
 8005ec4:	d103      	bne.n	8005ece <__sfputc_r+0x1e>
 8005ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eca:	f000 b935 	b.w	8006138 <__swbuf_r>
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	1c58      	adds	r0, r3, #1
 8005ed2:	6010      	str	r0, [r2, #0]
 8005ed4:	7019      	strb	r1, [r3, #0]
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <__sfputs_r>:
 8005ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	4614      	mov	r4, r2
 8005ee6:	18d5      	adds	r5, r2, r3
 8005ee8:	42ac      	cmp	r4, r5
 8005eea:	d101      	bne.n	8005ef0 <__sfputs_r+0x12>
 8005eec:	2000      	movs	r0, #0
 8005eee:	e007      	b.n	8005f00 <__sfputs_r+0x22>
 8005ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef4:	463a      	mov	r2, r7
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ffda 	bl	8005eb0 <__sfputc_r>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d1f3      	bne.n	8005ee8 <__sfputs_r+0xa>
 8005f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f04 <_vfiprintf_r>:
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	460d      	mov	r5, r1
 8005f0a:	b09d      	sub	sp, #116	; 0x74
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	4698      	mov	r8, r3
 8005f10:	4606      	mov	r6, r0
 8005f12:	b118      	cbz	r0, 8005f1c <_vfiprintf_r+0x18>
 8005f14:	6a03      	ldr	r3, [r0, #32]
 8005f16:	b90b      	cbnz	r3, 8005f1c <_vfiprintf_r+0x18>
 8005f18:	f7ff f980 	bl	800521c <__sinit>
 8005f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f1e:	07d9      	lsls	r1, r3, #31
 8005f20:	d405      	bmi.n	8005f2e <_vfiprintf_r+0x2a>
 8005f22:	89ab      	ldrh	r3, [r5, #12]
 8005f24:	059a      	lsls	r2, r3, #22
 8005f26:	d402      	bmi.n	8005f2e <_vfiprintf_r+0x2a>
 8005f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f2a:	f7ff fa8a 	bl	8005442 <__retarget_lock_acquire_recursive>
 8005f2e:	89ab      	ldrh	r3, [r5, #12]
 8005f30:	071b      	lsls	r3, r3, #28
 8005f32:	d501      	bpl.n	8005f38 <_vfiprintf_r+0x34>
 8005f34:	692b      	ldr	r3, [r5, #16]
 8005f36:	b99b      	cbnz	r3, 8005f60 <_vfiprintf_r+0x5c>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f000 f93a 	bl	80061b4 <__swsetup_r>
 8005f40:	b170      	cbz	r0, 8005f60 <_vfiprintf_r+0x5c>
 8005f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f44:	07dc      	lsls	r4, r3, #31
 8005f46:	d504      	bpl.n	8005f52 <_vfiprintf_r+0x4e>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b01d      	add	sp, #116	; 0x74
 8005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f52:	89ab      	ldrh	r3, [r5, #12]
 8005f54:	0598      	lsls	r0, r3, #22
 8005f56:	d4f7      	bmi.n	8005f48 <_vfiprintf_r+0x44>
 8005f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f5a:	f7ff fa73 	bl	8005444 <__retarget_lock_release_recursive>
 8005f5e:	e7f3      	b.n	8005f48 <_vfiprintf_r+0x44>
 8005f60:	2300      	movs	r3, #0
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	2320      	movs	r3, #32
 8005f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f6e:	2330      	movs	r3, #48	; 0x30
 8005f70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006124 <_vfiprintf_r+0x220>
 8005f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f78:	f04f 0901 	mov.w	r9, #1
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	469a      	mov	sl, r3
 8005f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f84:	b10a      	cbz	r2, 8005f8a <_vfiprintf_r+0x86>
 8005f86:	2a25      	cmp	r2, #37	; 0x25
 8005f88:	d1f9      	bne.n	8005f7e <_vfiprintf_r+0x7a>
 8005f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f8e:	d00b      	beq.n	8005fa8 <_vfiprintf_r+0xa4>
 8005f90:	465b      	mov	r3, fp
 8005f92:	4622      	mov	r2, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7ff ffa1 	bl	8005ede <__sfputs_r>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	f000 80a9 	beq.w	80060f4 <_vfiprintf_r+0x1f0>
 8005fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa4:	445a      	add	r2, fp
 8005fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8005fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80a1 	beq.w	80060f4 <_vfiprintf_r+0x1f0>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fbc:	f10a 0a01 	add.w	sl, sl, #1
 8005fc0:	9304      	str	r3, [sp, #16]
 8005fc2:	9307      	str	r3, [sp, #28]
 8005fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8005fca:	4654      	mov	r4, sl
 8005fcc:	2205      	movs	r2, #5
 8005fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd2:	4854      	ldr	r0, [pc, #336]	; (8006124 <_vfiprintf_r+0x220>)
 8005fd4:	f7fa f904 	bl	80001e0 <memchr>
 8005fd8:	9a04      	ldr	r2, [sp, #16]
 8005fda:	b9d8      	cbnz	r0, 8006014 <_vfiprintf_r+0x110>
 8005fdc:	06d1      	lsls	r1, r2, #27
 8005fde:	bf44      	itt	mi
 8005fe0:	2320      	movmi	r3, #32
 8005fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fe6:	0713      	lsls	r3, r2, #28
 8005fe8:	bf44      	itt	mi
 8005fea:	232b      	movmi	r3, #43	; 0x2b
 8005fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff6:	d015      	beq.n	8006024 <_vfiprintf_r+0x120>
 8005ff8:	9a07      	ldr	r2, [sp, #28]
 8005ffa:	4654      	mov	r4, sl
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f04f 0c0a 	mov.w	ip, #10
 8006002:	4621      	mov	r1, r4
 8006004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006008:	3b30      	subs	r3, #48	; 0x30
 800600a:	2b09      	cmp	r3, #9
 800600c:	d94d      	bls.n	80060aa <_vfiprintf_r+0x1a6>
 800600e:	b1b0      	cbz	r0, 800603e <_vfiprintf_r+0x13a>
 8006010:	9207      	str	r2, [sp, #28]
 8006012:	e014      	b.n	800603e <_vfiprintf_r+0x13a>
 8006014:	eba0 0308 	sub.w	r3, r0, r8
 8006018:	fa09 f303 	lsl.w	r3, r9, r3
 800601c:	4313      	orrs	r3, r2
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	46a2      	mov	sl, r4
 8006022:	e7d2      	b.n	8005fca <_vfiprintf_r+0xc6>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	1d19      	adds	r1, r3, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	9103      	str	r1, [sp, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	bfbb      	ittet	lt
 8006030:	425b      	neglt	r3, r3
 8006032:	f042 0202 	orrlt.w	r2, r2, #2
 8006036:	9307      	strge	r3, [sp, #28]
 8006038:	9307      	strlt	r3, [sp, #28]
 800603a:	bfb8      	it	lt
 800603c:	9204      	strlt	r2, [sp, #16]
 800603e:	7823      	ldrb	r3, [r4, #0]
 8006040:	2b2e      	cmp	r3, #46	; 0x2e
 8006042:	d10c      	bne.n	800605e <_vfiprintf_r+0x15a>
 8006044:	7863      	ldrb	r3, [r4, #1]
 8006046:	2b2a      	cmp	r3, #42	; 0x2a
 8006048:	d134      	bne.n	80060b4 <_vfiprintf_r+0x1b0>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	1d1a      	adds	r2, r3, #4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	9203      	str	r2, [sp, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	bfb8      	it	lt
 8006056:	f04f 33ff 	movlt.w	r3, #4294967295
 800605a:	3402      	adds	r4, #2
 800605c:	9305      	str	r3, [sp, #20]
 800605e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006134 <_vfiprintf_r+0x230>
 8006062:	7821      	ldrb	r1, [r4, #0]
 8006064:	2203      	movs	r2, #3
 8006066:	4650      	mov	r0, sl
 8006068:	f7fa f8ba 	bl	80001e0 <memchr>
 800606c:	b138      	cbz	r0, 800607e <_vfiprintf_r+0x17a>
 800606e:	9b04      	ldr	r3, [sp, #16]
 8006070:	eba0 000a 	sub.w	r0, r0, sl
 8006074:	2240      	movs	r2, #64	; 0x40
 8006076:	4082      	lsls	r2, r0
 8006078:	4313      	orrs	r3, r2
 800607a:	3401      	adds	r4, #1
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006082:	4829      	ldr	r0, [pc, #164]	; (8006128 <_vfiprintf_r+0x224>)
 8006084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006088:	2206      	movs	r2, #6
 800608a:	f7fa f8a9 	bl	80001e0 <memchr>
 800608e:	2800      	cmp	r0, #0
 8006090:	d03f      	beq.n	8006112 <_vfiprintf_r+0x20e>
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <_vfiprintf_r+0x228>)
 8006094:	bb1b      	cbnz	r3, 80060de <_vfiprintf_r+0x1da>
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	3307      	adds	r3, #7
 800609a:	f023 0307 	bic.w	r3, r3, #7
 800609e:	3308      	adds	r3, #8
 80060a0:	9303      	str	r3, [sp, #12]
 80060a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a4:	443b      	add	r3, r7
 80060a6:	9309      	str	r3, [sp, #36]	; 0x24
 80060a8:	e768      	b.n	8005f7c <_vfiprintf_r+0x78>
 80060aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80060ae:	460c      	mov	r4, r1
 80060b0:	2001      	movs	r0, #1
 80060b2:	e7a6      	b.n	8006002 <_vfiprintf_r+0xfe>
 80060b4:	2300      	movs	r3, #0
 80060b6:	3401      	adds	r4, #1
 80060b8:	9305      	str	r3, [sp, #20]
 80060ba:	4619      	mov	r1, r3
 80060bc:	f04f 0c0a 	mov.w	ip, #10
 80060c0:	4620      	mov	r0, r4
 80060c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060c6:	3a30      	subs	r2, #48	; 0x30
 80060c8:	2a09      	cmp	r2, #9
 80060ca:	d903      	bls.n	80060d4 <_vfiprintf_r+0x1d0>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0c6      	beq.n	800605e <_vfiprintf_r+0x15a>
 80060d0:	9105      	str	r1, [sp, #20]
 80060d2:	e7c4      	b.n	800605e <_vfiprintf_r+0x15a>
 80060d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060d8:	4604      	mov	r4, r0
 80060da:	2301      	movs	r3, #1
 80060dc:	e7f0      	b.n	80060c0 <_vfiprintf_r+0x1bc>
 80060de:	ab03      	add	r3, sp, #12
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	462a      	mov	r2, r5
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <_vfiprintf_r+0x22c>)
 80060e6:	a904      	add	r1, sp, #16
 80060e8:	4630      	mov	r0, r6
 80060ea:	f3af 8000 	nop.w
 80060ee:	4607      	mov	r7, r0
 80060f0:	1c78      	adds	r0, r7, #1
 80060f2:	d1d6      	bne.n	80060a2 <_vfiprintf_r+0x19e>
 80060f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060f6:	07d9      	lsls	r1, r3, #31
 80060f8:	d405      	bmi.n	8006106 <_vfiprintf_r+0x202>
 80060fa:	89ab      	ldrh	r3, [r5, #12]
 80060fc:	059a      	lsls	r2, r3, #22
 80060fe:	d402      	bmi.n	8006106 <_vfiprintf_r+0x202>
 8006100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006102:	f7ff f99f 	bl	8005444 <__retarget_lock_release_recursive>
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	065b      	lsls	r3, r3, #25
 800610a:	f53f af1d 	bmi.w	8005f48 <_vfiprintf_r+0x44>
 800610e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006110:	e71c      	b.n	8005f4c <_vfiprintf_r+0x48>
 8006112:	ab03      	add	r3, sp, #12
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	462a      	mov	r2, r5
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <_vfiprintf_r+0x22c>)
 800611a:	a904      	add	r1, sp, #16
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff fc77 	bl	8005a10 <_printf_i>
 8006122:	e7e4      	b.n	80060ee <_vfiprintf_r+0x1ea>
 8006124:	080065ab 	.word	0x080065ab
 8006128:	080065b5 	.word	0x080065b5
 800612c:	00000000 	.word	0x00000000
 8006130:	08005edf 	.word	0x08005edf
 8006134:	080065b1 	.word	0x080065b1

08006138 <__swbuf_r>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	460e      	mov	r6, r1
 800613c:	4614      	mov	r4, r2
 800613e:	4605      	mov	r5, r0
 8006140:	b118      	cbz	r0, 800614a <__swbuf_r+0x12>
 8006142:	6a03      	ldr	r3, [r0, #32]
 8006144:	b90b      	cbnz	r3, 800614a <__swbuf_r+0x12>
 8006146:	f7ff f869 	bl	800521c <__sinit>
 800614a:	69a3      	ldr	r3, [r4, #24]
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	071a      	lsls	r2, r3, #28
 8006152:	d525      	bpl.n	80061a0 <__swbuf_r+0x68>
 8006154:	6923      	ldr	r3, [r4, #16]
 8006156:	b31b      	cbz	r3, 80061a0 <__swbuf_r+0x68>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	6922      	ldr	r2, [r4, #16]
 800615c:	1a98      	subs	r0, r3, r2
 800615e:	6963      	ldr	r3, [r4, #20]
 8006160:	b2f6      	uxtb	r6, r6
 8006162:	4283      	cmp	r3, r0
 8006164:	4637      	mov	r7, r6
 8006166:	dc04      	bgt.n	8006172 <__swbuf_r+0x3a>
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f7ff fdf8 	bl	8005d60 <_fflush_r>
 8006170:	b9e0      	cbnz	r0, 80061ac <__swbuf_r+0x74>
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	3b01      	subs	r3, #1
 8006176:	60a3      	str	r3, [r4, #8]
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	6022      	str	r2, [r4, #0]
 800617e:	701e      	strb	r6, [r3, #0]
 8006180:	6962      	ldr	r2, [r4, #20]
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	429a      	cmp	r2, r3
 8006186:	d004      	beq.n	8006192 <__swbuf_r+0x5a>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	07db      	lsls	r3, r3, #31
 800618c:	d506      	bpl.n	800619c <__swbuf_r+0x64>
 800618e:	2e0a      	cmp	r6, #10
 8006190:	d104      	bne.n	800619c <__swbuf_r+0x64>
 8006192:	4621      	mov	r1, r4
 8006194:	4628      	mov	r0, r5
 8006196:	f7ff fde3 	bl	8005d60 <_fflush_r>
 800619a:	b938      	cbnz	r0, 80061ac <__swbuf_r+0x74>
 800619c:	4638      	mov	r0, r7
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	4621      	mov	r1, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 f806 	bl	80061b4 <__swsetup_r>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d0d5      	beq.n	8006158 <__swbuf_r+0x20>
 80061ac:	f04f 37ff 	mov.w	r7, #4294967295
 80061b0:	e7f4      	b.n	800619c <__swbuf_r+0x64>
	...

080061b4 <__swsetup_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4b2a      	ldr	r3, [pc, #168]	; (8006260 <__swsetup_r+0xac>)
 80061b8:	4605      	mov	r5, r0
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	460c      	mov	r4, r1
 80061be:	b118      	cbz	r0, 80061c8 <__swsetup_r+0x14>
 80061c0:	6a03      	ldr	r3, [r0, #32]
 80061c2:	b90b      	cbnz	r3, 80061c8 <__swsetup_r+0x14>
 80061c4:	f7ff f82a 	bl	800521c <__sinit>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061ce:	0718      	lsls	r0, r3, #28
 80061d0:	d422      	bmi.n	8006218 <__swsetup_r+0x64>
 80061d2:	06d9      	lsls	r1, r3, #27
 80061d4:	d407      	bmi.n	80061e6 <__swsetup_r+0x32>
 80061d6:	2309      	movs	r3, #9
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295
 80061e4:	e034      	b.n	8006250 <__swsetup_r+0x9c>
 80061e6:	0758      	lsls	r0, r3, #29
 80061e8:	d512      	bpl.n	8006210 <__swsetup_r+0x5c>
 80061ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ec:	b141      	cbz	r1, 8006200 <__swsetup_r+0x4c>
 80061ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061f2:	4299      	cmp	r1, r3
 80061f4:	d002      	beq.n	80061fc <__swsetup_r+0x48>
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7ff f944 	bl	8005484 <_free_r>
 80061fc:	2300      	movs	r3, #0
 80061fe:	6363      	str	r3, [r4, #52]	; 0x34
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	2300      	movs	r3, #0
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	6923      	ldr	r3, [r4, #16]
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	f043 0308 	orr.w	r3, r3, #8
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	b94b      	cbnz	r3, 8006230 <__swsetup_r+0x7c>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006226:	d003      	beq.n	8006230 <__swsetup_r+0x7c>
 8006228:	4621      	mov	r1, r4
 800622a:	4628      	mov	r0, r5
 800622c:	f000 f88c 	bl	8006348 <__smakebuf_r>
 8006230:	89a0      	ldrh	r0, [r4, #12]
 8006232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006236:	f010 0301 	ands.w	r3, r0, #1
 800623a:	d00a      	beq.n	8006252 <__swsetup_r+0x9e>
 800623c:	2300      	movs	r3, #0
 800623e:	60a3      	str	r3, [r4, #8]
 8006240:	6963      	ldr	r3, [r4, #20]
 8006242:	425b      	negs	r3, r3
 8006244:	61a3      	str	r3, [r4, #24]
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	b943      	cbnz	r3, 800625c <__swsetup_r+0xa8>
 800624a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800624e:	d1c4      	bne.n	80061da <__swsetup_r+0x26>
 8006250:	bd38      	pop	{r3, r4, r5, pc}
 8006252:	0781      	lsls	r1, r0, #30
 8006254:	bf58      	it	pl
 8006256:	6963      	ldrpl	r3, [r4, #20]
 8006258:	60a3      	str	r3, [r4, #8]
 800625a:	e7f4      	b.n	8006246 <__swsetup_r+0x92>
 800625c:	2000      	movs	r0, #0
 800625e:	e7f7      	b.n	8006250 <__swsetup_r+0x9c>
 8006260:	20000064 	.word	0x20000064

08006264 <_raise_r>:
 8006264:	291f      	cmp	r1, #31
 8006266:	b538      	push	{r3, r4, r5, lr}
 8006268:	4604      	mov	r4, r0
 800626a:	460d      	mov	r5, r1
 800626c:	d904      	bls.n	8006278 <_raise_r+0x14>
 800626e:	2316      	movs	r3, #22
 8006270:	6003      	str	r3, [r0, #0]
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800627a:	b112      	cbz	r2, 8006282 <_raise_r+0x1e>
 800627c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006280:	b94b      	cbnz	r3, 8006296 <_raise_r+0x32>
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f830 	bl	80062e8 <_getpid_r>
 8006288:	462a      	mov	r2, r5
 800628a:	4601      	mov	r1, r0
 800628c:	4620      	mov	r0, r4
 800628e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006292:	f000 b817 	b.w	80062c4 <_kill_r>
 8006296:	2b01      	cmp	r3, #1
 8006298:	d00a      	beq.n	80062b0 <_raise_r+0x4c>
 800629a:	1c59      	adds	r1, r3, #1
 800629c:	d103      	bne.n	80062a6 <_raise_r+0x42>
 800629e:	2316      	movs	r3, #22
 80062a0:	6003      	str	r3, [r0, #0]
 80062a2:	2001      	movs	r0, #1
 80062a4:	e7e7      	b.n	8006276 <_raise_r+0x12>
 80062a6:	2400      	movs	r4, #0
 80062a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062ac:	4628      	mov	r0, r5
 80062ae:	4798      	blx	r3
 80062b0:	2000      	movs	r0, #0
 80062b2:	e7e0      	b.n	8006276 <_raise_r+0x12>

080062b4 <raise>:
 80062b4:	4b02      	ldr	r3, [pc, #8]	; (80062c0 <raise+0xc>)
 80062b6:	4601      	mov	r1, r0
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	f7ff bfd3 	b.w	8006264 <_raise_r>
 80062be:	bf00      	nop
 80062c0:	20000064 	.word	0x20000064

080062c4 <_kill_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d07      	ldr	r5, [pc, #28]	; (80062e4 <_kill_r+0x20>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	f7fb f8f3 	bl	80014bc <_kill>
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	d102      	bne.n	80062e0 <_kill_r+0x1c>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	b103      	cbz	r3, 80062e0 <_kill_r+0x1c>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	bf00      	nop
 80062e4:	200002a0 	.word	0x200002a0

080062e8 <_getpid_r>:
 80062e8:	f7fb b8e0 	b.w	80014ac <_getpid>

080062ec <_malloc_usable_size_r>:
 80062ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f0:	1f18      	subs	r0, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bfbc      	itt	lt
 80062f6:	580b      	ldrlt	r3, [r1, r0]
 80062f8:	18c0      	addlt	r0, r0, r3
 80062fa:	4770      	bx	lr

080062fc <__swhatbuf_r>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	460c      	mov	r4, r1
 8006300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006304:	2900      	cmp	r1, #0
 8006306:	b096      	sub	sp, #88	; 0x58
 8006308:	4615      	mov	r5, r2
 800630a:	461e      	mov	r6, r3
 800630c:	da0d      	bge.n	800632a <__swhatbuf_r+0x2e>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006314:	f04f 0100 	mov.w	r1, #0
 8006318:	bf0c      	ite	eq
 800631a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800631e:	2340      	movne	r3, #64	; 0x40
 8006320:	2000      	movs	r0, #0
 8006322:	6031      	str	r1, [r6, #0]
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	b016      	add	sp, #88	; 0x58
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	466a      	mov	r2, sp
 800632c:	f000 f848 	bl	80063c0 <_fstat_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	dbec      	blt.n	800630e <__swhatbuf_r+0x12>
 8006334:	9901      	ldr	r1, [sp, #4]
 8006336:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800633a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800633e:	4259      	negs	r1, r3
 8006340:	4159      	adcs	r1, r3
 8006342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006346:	e7eb      	b.n	8006320 <__swhatbuf_r+0x24>

08006348 <__smakebuf_r>:
 8006348:	898b      	ldrh	r3, [r1, #12]
 800634a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800634c:	079d      	lsls	r5, r3, #30
 800634e:	4606      	mov	r6, r0
 8006350:	460c      	mov	r4, r1
 8006352:	d507      	bpl.n	8006364 <__smakebuf_r+0x1c>
 8006354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	2301      	movs	r3, #1
 800635e:	6163      	str	r3, [r4, #20]
 8006360:	b002      	add	sp, #8
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	ab01      	add	r3, sp, #4
 8006366:	466a      	mov	r2, sp
 8006368:	f7ff ffc8 	bl	80062fc <__swhatbuf_r>
 800636c:	9900      	ldr	r1, [sp, #0]
 800636e:	4605      	mov	r5, r0
 8006370:	4630      	mov	r0, r6
 8006372:	f7ff f8fb 	bl	800556c <_malloc_r>
 8006376:	b948      	cbnz	r0, 800638c <__smakebuf_r+0x44>
 8006378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637c:	059a      	lsls	r2, r3, #22
 800637e:	d4ef      	bmi.n	8006360 <__smakebuf_r+0x18>
 8006380:	f023 0303 	bic.w	r3, r3, #3
 8006384:	f043 0302 	orr.w	r3, r3, #2
 8006388:	81a3      	strh	r3, [r4, #12]
 800638a:	e7e3      	b.n	8006354 <__smakebuf_r+0xc>
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	6020      	str	r0, [r4, #0]
 8006390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	9b00      	ldr	r3, [sp, #0]
 8006398:	6163      	str	r3, [r4, #20]
 800639a:	9b01      	ldr	r3, [sp, #4]
 800639c:	6120      	str	r0, [r4, #16]
 800639e:	b15b      	cbz	r3, 80063b8 <__smakebuf_r+0x70>
 80063a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f81d 	bl	80063e4 <_isatty_r>
 80063aa:	b128      	cbz	r0, 80063b8 <__smakebuf_r+0x70>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	431d      	orrs	r5, r3
 80063bc:	81a5      	strh	r5, [r4, #12]
 80063be:	e7cf      	b.n	8006360 <__smakebuf_r+0x18>

080063c0 <_fstat_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	; (80063e0 <_fstat_r+0x20>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	f7fb f8d4 	bl	800157a <_fstat>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d102      	bne.n	80063dc <_fstat_r+0x1c>
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	b103      	cbz	r3, 80063dc <_fstat_r+0x1c>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd38      	pop	{r3, r4, r5, pc}
 80063de:	bf00      	nop
 80063e0:	200002a0 	.word	0x200002a0

080063e4 <_isatty_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	; (8006400 <_isatty_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fb f8d3 	bl	800159a <_isatty>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_isatty_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_isatty_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	200002a0 	.word	0x200002a0

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
