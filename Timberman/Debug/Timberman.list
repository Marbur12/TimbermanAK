
Timberman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004078  08004078  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004078  08004078  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004078  08004078  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  0800408c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800408c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b260  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7c  00000000  00000000  0002b2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000870  00000000  00000000  0002dc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273db  00000000  00000000  0002e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4b0  00000000  00000000  000558e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6269  00000000  00000000  00061d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d14  00000000  00000000  00157ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f7c 	.word	0x08003f7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f7c 	.word	0x08003f7c

080001c8 <KPAD_init>:

int KPAD_lastkey;
ADC_HandleTypeDef *KPAD_hadc;

void KPAD_init(ADC_HandleTypeDef *hadc)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	KPAD_lastkey = KPAD_KEYNONE;
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <KPAD_init+0x20>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
	KPAD_hadc = hadc;
 80001d6:	4a05      	ldr	r2, [pc, #20]	; (80001ec <KPAD_init+0x24>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6013      	str	r3, [r2, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	20000028 	.word	0x20000028
 80001ec:	2000002c 	.word	0x2000002c

080001f0 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 80001f8:	e002      	b.n	8000200 <Delay+0x10>
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	3b01      	subs	r3, #1
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f9      	bne.n	80001fa <Delay+0xa>
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <lcd_delay>:
void lcd_delay(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	Delay(200);
 8000218:	20c8      	movs	r0, #200	; 0xc8
 800021a:	f7ff ffe9 	bl	80001f0 <Delay>
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 800022e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000236:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000238:	4b5e      	ldr	r3, [pc, #376]	; (80003b4 <lcd_cmd+0x190>)
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 800023e:	4b5e      	ldr	r3, [pc, #376]	; (80003b8 <lcd_cmd+0x194>)
 8000240:	2220      	movs	r2, #32
 8000242:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000244:	4b5c      	ldr	r3, [pc, #368]	; (80003b8 <lcd_cmd+0x194>)
 8000246:	2210      	movs	r2, #16
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 800024a:	4b5b      	ldr	r3, [pc, #364]	; (80003b8 <lcd_cmd+0x194>)
 800024c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000250:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000252:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800025a:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800025c:	f7ff ffda 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000260:	4b54      	ldr	r3, [pc, #336]	; (80003b4 <lcd_cmd+0x190>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a53      	ldr	r2, [pc, #332]	; (80003b4 <lcd_cmd+0x190>)
 8000266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800026a:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	f003 0310 	and.w	r3, r3, #16
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <lcd_cmd+0x5a>
 8000276:	4b50      	ldr	r3, [pc, #320]	; (80003b8 <lcd_cmd+0x194>)
 8000278:	2220      	movs	r2, #32
 800027a:	619a      	str	r2, [r3, #24]
 800027c:	e003      	b.n	8000286 <lcd_cmd+0x62>
 800027e:	4b4e      	ldr	r3, [pc, #312]	; (80003b8 <lcd_cmd+0x194>)
 8000280:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000284:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 0320 	and.w	r3, r3, #32
 800028c:	2b00      	cmp	r3, #0
 800028e:	d003      	beq.n	8000298 <lcd_cmd+0x74>
 8000290:	4b49      	ldr	r3, [pc, #292]	; (80003b8 <lcd_cmd+0x194>)
 8000292:	2210      	movs	r2, #16
 8000294:	619a      	str	r2, [r3, #24]
 8000296:	e003      	b.n	80002a0 <lcd_cmd+0x7c>
 8000298:	4b47      	ldr	r3, [pc, #284]	; (80003b8 <lcd_cmd+0x194>)
 800029a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800029e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d004      	beq.n	80002b4 <lcd_cmd+0x90>
 80002aa:	4b43      	ldr	r3, [pc, #268]	; (80003b8 <lcd_cmd+0x194>)
 80002ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002b0:	619a      	str	r2, [r3, #24]
 80002b2:	e003      	b.n	80002bc <lcd_cmd+0x98>
 80002b4:	4b40      	ldr	r3, [pc, #256]	; (80003b8 <lcd_cmd+0x194>)
 80002b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80002ba:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	da05      	bge.n	80002d0 <lcd_cmd+0xac>
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002cc:	619a      	str	r2, [r3, #24]
 80002ce:	e004      	b.n	80002da <lcd_cmd+0xb6>
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002d8:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80002da:	f7ff ff9b 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80002de:	4b35      	ldr	r3, [pc, #212]	; (80003b4 <lcd_cmd+0x190>)
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80002e4:	4b34      	ldr	r3, [pc, #208]	; (80003b8 <lcd_cmd+0x194>)
 80002e6:	2220      	movs	r2, #32
 80002e8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80002ea:	4b33      	ldr	r3, [pc, #204]	; (80003b8 <lcd_cmd+0x194>)
 80002ec:	2210      	movs	r2, #16
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80002f0:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <lcd_cmd+0x194>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000300:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000302:	f7ff ff87 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000306:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <lcd_cmd+0x190>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2a      	ldr	r2, [pc, #168]	; (80003b4 <lcd_cmd+0x190>)
 800030c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000310:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d003      	beq.n	8000324 <lcd_cmd+0x100>
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <lcd_cmd+0x194>)
 800031e:	2220      	movs	r2, #32
 8000320:	619a      	str	r2, [r3, #24]
 8000322:	e003      	b.n	800032c <lcd_cmd+0x108>
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <lcd_cmd+0x194>)
 8000326:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800032a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b00      	cmp	r3, #0
 8000334:	d003      	beq.n	800033e <lcd_cmd+0x11a>
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <lcd_cmd+0x194>)
 8000338:	2210      	movs	r2, #16
 800033a:	619a      	str	r2, [r3, #24]
 800033c:	e003      	b.n	8000346 <lcd_cmd+0x122>
 800033e:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <lcd_cmd+0x194>)
 8000340:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000344:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	2b00      	cmp	r3, #0
 800034e:	d004      	beq.n	800035a <lcd_cmd+0x136>
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <lcd_cmd+0x194>)
 8000352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000356:	619a      	str	r2, [r3, #24]
 8000358:	e003      	b.n	8000362 <lcd_cmd+0x13e>
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <lcd_cmd+0x194>)
 800035c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000360:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f003 0308 	and.w	r3, r3, #8
 8000368:	2b00      	cmp	r3, #0
 800036a:	d005      	beq.n	8000378 <lcd_cmd+0x154>
 800036c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000374:	619a      	str	r2, [r3, #24]
 8000376:	e004      	b.n	8000382 <lcd_cmd+0x15e>
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000380:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000382:	f7ff ff47 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <lcd_cmd+0x190>)
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <lcd_cmd+0x194>)
 800038e:	2220      	movs	r2, #32
 8000390:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <lcd_cmd+0x194>)
 8000394:	2210      	movs	r2, #16
 8000396:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <lcd_cmd+0x194>)
 800039a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	48000800 	.word	0x48000800
 80003b8:	48000400 	.word	0x48000400

080003bc <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80003c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003d4:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80003d6:	4b5e      	ldr	r3, [pc, #376]	; (8000550 <lcd_char_cp+0x194>)
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80003dc:	4b5d      	ldr	r3, [pc, #372]	; (8000554 <lcd_char_cp+0x198>)
 80003de:	2220      	movs	r2, #32
 80003e0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80003e2:	4b5c      	ldr	r3, [pc, #368]	; (8000554 <lcd_char_cp+0x198>)
 80003e4:	2210      	movs	r2, #16
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80003e8:	4b5a      	ldr	r3, [pc, #360]	; (8000554 <lcd_char_cp+0x198>)
 80003ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ee:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80003f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80003fa:	f7ff ff0b 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003fe:	4b54      	ldr	r3, [pc, #336]	; (8000550 <lcd_char_cp+0x194>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a53      	ldr	r2, [pc, #332]	; (8000550 <lcd_char_cp+0x194>)
 8000404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000408:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	2b00      	cmp	r3, #0
 8000412:	d003      	beq.n	800041c <lcd_char_cp+0x60>
 8000414:	4b4f      	ldr	r3, [pc, #316]	; (8000554 <lcd_char_cp+0x198>)
 8000416:	2220      	movs	r2, #32
 8000418:	619a      	str	r2, [r3, #24]
 800041a:	e003      	b.n	8000424 <lcd_char_cp+0x68>
 800041c:	4b4d      	ldr	r3, [pc, #308]	; (8000554 <lcd_char_cp+0x198>)
 800041e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000422:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	f003 0320 	and.w	r3, r3, #32
 800042a:	2b00      	cmp	r3, #0
 800042c:	d003      	beq.n	8000436 <lcd_char_cp+0x7a>
 800042e:	4b49      	ldr	r3, [pc, #292]	; (8000554 <lcd_char_cp+0x198>)
 8000430:	2210      	movs	r2, #16
 8000432:	619a      	str	r2, [r3, #24]
 8000434:	e003      	b.n	800043e <lcd_char_cp+0x82>
 8000436:	4b47      	ldr	r3, [pc, #284]	; (8000554 <lcd_char_cp+0x198>)
 8000438:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800043c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000444:	2b00      	cmp	r3, #0
 8000446:	d004      	beq.n	8000452 <lcd_char_cp+0x96>
 8000448:	4b42      	ldr	r3, [pc, #264]	; (8000554 <lcd_char_cp+0x198>)
 800044a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044e:	619a      	str	r2, [r3, #24]
 8000450:	e003      	b.n	800045a <lcd_char_cp+0x9e>
 8000452:	4b40      	ldr	r3, [pc, #256]	; (8000554 <lcd_char_cp+0x198>)
 8000454:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000458:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800045a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045e:	2b00      	cmp	r3, #0
 8000460:	da05      	bge.n	800046e <lcd_char_cp+0xb2>
 8000462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800046a:	619a      	str	r2, [r3, #24]
 800046c:	e004      	b.n	8000478 <lcd_char_cp+0xbc>
 800046e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000476:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000478:	f7ff fecc 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800047c:	4b34      	ldr	r3, [pc, #208]	; (8000550 <lcd_char_cp+0x194>)
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000482:	4b34      	ldr	r3, [pc, #208]	; (8000554 <lcd_char_cp+0x198>)
 8000484:	2220      	movs	r2, #32
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000488:	4b32      	ldr	r3, [pc, #200]	; (8000554 <lcd_char_cp+0x198>)
 800048a:	2210      	movs	r2, #16
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800048e:	4b31      	ldr	r3, [pc, #196]	; (8000554 <lcd_char_cp+0x198>)
 8000490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000494:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800049e:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80004a0:	f7ff feb8 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80004a4:	4b2a      	ldr	r3, [pc, #168]	; (8000550 <lcd_char_cp+0x194>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	4a29      	ldr	r2, [pc, #164]	; (8000550 <lcd_char_cp+0x194>)
 80004aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ae:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d003      	beq.n	80004c2 <lcd_char_cp+0x106>
 80004ba:	4b26      	ldr	r3, [pc, #152]	; (8000554 <lcd_char_cp+0x198>)
 80004bc:	2220      	movs	r2, #32
 80004be:	619a      	str	r2, [r3, #24]
 80004c0:	e003      	b.n	80004ca <lcd_char_cp+0x10e>
 80004c2:	4b24      	ldr	r3, [pc, #144]	; (8000554 <lcd_char_cp+0x198>)
 80004c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004c8:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 0302 	and.w	r3, r3, #2
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d003      	beq.n	80004dc <lcd_char_cp+0x120>
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <lcd_char_cp+0x198>)
 80004d6:	2210      	movs	r2, #16
 80004d8:	619a      	str	r2, [r3, #24]
 80004da:	e003      	b.n	80004e4 <lcd_char_cp+0x128>
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <lcd_char_cp+0x198>)
 80004de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004e2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d004      	beq.n	80004f8 <lcd_char_cp+0x13c>
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <lcd_char_cp+0x198>)
 80004f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f4:	619a      	str	r2, [r3, #24]
 80004f6:	e003      	b.n	8000500 <lcd_char_cp+0x144>
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <lcd_char_cp+0x198>)
 80004fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80004fe:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	2b00      	cmp	r3, #0
 8000508:	d005      	beq.n	8000516 <lcd_char_cp+0x15a>
 800050a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000512:	619a      	str	r2, [r3, #24]
 8000514:	e004      	b.n	8000520 <lcd_char_cp+0x164>
 8000516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800051e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000520:	f7ff fe78 	bl	8000214 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <lcd_char_cp+0x194>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <lcd_char_cp+0x198>)
 800052c:	2220      	movs	r2, #32
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <lcd_char_cp+0x198>)
 8000532:	2210      	movs	r2, #16
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <lcd_char_cp+0x198>)
 8000538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800053e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	48000800 	.word	0x48000800
 8000554:	48000400 	.word	0x48000400

08000558 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000560:	e008      	b.n	8000574 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ff26 	bl	80003bc <lcd_char_cp>
        lcd_delay();
 8000570:	f7ff fe50 	bl	8000214 <lcd_delay>
	while(*out_char)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d1f2      	bne.n	8000562 <lcd_out_cp+0xa>
	}

}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	4603      	mov	r3, r0
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	460b      	mov	r3, r1
 8000592:	71bb      	strb	r3, [r7, #6]
 8000594:	4613      	mov	r3, r2
 8000596:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000598:	20fa      	movs	r0, #250	; 0xfa
 800059a:	f000 fc9d 	bl	8000ed8 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff fe40 	bl	8000224 <lcd_cmd>
    HAL_Delay(50);
 80005a4:	2032      	movs	r0, #50	; 0x32
 80005a6:	f000 fc97 	bl	8000ed8 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	797b      	ldrb	r3, [r7, #5]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f043 0320 	orr.w	r3, r3, #32
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe30 	bl	8000224 <lcd_cmd>
    HAL_Delay(50);
 80005c4:	2032      	movs	r0, #50	; 0x32
 80005c6:	f000 fc87 	bl	8000ed8 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80005ca:	2006      	movs	r0, #6
 80005cc:	f7ff fe2a 	bl	8000224 <lcd_cmd>
    HAL_Delay(50);
 80005d0:	2032      	movs	r0, #50	; 0x32
 80005d2:	f000 fc81 	bl	8000ed8 <HAL_Delay>
    lcd_cmd(0x0E);
 80005d6:	200e      	movs	r0, #14
 80005d8:	f7ff fe24 	bl	8000224 <lcd_cmd>
    HAL_Delay(50);
 80005dc:	2032      	movs	r0, #50	; 0x32
 80005de:	f000 fc7b 	bl	8000ed8 <HAL_Delay>
    lcd_cmd(0x0C);
 80005e2:	200c      	movs	r0, #12
 80005e4:	f7ff fe1e 	bl	8000224 <lcd_cmd>
    HAL_Delay(50);
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f000 fc75 	bl	8000ed8 <HAL_Delay>
    lcd_cmd(0x01);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff fe18 	bl	8000224 <lcd_cmd>
    HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f000 fc6f 	bl	8000ed8 <HAL_Delay>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	460a      	mov	r2, r1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4613      	mov	r3, r2
 8000610:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d106      	bne.n	8000626 <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	337f      	adds	r3, #127	; 0x7f
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fe00 	bl	8000224 <lcd_cmd>
 8000624:	e008      	b.n	8000638 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d105      	bne.n	8000638 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	3b41      	subs	r3, #65	; 0x41
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdf6 	bl	8000224 <lcd_cmd>
	}
    HAL_Delay(5);
 8000638:	2005      	movs	r0, #5
 800063a:	f000 fc4d 	bl	8000ed8 <HAL_Delay>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	603a      	str	r2, [r7, #0]
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	460b      	mov	r3, r1
 8000654:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffd0 	bl	8000602 <lcd_gotoxy>
	lcd_out_cp(out_char);
 8000662:	6838      	ldr	r0, [r7, #0]
 8000664:	f7ff ff78 	bl	8000558 <lcd_out_cp>
    HAL_Delay(5);
 8000668:	2005      	movs	r0, #5
 800066a:	f000 fc35 	bl	8000ed8 <HAL_Delay>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <lcd_clear>:
void lcd_clear(void) {
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff fdd2 	bl	8000224 <lcd_cmd>
    HAL_Delay(5);
 8000680:	2005      	movs	r0, #5
 8000682:	f000 fc29 	bl	8000ed8 <HAL_Delay>

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	; 0x70
 8000690:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// ----------------------------------------------------- Custom characters variables ----------------------------------------------------
	char rightManHit[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x04, 0x1F, 0x1F };
 8000692:	4aa3      	ldr	r2, [pc, #652]	; (8000920 <main+0x294>)
 8000694:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069c:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftManHit[] = { 0x1F, 0x1F, 0x04, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 80006a0:	4aa0      	ldr	r2, [pc, #640]	; (8000924 <main+0x298>)
 80006a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	e883 0003 	stmia.w	r3, {r0, r1}

	char rightMan[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x00, 0x1F, 0x1F };
 80006ae:	4a9e      	ldr	r2, [pc, #632]	; (8000928 <main+0x29c>)
 80006b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b8:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftMan[] = { 0x1F, 0x1F, 0x00, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 80006bc:	4a9b      	ldr	r2, [pc, #620]	; (800092c <main+0x2a0>)
 80006be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c6:	e883 0003 	stmia.w	r3, {r0, r1}

	char branchRight[] = { 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x1F, 0x1F };
 80006ca:	4a99      	ldr	r2, [pc, #612]	; (8000930 <main+0x2a4>)
 80006cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	e883 0003 	stmia.w	r3, {r0, r1}
	char branchLeft[] = { 0x1F, 0x1F, 0x03, 0x02, 0x02, 0x02, 0x02, 0x00 };
 80006d8:	4a96      	ldr	r2, [pc, #600]	; (8000934 <main+0x2a8>)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e2:	e883 0003 	stmia.w	r3, {r0, r1}

	char logRight[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F };
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <main+0x2ac>)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f0:	e883 0003 	stmia.w	r3, {r0, r1}
	char logLeft[] = { 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80006f4:	4a91      	ldr	r2, [pc, #580]	; (800093c <main+0x2b0>)
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fe:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000702:	f000 fb74 	bl	8000dee <HAL_Init>

	/* USER CODE BEGIN Init */

	// ---------------------------------------------------- Initialization of LCD screen -----------------------------------------------------
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000706:	2208      	movs	r2, #8
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ff3b 	bl	8000586 <lcd_init>
	//LCD_init();
	// ---------------------------------------------------------------------------------------------------------------------------------------

	KPAD_init(&hadc1);
 8000710:	488b      	ldr	r0, [pc, #556]	; (8000940 <main+0x2b4>)
 8000712:	f7ff fd59 	bl	80001c8 <KPAD_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000716:	f000 f921 	bl	800095c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800071a:	f000 f9db 	bl	8000ad4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800071e:	f000 f963 	bl	80009e8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	lcd_clear();
 8000722:	f7ff ffa8 	bl	8000676 <lcd_clear>
	// lcd_print(1,1,"Hello World 2");

	// ------------------------------------------------ Assigning custom characters to memory ------------------------------------------------
	lcd_cmd(0x40);
 8000726:	2040      	movs	r0, #64	; 0x40
 8000728:	f7ff fd7c 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000730:	e00a      	b.n	8000748 <main+0xbc>
		lcd_char_cp(rightManHit[i]);
 8000732:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe3d 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000744:	3301      	adds	r3, #1
 8000746:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800074a:	2b07      	cmp	r3, #7
 800074c:	ddf1      	ble.n	8000732 <main+0xa6>
	lcd_cmd(0x40 + 8);
 800074e:	2048      	movs	r0, #72	; 0x48
 8000750:	f7ff fd68 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	66bb      	str	r3, [r7, #104]	; 0x68
 8000758:	e00a      	b.n	8000770 <main+0xe4>
		lcd_char_cp(leftManHit[i]);
 800075a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800075e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fe29 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 800076a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800076c:	3301      	adds	r3, #1
 800076e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000772:	2b07      	cmp	r3, #7
 8000774:	ddf1      	ble.n	800075a <main+0xce>
	lcd_cmd(0x40 + 16);
 8000776:	2050      	movs	r0, #80	; 0x50
 8000778:	f7ff fd54 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	667b      	str	r3, [r7, #100]	; 0x64
 8000780:	e00a      	b.n	8000798 <main+0x10c>
		lcd_char_cp(rightMan[i]);
 8000782:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe15 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000794:	3301      	adds	r3, #1
 8000796:	667b      	str	r3, [r7, #100]	; 0x64
 8000798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800079a:	2b07      	cmp	r3, #7
 800079c:	ddf1      	ble.n	8000782 <main+0xf6>
	lcd_cmd(0x40 + 24);
 800079e:	2058      	movs	r0, #88	; 0x58
 80007a0:	f7ff fd40 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
 80007a8:	e00a      	b.n	80007c0 <main+0x134>
		lcd_char_cp(leftMan[i]);
 80007aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe01 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80007ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007bc:	3301      	adds	r3, #1
 80007be:	663b      	str	r3, [r7, #96]	; 0x60
 80007c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007c2:	2b07      	cmp	r3, #7
 80007c4:	ddf1      	ble.n	80007aa <main+0x11e>
	lcd_cmd(0x40 + 32);
 80007c6:	2060      	movs	r0, #96	; 0x60
 80007c8:	f7ff fd2c 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007d0:	e00a      	b.n	80007e8 <main+0x15c>
		lcd_char_cp(branchRight[i]);
 80007d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fded 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80007e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007e4:	3301      	adds	r3, #1
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	ddf1      	ble.n	80007d2 <main+0x146>
	lcd_cmd(0x40 + 40);
 80007ee:	2068      	movs	r0, #104	; 0x68
 80007f0:	f7ff fd18 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80007f8:	e00a      	b.n	8000810 <main+0x184>
		lcd_char_cp(branchLeft[i]);
 80007fa:	f107 0220 	add.w	r2, r7, #32
 80007fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fdd9 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 800080a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800080c:	3301      	adds	r3, #1
 800080e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000812:	2b07      	cmp	r3, #7
 8000814:	ddf1      	ble.n	80007fa <main+0x16e>
	lcd_cmd(0x40 + 48);
 8000816:	2070      	movs	r0, #112	; 0x70
 8000818:	f7ff fd04 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800081c:	2300      	movs	r3, #0
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
 8000820:	e00a      	b.n	8000838 <main+0x1ac>
		lcd_char_cp(logRight[i]);
 8000822:	f107 0218 	add.w	r2, r7, #24
 8000826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fdc5 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000834:	3301      	adds	r3, #1
 8000836:	657b      	str	r3, [r7, #84]	; 0x54
 8000838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800083a:	2b07      	cmp	r3, #7
 800083c:	ddf1      	ble.n	8000822 <main+0x196>
	lcd_cmd(0x40 + 56);
 800083e:	2078      	movs	r0, #120	; 0x78
 8000840:	f7ff fcf0 	bl	8000224 <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	653b      	str	r3, [r7, #80]	; 0x50
 8000848:	e00a      	b.n	8000860 <main+0x1d4>
		lcd_char_cp(logLeft[i]);
 800084a:	f107 0210 	add.w	r2, r7, #16
 800084e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fdb1 	bl	80003bc <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 800085a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800085c:	3301      	adds	r3, #1
 800085e:	653b      	str	r3, [r7, #80]	; 0x50
 8000860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000862:	2b07      	cmp	r3, #7
 8000864:	ddf1      	ble.n	800084a <main+0x1be>

	lcd_cmd(0x80);
 8000866:	2080      	movs	r0, #128	; 0x80
 8000868:	f7ff fcdc 	bl	8000224 <lcd_cmd>
	//menu();
	//gameOver();
	char zmienna[16];
	while (1) {
		/* USER CODE END WHILE */
		HAL_ADC_Start(&hadc1);
 800086c:	4834      	ldr	r0, [pc, #208]	; (8000940 <main+0x2b4>)
 800086e:	f000 fe8b 	bl	8001588 <HAL_ADC_Start>
		HAL_Delay(200);
 8000872:	20c8      	movs	r0, #200	; 0xc8
 8000874:	f000 fb30 	bl	8000ed8 <HAL_Delay>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000878:	210a      	movs	r1, #10
 800087a:	4831      	ldr	r0, [pc, #196]	; (8000940 <main+0x2b4>)
 800087c:	f000 ff3e 	bl	80016fc <HAL_ADC_PollForConversion>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f2      	bne.n	800086c <main+0x1e0>
			lcd_clear();
 8000886:	f7ff fef6 	bl	8000676 <lcd_clear>
			value = HAL_ADC_GetValue(&hadc1);
 800088a:	482d      	ldr	r0, [pc, #180]	; (8000940 <main+0x2b4>)
 800088c:	f001 f80e 	bl	80018ac <HAL_ADC_GetValue>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <main+0x2b8>)
 8000896:	801a      	strh	r2, [r3, #0]

			/*sprintf(zmienna, "%u", value);
			lcd_print(1, 1, zmienna);
			HAL_Delay(200);
			lcd_clear();*/
			if (value > 4000)
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <main+0x2b8>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008a0:	d904      	bls.n	80008ac <main+0x220>
				lcd_print(1, 1, "NOTHING");
 80008a2:	4a29      	ldr	r2, [pc, #164]	; (8000948 <main+0x2bc>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fecd 	bl	8000646 <lcd_print>
			if (value > 2750 && value < 3000)
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <main+0x2b8>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	f640 22be 	movw	r2, #2750	; 0xabe
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d90a      	bls.n	80008ce <main+0x242>
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <main+0x2b8>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d804      	bhi.n	80008ce <main+0x242>
				lcd_print(1, 1, "LEFT");
 80008c4:	4a21      	ldr	r2, [pc, #132]	; (800094c <main+0x2c0>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff febc 	bl	8000646 <lcd_print>
			if (value > 700 && value < 820)
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <main+0x2b8>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80008d6:	d909      	bls.n	80008ec <main+0x260>
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <main+0x2b8>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80008e0:	d204      	bcs.n	80008ec <main+0x260>
				lcd_print(1, 1, "UP");
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <main+0x2c4>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fead 	bl	8000646 <lcd_print>
			if (value > 1800 && value < 1920)
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <main+0x2b8>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80008f4:	d909      	bls.n	800090a <main+0x27e>
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <main+0x2b8>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80008fe:	d204      	bcs.n	800090a <main+0x27e>
				lcd_print(1, 1, "DOWN");
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <main+0x2c8>)
 8000902:	2101      	movs	r1, #1
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fe9e 	bl	8000646 <lcd_print>
			if (value >= 0 && value < 500)
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <main+0x2b8>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000912:	d2ab      	bcs.n	800086c <main+0x1e0>
				lcd_print(1, 1, "RIGHT");
 8000914:	4a10      	ldr	r2, [pc, #64]	; (8000958 <main+0x2cc>)
 8000916:	2101      	movs	r1, #1
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fe94 	bl	8000646 <lcd_print>
		HAL_ADC_Start(&hadc1);
 800091e:	e7a5      	b.n	800086c <main+0x1e0>
 8000920:	08003ff8 	.word	0x08003ff8
 8000924:	08004000 	.word	0x08004000
 8000928:	08004008 	.word	0x08004008
 800092c:	08004010 	.word	0x08004010
 8000930:	08004018 	.word	0x08004018
 8000934:	08004020 	.word	0x08004020
 8000938:	08004028 	.word	0x08004028
 800093c:	08004030 	.word	0x08004030
 8000940:	20000030 	.word	0x20000030
 8000944:	20000094 	.word	0x20000094
 8000948:	08003fd4 	.word	0x08003fd4
 800094c:	08003fdc 	.word	0x08003fdc
 8000950:	08003fe4 	.word	0x08003fe4
 8000954:	08003fe8 	.word	0x08003fe8
 8000958:	08003ff0 	.word	0x08003ff0

0800095c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	; 0x58
 8000960:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2244      	movs	r2, #68	; 0x44
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fada 	bl	8003f24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800097e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000982:	f001 fff5 	bl	8002970 <HAL_PWREx_ControlVoltageScaling>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800098c:	f000 f930 	bl	8000bf0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000990:	2310      	movs	r3, #16
 8000992:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 f837 	bl	8002a1c <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x5c>
		Error_Handler();
 80009b4:	f000 f91c 	bl	8000bf0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80009cc:	463b      	mov	r3, r7
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fbff 	bl	80031d4 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x84>
		Error_Handler();
 80009dc:	f000 f908 	bl	8000bf0 <Error_Handler>
	}
}
 80009e0:	bf00      	nop
 80009e2:	3758      	adds	r7, #88	; 0x58
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a0c:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <MX_ADC1_Init+0xe4>)
 8000a0e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a6c:	f000 fc3c 	bl	80012e8 <HAL_ADC_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x92>
		Error_Handler();
 8000a76:	f000 f8bb 	bl	8000bf0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000a86:	f001 fbbd 	bl	8002204 <HAL_ADCEx_MultiModeConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000a90:	f000 f8ae 	bl	8000bf0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a96:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a98:	2306      	movs	r3, #6
 8000a9a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aa0:	237f      	movs	r3, #127	; 0x7f
 8000aa2:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_ADC1_Init+0xe0>)
 8000ab2:	f000 ff09 	bl	80018c8 <HAL_ADC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000abc:	f000 f898 	bl	8000bf0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000030 	.word	0x20000030
 8000acc:	50040000 	.word	0x50040000
 8000ad0:	14f00020 	.word	0x14f00020

08000ad4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a37      	ldr	r2, [pc, #220]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <MX_GPIO_Init+0x110>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin,
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000b38:	482b      	ldr	r0, [pc, #172]	; (8000be8 <MX_GPIO_Init+0x114>)
 8000b3a:	f001 fecf 	bl	80028dc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	482a      	ldr	r0, [pc, #168]	; (8000bec <MX_GPIO_Init+0x118>)
 8000b44:	f001 feca 	bl	80028dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin | LCD_RS_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f001 fec3 	bl	80028dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <MX_GPIO_Init+0x118>)
 8000b6e:	f001 fd0b 	bl	8002588 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D5_Pin | LCD_D4_Pin;
 8000b72:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000b76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4817      	ldr	r0, [pc, #92]	; (8000be8 <MX_GPIO_Init+0x114>)
 8000b8c:	f001 fcfc 	bl	8002588 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_EN_Pin */
	GPIO_InitStruct.Pin = LCD_EN_Pin;
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_GPIO_Init+0x118>)
 8000ba8:	f001 fcee 	bl	8002588 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = LCD_D7_Pin | LCD_RS_Pin;
 8000bac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f001 fcde 	bl	8002588 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2028      	movs	r0, #40	; 0x28
 8000bd2:	f001 fca2 	bl	800251a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd6:	2028      	movs	r0, #40	; 0x28
 8000bd8:	f001 fcbb 	bl	8002552 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000400 	.word	0x48000400
 8000bec:	48000800 	.word	0x48000800

08000bf0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ac      	sub	sp, #176	; 0xb0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2288      	movs	r2, #136	; 0x88
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 f95d 	bl	8003f24 <memset>
  if(hadc->Instance==ADC1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_ADC_MspInit+0xc8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d147      	bne.n	8000d04 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c78:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fc81 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000cb0:	f7ff ff9e 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_ADC_MspInit+0xcc>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <HAL_ADC_MspInit+0xcc>)
 8000cba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_ADC_MspInit+0xcc>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_ADC_MspInit+0xcc>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_ADC_MspInit+0xcc>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_ADC_MspInit+0xcc>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LCD_Pin;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cea:	230b      	movs	r3, #11
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f001 fc42 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	37b0      	adds	r7, #176	; 0xb0
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	50040000 	.word	0x50040000
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f89a 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000d6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d70:	f001 fdcc 	bl	800290c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff ffea 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <LoopForever+0xe>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dbc:	4c0a      	ldr	r4, [pc, #40]	; (8000de8 <LoopForever+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f003 f8b3 	bl	8003f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f7ff fc5d 	bl	800068c <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de0:	08004080 	.word	0x08004080
  ldr r2, =_sbss
 8000de4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de8:	2000009c 	.word	0x2000009c

08000dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC1_2_IRQHandler>

08000dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f001 fb83 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f80e 	bl	8000e20 <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e001      	b.n	8000e14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e10:	f7ff fef4 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d023      	beq.n	8000e7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_InitTick+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fb8f 	bl	800256e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10f      	bne.n	8000e76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d809      	bhi.n	8000e70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f001 fb59 	bl	800251a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_InitTick+0x74>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e007      	b.n	8000e80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e004      	b.n	8000e80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e001      	b.n	8000e80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000098 	.word	0x20000098

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000098 	.word	0x20000098

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	609a      	str	r2, [r3, #8]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3360      	adds	r3, #96	; 0x60
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LL_ADC_SetOffset+0x44>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	03fff000 	.word	0x03fff000

08000fd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3360      	adds	r3, #96	; 0x60
 8000fde:	461a      	mov	r2, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3360      	adds	r3, #96	; 0x60
 800100c:	461a      	mov	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3330      	adds	r3, #48	; 0x30
 8001068:	461a      	mov	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	4413      	add	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	211f      	movs	r1, #31
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0e9b      	lsrs	r3, r3, #26
 8001090:	f003 011f 	and.w	r1, r3, #31
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	431a      	orrs	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010a4:	bf00      	nop
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3314      	adds	r3, #20
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	0e5b      	lsrs	r3, r3, #25
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	0d1b      	lsrs	r3, r3, #20
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2107      	movs	r1, #7
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	401a      	ands	r2, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	0d1b      	lsrs	r3, r3, #20
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	431a      	orrs	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010fa:	bf00      	nop
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001120:	43db      	mvns	r3, r3
 8001122:	401a      	ands	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0318 	and.w	r3, r3, #24
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <LL_ADC_SetChannelSingleDiff+0x44>)
 800112c:	40d9      	lsrs	r1, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	400b      	ands	r3, r1
 8001132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001136:	431a      	orrs	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	0007ffff 	.word	0x0007ffff

08001150 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 031f 	and.w	r3, r3, #31
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6093      	str	r3, [r2, #8]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011c0:	d101      	bne.n	80011c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001210:	d101      	bne.n	8001216 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <LL_ADC_IsEnabled+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_ADC_IsEnabled+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001282:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001286:	f043 0204 	orr.w	r2, r3, #4
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d101      	bne.n	80012d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e130      	b.n	8001564 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fc97 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff3f 	bl	80011ac <LL_ADC_IsDeepPowerDownEnabled>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff25 	bl	8001188 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff5a 	bl	80011fc <LL_ADC_IsInternalRegulatorEnabled>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d115      	bne.n	800137a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff3e 	bl	80011d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001358:	4b84      	ldr	r3, [pc, #528]	; (800156c <HAL_ADC_Init+0x284>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	099b      	lsrs	r3, r3, #6
 800135e:	4a84      	ldr	r2, [pc, #528]	; (8001570 <HAL_ADC_Init+0x288>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	3301      	adds	r3, #1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800136c:	e002      	b.n	8001374 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3b01      	subs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f9      	bne.n	800136e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff3c 	bl	80011fc <LL_ADC_IsInternalRegulatorEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	f043 0210 	orr.w	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff75 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 80013b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80c9 	bne.w	8001552 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f040 80c5 	bne.w	8001552 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013d0:	f043 0202 	orr.w	r2, r3, #2
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff35 	bl	800124c <LL_ADC_IsEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d115      	bne.n	8001414 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013e8:	4862      	ldr	r0, [pc, #392]	; (8001574 <HAL_ADC_Init+0x28c>)
 80013ea:	f7ff ff2f 	bl	800124c <LL_ADC_IsEnabled>
 80013ee:	4604      	mov	r4, r0
 80013f0:	4861      	ldr	r0, [pc, #388]	; (8001578 <HAL_ADC_Init+0x290>)
 80013f2:	f7ff ff2b 	bl	800124c <LL_ADC_IsEnabled>
 80013f6:	4603      	mov	r3, r0
 80013f8:	431c      	orrs	r4, r3
 80013fa:	4860      	ldr	r0, [pc, #384]	; (800157c <HAL_ADC_Init+0x294>)
 80013fc:	f7ff ff26 	bl	800124c <LL_ADC_IsEnabled>
 8001400:	4603      	mov	r3, r0
 8001402:	4323      	orrs	r3, r4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4619      	mov	r1, r3
 800140e:	485c      	ldr	r0, [pc, #368]	; (8001580 <HAL_ADC_Init+0x298>)
 8001410:	f7ff fd86 	bl	8000f20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e5b      	ldrb	r3, [r3, #25]
 8001418:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800141e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001424:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800142a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001432:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d106      	bne.n	8001450 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	3b01      	subs	r3, #1
 8001448:	045b      	lsls	r3, r3, #17
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_ADC_Init+0x29c>)
 8001474:	4013      	ands	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	69b9      	ldr	r1, [r7, #24]
 800147c:	430b      	orrs	r3, r1
 800147e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff1b 	bl	80012c0 <LL_ADC_INJ_IsConversionOngoing>
 800148a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d13d      	bne.n	800150e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d13a      	bne.n	800150e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800149c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b4:	f023 0302 	bic.w	r3, r3, #2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	430b      	orrs	r3, r1
 80014c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d118      	bne.n	80014fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014e8:	4311      	orrs	r1, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014ee:	430a      	orrs	r2, r1
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	e007      	b.n	800150e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10c      	bne.n	8001530 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f023 010f 	bic.w	r1, r3, #15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
 800152e:	e007      	b.n	8001540 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 020f 	bic.w	r2, r2, #15
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001544:	f023 0303 	bic.w	r3, r3, #3
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
 8001550:	e007      	b.n	8001562 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f043 0210 	orr.w	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001562:	7ffb      	ldrb	r3, [r7, #31]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	053e2d63 	.word	0x053e2d63
 8001574:	50040000 	.word	0x50040000
 8001578:	50040100 	.word	0x50040100
 800157c:	50040200 	.word	0x50040200
 8001580:	50040300 	.word	0x50040300
 8001584:	fff0c007 	.word	0xfff0c007

08001588 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001590:	4857      	ldr	r0, [pc, #348]	; (80016f0 <HAL_ADC_Start+0x168>)
 8001592:	f7ff fddd 	bl	8001150 <LL_ADC_GetMultimode>
 8001596:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe7c 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 809c 	bne.w	80016e2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_ADC_Start+0x30>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e097      	b.n	80016e8 <HAL_ADC_Start+0x160>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fd73 	bl	80020ac <ADC_Enable>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f040 8083 	bne.w	80016d8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a42      	ldr	r2, [pc, #264]	; (80016f4 <HAL_ADC_Start+0x16c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d002      	beq.n	80015f6 <HAL_ADC_Start+0x6e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_Start+0x70>
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_ADC_Start+0x170>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d002      	beq.n	8001606 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d105      	bne.n	8001612 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800161e:	d106      	bne.n	800162e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	f023 0206 	bic.w	r2, r3, #6
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	659a      	str	r2, [r3, #88]	; 0x58
 800162c:	e002      	b.n	8001634 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	221c      	movs	r2, #28
 800163a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a2a      	ldr	r2, [pc, #168]	; (80016f4 <HAL_ADC_Start+0x16c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d002      	beq.n	8001654 <HAL_ADC_Start+0xcc>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	e000      	b.n	8001656 <HAL_ADC_Start+0xce>
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_ADC_Start+0x170>)
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4293      	cmp	r3, r2
 800165c:	d008      	beq.n	8001670 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d002      	beq.n	8001670 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b09      	cmp	r3, #9
 800166e:	d114      	bne.n	800169a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001686:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fded 	bl	8001272 <LL_ADC_REG_StartConversion>
 8001698:	e025      	b.n	80016e6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <HAL_ADC_Start+0x16c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d002      	beq.n	80016b6 <HAL_ADC_Start+0x12e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_Start+0x130>
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_ADC_Start+0x170>)
 80016b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00f      	beq.n	80016e6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
 80016d6:	e006      	b.n	80016e6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016e0:	e001      	b.n	80016e6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	50040300 	.word	0x50040300
 80016f4:	50040100 	.word	0x50040100
 80016f8:	50040000 	.word	0x50040000

080016fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001706:	4866      	ldr	r0, [pc, #408]	; (80018a0 <HAL_ADC_PollForConversion+0x1a4>)
 8001708:	f7ff fd22 	bl	8001150 <LL_ADC_GetMultimode>
 800170c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	2b08      	cmp	r3, #8
 8001714:	d102      	bne.n	800171c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001716:	2308      	movs	r3, #8
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e02a      	b.n	8001772 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d002      	beq.n	800172e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b09      	cmp	r3, #9
 800172c:	d111      	bne.n	8001752 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f043 0220 	orr.w	r2, r3, #32
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0a4      	b.n	8001896 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800174c:	2304      	movs	r3, #4
 800174e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001750:	e00f      	b.n	8001772 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001752:	4853      	ldr	r0, [pc, #332]	; (80018a0 <HAL_ADC_PollForConversion+0x1a4>)
 8001754:	f7ff fd0a 	bl	800116c <LL_ADC_GetMultiDMATransfer>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e093      	b.n	8001896 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800176e:	2304      	movs	r3, #4
 8001770:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001772:	f7ff fba5 	bl	8000ec0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001778:	e021      	b.n	80017be <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d01d      	beq.n	80017be <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001782:	f7ff fb9d 	bl	8000ec0 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d302      	bcc.n	8001798 <HAL_ADC_PollForConversion+0x9c>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d112      	bne.n	80017be <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10b      	bne.n	80017be <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f043 0204 	orr.w	r2, r3, #4
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e06b      	b.n	8001896 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0d6      	beq.n	800177a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc28 	bl	8001032 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01c      	beq.n	8001822 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e5b      	ldrb	r3, [r3, #25]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d111      	bne.n	8001822 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d105      	bne.n	8001822 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_ADC_PollForConversion+0x1a8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d002      	beq.n	8001832 <HAL_ADC_PollForConversion+0x136>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	e000      	b.n	8001834 <HAL_ADC_PollForConversion+0x138>
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_ADC_PollForConversion+0x1ac>)
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	4293      	cmp	r3, r2
 800183a:	d008      	beq.n	800184e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d002      	beq.n	800184e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b09      	cmp	r3, #9
 800184c:	d104      	bne.n	8001858 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	e00c      	b.n	8001872 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_ADC_PollForConversion+0x1a8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d002      	beq.n	8001868 <HAL_ADC_PollForConversion+0x16c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	e000      	b.n	800186a <HAL_ADC_PollForConversion+0x16e>
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_ADC_PollForConversion+0x1ac>)
 800186a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d104      	bne.n	8001882 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2208      	movs	r2, #8
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e008      	b.n	8001894 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d103      	bne.n	8001894 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	220c      	movs	r2, #12
 8001892:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	50040300 	.word	0x50040300
 80018a4:	50040100 	.word	0x50040100
 80018a8:	50040000 	.word	0x50040000

080018ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0b6      	sub	sp, #216	; 0xd8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x22>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e3c9      	b.n	800207e <HAL_ADC_ConfigChannel+0x7b6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fccf 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 83aa 	bne.w	8002058 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d824      	bhi.n	800195e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	3b02      	subs	r3, #2
 800191a:	2b03      	cmp	r3, #3
 800191c:	d81b      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x8e>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <HAL_ADC_ConfigChannel+0x5c>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001935 	.word	0x08001935
 8001928:	0800193d 	.word	0x0800193d
 800192c:	08001945 	.word	0x08001945
 8001930:	0800194d 	.word	0x0800194d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001934:	230c      	movs	r3, #12
 8001936:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800193a:	e010      	b.n	800195e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800193c:	2312      	movs	r3, #18
 800193e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001942:	e00c      	b.n	800195e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001944:	2318      	movs	r3, #24
 8001946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800194a:	e008      	b.n	800195e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800194c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001954:	e003      	b.n	800195e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001956:	2306      	movs	r3, #6
 8001958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800195c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800196c:	f7ff fb74 	bl	8001058 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fc90 	bl	800129a <LL_ADC_REG_IsConversionOngoing>
 800197a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fc9c 	bl	80012c0 <LL_ADC_INJ_IsConversionOngoing>
 8001988:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800198c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 81a4 	bne.w	8001cde <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 819f 	bne.w	8001cde <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	461a      	mov	r2, r3
 80019ae:	f7ff fb7f 	bl	80010b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00a      	beq.n	80019ea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6919      	ldr	r1, [r3, #16]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019e4:	f7ff fad0 	bl	8000f88 <LL_ADC_SetOffset>
 80019e8:	e179      	b.n	8001cde <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff faed 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x14e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fae2 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	0e9b      	lsrs	r3, r3, #26
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	e01e      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x18c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fad7 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001a44:	2320      	movs	r3, #32
 8001a46:	e004      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1a4>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0e9b      	lsrs	r3, r3, #26
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	e018      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1d6>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001a88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001a90:	2320      	movs	r3, #32
 8001a92:	e004      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d106      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff faa6 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa8a 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10a      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x214>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fa7f 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	0e9b      	lsrs	r3, r3, #26
 8001ad6:	f003 021f 	and.w	r2, r3, #31
 8001ada:	e01e      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x252>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fa74 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	e004      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x26a>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0e9b      	lsrs	r3, r3, #26
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	e018      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x29c>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001b56:	2320      	movs	r3, #32
 8001b58:	e004      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fa43 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa27 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10a      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x2da>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2102      	movs	r1, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fa1c 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	0e9b      	lsrs	r3, r3, #26
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	e01e      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x318>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fa11 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e004      	b.n	8001bde <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x330>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	e014      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x35a>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e004      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f9e4 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2103      	movs	r1, #3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f9c8 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x398>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f9bd 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	f003 021f 	and.w	r2, r3, #31
 8001c5e:	e017      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x3c8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2103      	movs	r1, #3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f9b2 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c7a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e003      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x3e0>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	e011      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x404>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cb8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e003      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d106      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f98f 	bl	8000ffc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fab2 	bl	800124c <LL_ADC_IsEnabled>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 8140 	bne.w	8001f70 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f7ff fa03 	bl	8001108 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4a8f      	ldr	r2, [pc, #572]	; (8001f44 <HAL_ADC_ConfigChannel+0x67c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f040 8131 	bne.w	8001f70 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10b      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x46e>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	bf94      	ite	ls
 8001d2e:	2301      	movls	r3, #1
 8001d30:	2300      	movhi	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	e019      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x4a2>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e003      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	2b09      	cmp	r3, #9
 8001d62:	bf94      	ite	ls
 8001d64:	2301      	movls	r3, #1
 8001d66:	2300      	movhi	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d079      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x4c2>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	0e9b      	lsrs	r3, r3, #26
 8001d80:	3301      	adds	r3, #1
 8001d82:	069b      	lsls	r3, r3, #26
 8001d84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d88:	e015      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x4ee>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e003      	b.n	8001dae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	069b      	lsls	r3, r3, #26
 8001db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x50e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	e017      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x53e>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001dee:	2320      	movs	r3, #32
 8001df0:	e003      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	ea42 0103 	orr.w	r1, r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x564>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f003 021f 	and.w	r2, r3, #31
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	051b      	lsls	r3, r3, #20
 8001e2a:	e018      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x596>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	e081      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d107      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x5b6>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0e9b      	lsrs	r3, r3, #26
 8001e74:	3301      	adds	r3, #1
 8001e76:	069b      	lsls	r3, r3, #26
 8001e78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e7c:	e015      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x5e2>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	069b      	lsls	r3, r3, #26
 8001ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x602>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	e017      	b.n	8001efa <HAL_ADC_ConfigChannel+0x632>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e003      	b.n	8001eee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	ea42 0103 	orr.w	r1, r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x65e>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	3301      	adds	r3, #1
 8001f12:	f003 021f 	and.w	r2, r3, #31
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b1e      	subs	r3, #30
 8001f1e:	051b      	lsls	r3, r3, #20
 8001f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f24:	e01e      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x69c>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	60fb      	str	r3, [r7, #12]
  return result;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d104      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e006      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x688>
 8001f42:	bf00      	nop
 8001f44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	3301      	adds	r3, #1
 8001f52:	f003 021f 	and.w	r2, r3, #31
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b1e      	subs	r3, #30
 8001f5e:	051b      	lsls	r3, r3, #20
 8001f60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f64:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7ff f8a0 	bl	80010b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d07a      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f7c:	4843      	ldr	r0, [pc, #268]	; (800208c <HAL_ADC_ConfigChannel+0x7c4>)
 8001f7e:	f7fe fff5 	bl	8000f6c <LL_ADC_GetCommonPathInternalCh>
 8001f82:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a41      	ldr	r2, [pc, #260]	; (8002090 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d12c      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d126      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3c      	ldr	r2, [pc, #240]	; (8002094 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x6e8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d15d      	bne.n	800206c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4834      	ldr	r0, [pc, #208]	; (800208c <HAL_ADC_ConfigChannel+0x7c4>)
 8001fbc:	f7fe ffc3 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_ADC_ConfigChannel+0x7d4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fe8:	e040      	b.n	800206c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d118      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ff4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d112      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_ADC_ConfigChannel+0x7cc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x74c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_ADC_ConfigChannel+0x7d0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d12d      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201c:	4619      	mov	r1, r3
 800201e:	481b      	ldr	r0, [pc, #108]	; (800208c <HAL_ADC_ConfigChannel+0x7c4>)
 8002020:	f7fe ff91 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002024:	e024      	b.n	8002070 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_ADC_ConfigChannel+0x7e0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d120      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d11a      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_ADC_ConfigChannel+0x7cc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d115      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800204a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800204e:	4619      	mov	r1, r3
 8002050:	480e      	ldr	r0, [pc, #56]	; (800208c <HAL_ADC_ConfigChannel+0x7c4>)
 8002052:	f7fe ff78 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
 8002056:	e00c      	b.n	8002072 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800206a:	e002      	b.n	8002072 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800206c:	bf00      	nop
 800206e:	e000      	b.n	8002072 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002070:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800207a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800207e:	4618      	mov	r0, r3
 8002080:	37d8      	adds	r7, #216	; 0xd8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	80080000 	.word	0x80080000
 800208c:	50040300 	.word	0x50040300
 8002090:	c7520000 	.word	0xc7520000
 8002094:	50040000 	.word	0x50040000
 8002098:	50040200 	.word	0x50040200
 800209c:	20000000 	.word	0x20000000
 80020a0:	053e2d63 	.word	0x053e2d63
 80020a4:	cb840000 	.word	0xcb840000
 80020a8:	80000001 	.word	0x80000001

080020ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f8c5 	bl	800124c <LL_ADC_IsEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d169      	bne.n	800219c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <ADC_Enable+0xfc>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e055      	b.n	800219e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f894 	bl	8001224 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020fc:	482b      	ldr	r0, [pc, #172]	; (80021ac <ADC_Enable+0x100>)
 80020fe:	f7fe ff35 	bl	8000f6c <LL_ADC_GetCommonPathInternalCh>
 8002102:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <ADC_Enable+0x104>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <ADC_Enable+0x108>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002126:	e002      	b.n	800212e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3b01      	subs	r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002134:	f7fe fec4 	bl	8000ec0 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800213a:	e028      	b.n	800218e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f883 	bl	800124c <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d104      	bne.n	8002156 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff f867 	bl	8001224 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002156:	f7fe feb3 	bl	8000ec0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d914      	bls.n	800218e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00d      	beq.n	800218e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d1cf      	bne.n	800213c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	8000003f 	.word	0x8000003f
 80021ac:	50040300 	.word	0x50040300
 80021b0:	20000000 	.word	0x20000000
 80021b4:	053e2d63 	.word	0x053e2d63

080021b8 <LL_ADC_IsEnabled>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <LL_ADC_IsEnabled+0x18>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <LL_ADC_IsEnabled+0x1a>
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_REG_IsConversionOngoing>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d101      	bne.n	80021f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b09f      	sub	sp, #124	; 0x7c
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800221e:	2302      	movs	r3, #2
 8002220:	e093      	b.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800222a:	2300      	movs	r3, #0
 800222c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800222e:	2300      	movs	r3, #0
 8002230:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d102      	bne.n	8002242 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	e001      	b.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	f043 0220 	orr.w	r2, r3, #32
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e072      	b.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ffb9 	bl	80021de <LL_ADC_REG_IsConversionOngoing>
 800226c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ffb3 	bl	80021de <LL_ADC_REG_IsConversionOngoing>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d154      	bne.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800227e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002280:	2b00      	cmp	r3, #0
 8002282:	d151      	bne.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002286:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02c      	beq.n	80022ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022a2:	035b      	lsls	r3, r3, #13
 80022a4:	430b      	orrs	r3, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ac:	4829      	ldr	r0, [pc, #164]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022ae:	f7ff ff83 	bl	80021b8 <LL_ADC_IsEnabled>
 80022b2:	4604      	mov	r4, r0
 80022b4:	4828      	ldr	r0, [pc, #160]	; (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022b6:	f7ff ff7f 	bl	80021b8 <LL_ADC_IsEnabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	431c      	orrs	r4, r3
 80022be:	4828      	ldr	r0, [pc, #160]	; (8002360 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022c0:	f7ff ff7a 	bl	80021b8 <LL_ADC_IsEnabled>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4323      	orrs	r3, r4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d137      	bne.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022d4:	f023 030f 	bic.w	r3, r3, #15
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	6811      	ldr	r1, [r2, #0]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	6892      	ldr	r2, [r2, #8]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022e8:	e028      	b.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f6:	4817      	ldr	r0, [pc, #92]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022f8:	f7ff ff5e 	bl	80021b8 <LL_ADC_IsEnabled>
 80022fc:	4604      	mov	r4, r0
 80022fe:	4816      	ldr	r0, [pc, #88]	; (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002300:	f7ff ff5a 	bl	80021b8 <LL_ADC_IsEnabled>
 8002304:	4603      	mov	r3, r0
 8002306:	431c      	orrs	r4, r3
 8002308:	4815      	ldr	r0, [pc, #84]	; (8002360 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800230a:	f7ff ff55 	bl	80021b8 <LL_ADC_IsEnabled>
 800230e:	4603      	mov	r3, r0
 8002310:	4323      	orrs	r3, r4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d112      	bne.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800231e:	f023 030f 	bic.w	r3, r3, #15
 8002322:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002324:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002326:	e009      	b.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800233a:	e000      	b.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800233c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002346:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800234a:	4618      	mov	r0, r3
 800234c:	377c      	adds	r7, #124	; 0x7c
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}
 8002352:	bf00      	nop
 8002354:	50040000 	.word	0x50040000
 8002358:	50040100 	.word	0x50040100
 800235c:	50040300 	.word	0x50040300
 8002360:	50040200 	.word	0x50040200

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	e17f      	b.n	8002898 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8171 	beq.w	8002892 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <HAL_GPIO_Init+0x40>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d130      	bne.n	800262a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025fe:	2201      	movs	r2, #1
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 0201 	and.w	r2, r3, #1
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d118      	bne.n	8002668 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800263c:	2201      	movs	r2, #1
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	f003 0201 	and.w	r2, r3, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b03      	cmp	r3, #3
 8002672:	d017      	beq.n	80026a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d123      	bne.n	80026f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	6939      	ldr	r1, [r7, #16]
 80026f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80ac 	beq.w	8002892 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_GPIO_Init+0x330>)
 800273c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273e:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <HAL_GPIO_Init+0x330>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6613      	str	r3, [r2, #96]	; 0x60
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_GPIO_Init+0x330>)
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002752:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_GPIO_Init+0x334>)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800277c:	d025      	beq.n	80027ca <HAL_GPIO_Init+0x242>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4f      	ldr	r2, [pc, #316]	; (80028c0 <HAL_GPIO_Init+0x338>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01f      	beq.n	80027c6 <HAL_GPIO_Init+0x23e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4e      	ldr	r2, [pc, #312]	; (80028c4 <HAL_GPIO_Init+0x33c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d019      	beq.n	80027c2 <HAL_GPIO_Init+0x23a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4d      	ldr	r2, [pc, #308]	; (80028c8 <HAL_GPIO_Init+0x340>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_GPIO_Init+0x236>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <HAL_GPIO_Init+0x344>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00d      	beq.n	80027ba <HAL_GPIO_Init+0x232>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4b      	ldr	r2, [pc, #300]	; (80028d0 <HAL_GPIO_Init+0x348>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <HAL_GPIO_Init+0x22e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <HAL_GPIO_Init+0x34c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_GPIO_Init+0x22a>
 80027ae:	2306      	movs	r3, #6
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027b2:	2307      	movs	r3, #7
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x244>
 80027ca:	2300      	movs	r3, #0
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027dc:	4937      	ldr	r1, [pc, #220]	; (80028bc <HAL_GPIO_Init+0x334>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_GPIO_Init+0x350>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800280e:	4a32      	ldr	r2, [pc, #200]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_GPIO_Init+0x350>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x350>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_GPIO_Init+0x350>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_GPIO_Init+0x350>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f47f ae78 	bne.w	8002598 <HAL_GPIO_Init+0x10>
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	48000400 	.word	0x48000400
 80028c4:	48000800 	.word	0x48000800
 80028c8:	48000c00 	.word	0x48000c00
 80028cc:	48001000 	.word	0x48001000
 80028d0:	48001400 	.word	0x48001400
 80028d4:	48001800 	.word	0x48001800
 80028d8:	40010400 	.word	0x40010400

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ec:	787b      	ldrb	r3, [r7, #1]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f8:	e002      	b.n	8002900 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d006      	beq.n	8002930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f806 	bl	800293c <HAL_GPIO_EXTI_Callback>
  }
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <HAL_PWREx_GetVoltageRange+0x18>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40007000 	.word	0x40007000

08002970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297e:	d130      	bne.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002980:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298c:	d038      	beq.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002996:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2232      	movs	r2, #50	; 0x32
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0c9b      	lsrs	r3, r3, #18
 80029b0:	3301      	adds	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b4:	e002      	b.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c8:	d102      	bne.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f2      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d110      	bne.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e00f      	b.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ee:	d007      	beq.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f8:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000
 8002a14:	20000000 	.word	0x20000000
 8002a18:	431bde83 	.word	0x431bde83

08002a1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3ca      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	4b97      	ldr	r3, [pc, #604]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a38:	4b94      	ldr	r3, [pc, #592]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80e4 	beq.w	8002c18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4a>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	f040 808b 	bne.w	8002b74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 8087 	bne.w	8002b74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a66:	4b89      	ldr	r3, [pc, #548]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x62>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e3a2      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <HAL_RCC_OscConfig+0x7c>
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a96:	e005      	b.n	8002aa4 <HAL_RCC_OscConfig+0x88>
 8002a98:	4b7c      	ldr	r3, [pc, #496]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d223      	bcs.n	8002af0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fd1d 	bl	80034ec <RCC_SetFlashLatencyFromMSIRange>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e383      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abc:	4b73      	ldr	r3, [pc, #460]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a72      	ldr	r2, [pc, #456]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	f043 0308 	orr.w	r3, r3, #8
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	496d      	ldr	r1, [pc, #436]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	4968      	ldr	r1, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
 8002aee:	e025      	b.n	8002b3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b63      	ldr	r3, [pc, #396]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4960      	ldr	r1, [pc, #384]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0e:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	495b      	ldr	r1, [pc, #364]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fcdd 	bl	80034ec <RCC_SetFlashLatencyFromMSIRange>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e343      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b3c:	f000 fc4a 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b52      	ldr	r3, [pc, #328]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	4950      	ldr	r1, [pc, #320]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b5c:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe f95d 	bl	8000e20 <HAL_InitTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d052      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	e327      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d032      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b7c:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b88:	f7fe f99a 	bl	8000ec0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b90:	f7fe f996 	bl	8000ec0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e310      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a36      	ldr	r2, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4931      	ldr	r1, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	492c      	ldr	r1, [pc, #176]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
 8002be0:	e01a      	b.n	8002c18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bee:	f7fe f967 	bl	8000ec0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf6:	f7fe f963 	bl	8000ec0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e2dd      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x1da>
 8002c14:	e000      	b.n	8002c18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d074      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x21a>
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d10e      	bne.n	8002c4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d10b      	bne.n	8002c4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d064      	beq.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d160      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e2ba      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x24a>
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e026      	b.n	8002cb4 <HAL_RCC_OscConfig+0x298>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6e:	d115      	bne.n	8002c9c <HAL_RCC_OscConfig+0x280>
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a02      	ldr	r2, [pc, #8]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x298>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08004038 	.word	0x08004038
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004
 8002c9c:	4ba0      	ldr	r3, [pc, #640]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a9f      	ldr	r2, [pc, #636]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b9d      	ldr	r3, [pc, #628]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a9c      	ldr	r2, [pc, #624]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f900 	bl	8000ec0 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe f8fc 	bl	8000ec0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e276      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd6:	4b92      	ldr	r3, [pc, #584]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2a8>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f8ec 	bl	8000ec0 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe f8e8 	bl	8000ec0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e262      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfe:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x2d0>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d060      	beq.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_OscConfig+0x310>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d116      	bne.n	8002d5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d2c:	4b7c      	ldr	r3, [pc, #496]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_OscConfig+0x328>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e23f      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	4973      	ldr	r1, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d58:	e040      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d023      	beq.n	8002daa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d62:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6e      	ldr	r2, [pc, #440]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe f8a7 	bl	8000ec0 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe f8a3 	bl	8000ec0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e21d      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d88:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	495f      	ldr	r1, [pc, #380]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
 8002da8:	e018      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe f883 	bl	8000ec0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe f87f 	bl	8000ec0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1f9      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03c      	beq.n	8002e62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df6:	4a4a      	ldr	r2, [pc, #296]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe f85e 	bl	8000ec0 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe f85a 	bl	8000ec0 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1d4      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ef      	beq.n	8002e08 <HAL_RCC_OscConfig+0x3ec>
 8002e28:	e01b      	b.n	8002e62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e30:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe f841 	bl	8000ec0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe f83d 	bl	8000ec0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1b7      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ef      	bne.n	8002e42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80a6 	beq.w	8002fbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e74:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d118      	bne.n	8002eda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe f804 	bl	8000ec0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fe f800 	bl	8000ec0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e17a      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d108      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d8>
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef2:	e029      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d115      	bne.n	8002f28 <HAL_RCC_OscConfig+0x50c>
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	4b9c      	ldr	r3, [pc, #624]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	4a9b      	ldr	r2, [pc, #620]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f38:	4b98      	ldr	r3, [pc, #608]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	4a97      	ldr	r2, [pc, #604]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d016      	beq.n	8002f7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fd ffb6 	bl	8000ec0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fd ffb2 	bl	8000ec0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e12a      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6e:	4b8b      	ldr	r3, [pc, #556]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ed      	beq.n	8002f58 <HAL_RCC_OscConfig+0x53c>
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fd ff9f 	bl	8000ec0 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fd ff9b 	bl	8000ec0 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e113      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ed      	bne.n	8002f86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002faa:	7ffb      	ldrb	r3, [r7, #31]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b7a      	ldr	r3, [pc, #488]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4a79      	ldr	r2, [pc, #484]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80fe 	beq.w	80031c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	f040 80d0 	bne.w	8003170 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fd0:	4b72      	ldr	r3, [pc, #456]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d130      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d127      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11f      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003010:	2a07      	cmp	r2, #7
 8003012:	bf14      	ite	ne
 8003014:	2201      	movne	r2, #1
 8003016:	2200      	moveq	r2, #0
 8003018:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800301a:	4293      	cmp	r3, r2
 800301c:	d113      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d109      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d06e      	beq.n	8003124 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d069      	beq.n	8003120 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0ad      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003068:	4b4c      	ldr	r3, [pc, #304]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a4b      	ldr	r2, [pc, #300]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800306e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003074:	f7fd ff24 	bl	8000ec0 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fd ff20 	bl	8000ec0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e09a      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308e:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309a:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_RCC_OscConfig+0x784>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030aa:	3a01      	subs	r2, #1
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b4:	0212      	lsls	r2, r2, #8
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030bc:	0852      	lsrs	r2, r2, #1
 80030be:	3a01      	subs	r2, #1
 80030c0:	0552      	lsls	r2, r2, #21
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c8:	0852      	lsrs	r2, r2, #1
 80030ca:	3a01      	subs	r2, #1
 80030cc:	0652      	lsls	r2, r2, #25
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d4:	0912      	lsrs	r2, r2, #4
 80030d6:	0452      	lsls	r2, r2, #17
 80030d8:	430a      	orrs	r2, r1
 80030da:	4930      	ldr	r1, [pc, #192]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2d      	ldr	r2, [pc, #180]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f8:	f7fd fee2 	bl	8000ec0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fd fede 	bl	8000ec0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e058      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311e:	e050      	b.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04f      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d148      	bne.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a16      	ldr	r2, [pc, #88]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003148:	f7fd feba 	bl	8000ec0 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fd feb6 	bl	8000ec0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e030      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x734>
 800316e:	e028      	b.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d023      	beq.n	80031be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a08      	ldr	r2, [pc, #32]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800317c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd fe9d 	bl	8000ec0 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	e00c      	b.n	80031a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fd fe99 	bl	8000ec0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d905      	bls.n	80031a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e013      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
 800319c:	40021000 	.word	0x40021000
 80031a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x7b0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ec      	bne.n	800318a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x7b0>)
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	4905      	ldr	r1, [pc, #20]	; (80031cc <HAL_RCC_OscConfig+0x7b0>)
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x7b4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e001      	b.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	feeefffc 	.word	0xfeeefffc

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0e7      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4970      	ldr	r1, [pc, #448]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0cf      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003230:	429a      	cmp	r2, r3
 8003232:	d908      	bls.n	8003246 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4960      	ldr	r1, [pc, #384]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04c      	beq.n	80032ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325a:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d121      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0a6      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003272:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d115      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e09a      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328a:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e08e      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e086      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4943      	ldr	r1, [pc, #268]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fd fe00 	bl	8000ec0 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fd fdfc 	bl	8000ec0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e06e      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	429a      	cmp	r2, r3
 8003306:	d208      	bcs.n	800331a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	492b      	ldr	r1, [pc, #172]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d210      	bcs.n	800334a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 0207 	bic.w	r2, r3, #7
 8003330:	4923      	ldr	r1, [pc, #140]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e036      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4918      	ldr	r1, [pc, #96]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4910      	ldr	r1, [pc, #64]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003388:	f000 f824 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	490b      	ldr	r1, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1f4>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1f8>)
 80033a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1fc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd fd37 	bl	8000e20 <HAL_InitTick>
 80033b2:	4603      	mov	r3, r0
 80033b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80033b6:	7afb      	ldrb	r3, [r7, #11]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08004038 	.word	0x08004038
 80033cc:	20000000 	.word	0x20000000
 80033d0:	20000004 	.word	0x20000004

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x34>
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d121      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d11e      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e005      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003430:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003444:	e00a      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d102      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e004      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d101      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800345a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d134      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0xa6>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d003      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0xac>
 8003478:	e005      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800347a:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800347c:	617b      	str	r3, [r7, #20]
      break;
 800347e:	e005      	b.n	800348c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003482:	617b      	str	r3, [r7, #20]
      break;
 8003484:	e002      	b.n	800348c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	3301      	adds	r3, #1
 8003498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	fb03 f202 	mul.w	r2, r3, r2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	0e5b      	lsrs	r3, r3, #25
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	3301      	adds	r3, #1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034cc:	69bb      	ldr	r3, [r7, #24]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08004048 	.word	0x08004048
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200

080034ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003504:	f7ff fa26 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 8003508:	6178      	str	r0, [r7, #20]
 800350a:	e014      	b.n	8003536 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	4a24      	ldr	r2, [pc, #144]	; (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	6593      	str	r3, [r2, #88]	; 0x58
 8003518:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003524:	f7ff fa16 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 8003528:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800352a:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353c:	d10b      	bne.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b80      	cmp	r3, #128	; 0x80
 8003542:	d919      	bls.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2ba0      	cmp	r3, #160	; 0xa0
 8003548:	d902      	bls.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800354a:	2302      	movs	r3, #2
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e013      	b.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003550:	2301      	movs	r3, #1
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e010      	b.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d902      	bls.n	8003562 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800355c:	2303      	movs	r3, #3
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e00a      	b.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b80      	cmp	r3, #128	; 0x80
 8003566:	d102      	bne.n	800356e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003568:	2302      	movs	r3, #2
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	e004      	b.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b70      	cmp	r3, #112	; 0x70
 8003572:	d101      	bne.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003574:	2301      	movs	r3, #1
 8003576:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 0207 	bic.w	r2, r3, #7
 8003580:	4909      	ldr	r1, [pc, #36]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	d001      	beq.n	800359a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40022000 	.word	0x40022000

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b4:	2300      	movs	r3, #0
 80035b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035b8:	2300      	movs	r3, #0
 80035ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d041      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035d0:	d02a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035d6:	d824      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035dc:	d008      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e2:	d81e      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ec:	d010      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035ee:	e018      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035f0:	4b86      	ldr	r3, [pc, #536]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a85      	ldr	r2, [pc, #532]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035fc:	e015      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fabb 	bl	8003b80 <RCCEx_PLLSAI1_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800360e:	e00c      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3320      	adds	r3, #32
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fba6 	bl	8003d68 <RCCEx_PLLSAI2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003620:	e003      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	74fb      	strb	r3, [r7, #19]
      break;
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10b      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003630:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363e:	4973      	ldr	r1, [pc, #460]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003646:	e001      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d041      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003660:	d02a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003666:	d824      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800366e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003672:	d81e      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800367c:	d010      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800367e:	e018      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003680:	4b62      	ldr	r3, [pc, #392]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a61      	ldr	r2, [pc, #388]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800368c:	e015      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fa73 	bl	8003b80 <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800369e:	e00c      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3320      	adds	r3, #32
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fb5e 	bl	8003d68 <RCCEx_PLLSAI2_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036b0:	e003      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	74fb      	strb	r3, [r7, #19]
      break;
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036c0:	4b52      	ldr	r3, [pc, #328]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ce:	494f      	ldr	r1, [pc, #316]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036d6:	e001      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a0 	beq.w	800382a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003704:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	4a40      	ldr	r2, [pc, #256]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370e:	6593      	str	r3, [r2, #88]	; 0x58
 8003710:	4b3e      	ldr	r3, [pc, #248]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371c:	2301      	movs	r3, #1
 800371e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003720:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3a      	ldr	r2, [pc, #232]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800372c:	f7fd fbc8 	bl	8000ec0 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003732:	e009      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003734:	f7fd fbc4 	bl	8000ec0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d902      	bls.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	74fb      	strb	r3, [r7, #19]
        break;
 8003746:	e005      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003748:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ef      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d15c      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800375a:	4b2c      	ldr	r3, [pc, #176]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003764:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01f      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	d019      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003784:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	4a20      	ldr	r2, [pc, #128]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037a4:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fd fb83 	bl	8000ec0 <HAL_GetTick>
 80037ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037bc:	e00b      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fd fb7f 	bl	8000ec0 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d902      	bls.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	74fb      	strb	r3, [r7, #19]
            break;
 80037d4:	e006      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ec      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10c      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003802:	e009      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	74bb      	strb	r3, [r7, #18]
 8003808:	e006      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003818:	7c7b      	ldrb	r3, [r7, #17]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d105      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381e:	4b9e      	ldr	r3, [pc, #632]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	4a9d      	ldr	r2, [pc, #628]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003828:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003836:	4b98      	ldr	r3, [pc, #608]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	f023 0203 	bic.w	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	4994      	ldr	r1, [pc, #592]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003858:	4b8f      	ldr	r3, [pc, #572]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	f023 020c 	bic.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	498c      	ldr	r1, [pc, #560]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800387a:	4b87      	ldr	r3, [pc, #540]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	4983      	ldr	r1, [pc, #524]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800389c:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	497b      	ldr	r1, [pc, #492]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038be:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	4972      	ldr	r1, [pc, #456]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038e0:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	496a      	ldr	r1, [pc, #424]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003902:	4b65      	ldr	r3, [pc, #404]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	4961      	ldr	r1, [pc, #388]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003924:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003932:	4959      	ldr	r1, [pc, #356]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003946:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	4950      	ldr	r1, [pc, #320]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003968:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	4948      	ldr	r1, [pc, #288]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398a:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	493f      	ldr	r1, [pc, #252]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d028      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ac:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ba:	4937      	ldr	r1, [pc, #220]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ca:	d106      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039cc:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a31      	ldr	r2, [pc, #196]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d6:	60d3      	str	r3, [r2, #12]
 80039d8:	e011      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e2:	d10c      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f8c8 	bl	8003b80 <RCCEx_PLLSAI1_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d028      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	491f      	ldr	r1, [pc, #124]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a28:	d106      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a34:	60d3      	str	r3, [r2, #12]
 8003a36:	e011      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 f899 	bl	8003b80 <RCCEx_PLLSAI1_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02b      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a76:	4908      	ldr	r1, [pc, #32]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a86:	d109      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a02      	ldr	r2, [pc, #8]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a92:	60d3      	str	r3, [r2, #12]
 8003a94:	e014      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f867 	bl	8003b80 <RCCEx_PLLSAI1_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab6:	7cfb      	ldrb	r3, [r7, #19]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02f      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ada:	4928      	ldr	r1, [pc, #160]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	2102      	movs	r1, #2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f844 	bl	8003b80 <RCCEx_PLLSAI1_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d014      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	74bb      	strb	r3, [r7, #18]
 8003b06:	e011      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3320      	adds	r3, #32
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f925 	bl	8003d68 <RCCEx_PLLSAI2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b46:	490d      	ldr	r1, [pc, #52]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6a:	4904      	ldr	r1, [pc, #16]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000

08003b80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b8e:	4b75      	ldr	r3, [pc, #468]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b9a:	4b72      	ldr	r3, [pc, #456]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0203 	and.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d10d      	bne.n	8003bc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
       ||
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d047      	beq.n	8003c56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	e044      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d018      	beq.n	8003c06 <RCCEx_PLLSAI1_Config+0x86>
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d825      	bhi.n	8003c24 <RCCEx_PLLSAI1_Config+0xa4>
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d002      	beq.n	8003be2 <RCCEx_PLLSAI1_Config+0x62>
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d009      	beq.n	8003bf4 <RCCEx_PLLSAI1_Config+0x74>
 8003be0:	e020      	b.n	8003c24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003be2:	4b60      	ldr	r3, [pc, #384]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11d      	bne.n	8003c2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf2:	e01a      	b.n	8003c2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bf4:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d116      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c04:	e013      	b.n	8003c2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c06:	4b57      	ldr	r3, [pc, #348]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c12:	4b54      	ldr	r3, [pc, #336]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c22:	e006      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
      break;
 8003c28:	e004      	b.n	8003c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e002      	b.n	8003c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	4944      	ldr	r1, [pc, #272]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d17d      	bne.n	8003d58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a40      	ldr	r2, [pc, #256]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c68:	f7fd f92a 	bl	8000ec0 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c6e:	e009      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c70:	f7fd f926 	bl	8000ec0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d902      	bls.n	8003c84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	73fb      	strb	r3, [r7, #15]
        break;
 8003c82:	e005      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c84:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ef      	bne.n	8003c70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d160      	bne.n	8003d58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d111      	bne.n	8003cc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6892      	ldr	r2, [r2, #8]
 8003cac:	0211      	lsls	r1, r2, #8
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68d2      	ldr	r2, [r2, #12]
 8003cb2:	0912      	lsrs	r2, r2, #4
 8003cb4:	0452      	lsls	r2, r2, #17
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	492a      	ldr	r1, [pc, #168]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	610b      	str	r3, [r1, #16]
 8003cbe:	e027      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d112      	bne.n	8003cec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc6:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6892      	ldr	r2, [r2, #8]
 8003cd6:	0211      	lsls	r1, r2, #8
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6912      	ldr	r2, [r2, #16]
 8003cdc:	0852      	lsrs	r2, r2, #1
 8003cde:	3a01      	subs	r2, #1
 8003ce0:	0552      	lsls	r2, r2, #21
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	491f      	ldr	r1, [pc, #124]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	610b      	str	r3, [r1, #16]
 8003cea:	e011      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6892      	ldr	r2, [r2, #8]
 8003cfc:	0211      	lsls	r1, r2, #8
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6952      	ldr	r2, [r2, #20]
 8003d02:	0852      	lsrs	r2, r2, #1
 8003d04:	3a01      	subs	r2, #1
 8003d06:	0652      	lsls	r2, r2, #25
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	4916      	ldr	r1, [pc, #88]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fd f8d0 	bl	8000ec0 <HAL_GetTick>
 8003d20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d22:	e009      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d24:	f7fd f8cc 	bl	8000ec0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d902      	bls.n	8003d38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	73fb      	strb	r3, [r7, #15]
          break;
 8003d36:	e005      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d38:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	4904      	ldr	r1, [pc, #16]	; (8003d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000

08003d68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d76:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d82:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0203 	and.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d10d      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
       ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d9a:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
       ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d047      	beq.n	8003e3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e044      	b.n	8003e3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d018      	beq.n	8003dee <RCCEx_PLLSAI2_Config+0x86>
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d825      	bhi.n	8003e0c <RCCEx_PLLSAI2_Config+0xa4>
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d002      	beq.n	8003dca <RCCEx_PLLSAI2_Config+0x62>
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d009      	beq.n	8003ddc <RCCEx_PLLSAI2_Config+0x74>
 8003dc8:	e020      	b.n	8003e0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dca:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11d      	bne.n	8003e12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dda:	e01a      	b.n	8003e12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ddc:	4b50      	ldr	r3, [pc, #320]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d116      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dec:	e013      	b.n	8003e16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dee:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dfa:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e0a:	e006      	b.n	8003e1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e004      	b.n	8003e1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e12:	bf00      	nop
 8003e14:	e002      	b.n	8003e1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e16:	bf00      	nop
 8003e18:	e000      	b.n	8003e1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e22:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	430b      	orrs	r3, r1
 8003e38:	4939      	ldr	r1, [pc, #228]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d167      	bne.n	8003f14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e44:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a35      	ldr	r2, [pc, #212]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fd f836 	bl	8000ec0 <HAL_GetTick>
 8003e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e56:	e009      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e58:	f7fd f832 	bl	8000ec0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d902      	bls.n	8003e6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	73fb      	strb	r3, [r7, #15]
        break;
 8003e6a:	e005      	b.n	8003e78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ef      	bne.n	8003e58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d14a      	bne.n	8003f14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e84:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6892      	ldr	r2, [r2, #8]
 8003e94:	0211      	lsls	r1, r2, #8
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68d2      	ldr	r2, [r2, #12]
 8003e9a:	0912      	lsrs	r2, r2, #4
 8003e9c:	0452      	lsls	r2, r2, #17
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	491f      	ldr	r1, [pc, #124]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	614b      	str	r3, [r1, #20]
 8003ea6:	e011      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ea8:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6892      	ldr	r2, [r2, #8]
 8003eb8:	0211      	lsls	r1, r2, #8
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6912      	ldr	r2, [r2, #16]
 8003ebe:	0852      	lsrs	r2, r2, #1
 8003ec0:	3a01      	subs	r2, #1
 8003ec2:	0652      	lsls	r2, r2, #25
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	4916      	ldr	r1, [pc, #88]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7fc fff2 	bl	8000ec0 <HAL_GetTick>
 8003edc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ede:	e009      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ee0:	f7fc ffee 	bl	8000ec0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d902      	bls.n	8003ef4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ef2:	e005      	b.n	8003f00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4904      	ldr	r1, [pc, #16]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000

08003f24 <memset>:
 8003f24:	4402      	add	r2, r0
 8003f26:	4603      	mov	r3, r0
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d100      	bne.n	8003f2e <memset+0xa>
 8003f2c:	4770      	bx	lr
 8003f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f32:	e7f9      	b.n	8003f28 <memset+0x4>

08003f34 <__libc_init_array>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	4d0d      	ldr	r5, [pc, #52]	; (8003f6c <__libc_init_array+0x38>)
 8003f38:	4c0d      	ldr	r4, [pc, #52]	; (8003f70 <__libc_init_array+0x3c>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	2600      	movs	r6, #0
 8003f40:	42a6      	cmp	r6, r4
 8003f42:	d109      	bne.n	8003f58 <__libc_init_array+0x24>
 8003f44:	4d0b      	ldr	r5, [pc, #44]	; (8003f74 <__libc_init_array+0x40>)
 8003f46:	4c0c      	ldr	r4, [pc, #48]	; (8003f78 <__libc_init_array+0x44>)
 8003f48:	f000 f818 	bl	8003f7c <_init>
 8003f4c:	1b64      	subs	r4, r4, r5
 8003f4e:	10a4      	asrs	r4, r4, #2
 8003f50:	2600      	movs	r6, #0
 8003f52:	42a6      	cmp	r6, r4
 8003f54:	d105      	bne.n	8003f62 <__libc_init_array+0x2e>
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5c:	4798      	blx	r3
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7ee      	b.n	8003f40 <__libc_init_array+0xc>
 8003f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f66:	4798      	blx	r3
 8003f68:	3601      	adds	r6, #1
 8003f6a:	e7f2      	b.n	8003f52 <__libc_init_array+0x1e>
 8003f6c:	08004078 	.word	0x08004078
 8003f70:	08004078 	.word	0x08004078
 8003f74:	08004078 	.word	0x08004078
 8003f78:	0800407c 	.word	0x0800407c

08003f7c <_init>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr

08003f88 <_fini>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr
