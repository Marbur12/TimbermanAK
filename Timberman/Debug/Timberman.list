
Timberman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800557c  0800557c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800557c  0800557c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800557c  0800557c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000005c  080055e0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080055e0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc43  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002165  00000000  00000000  0002cd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002ee78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094a  00000000  00000000  0002fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028381  00000000  00000000  0003041a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dec3  00000000  00000000  0005879b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc980  00000000  00000000  0006665e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036f4  00000000  00000000  00162fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001666d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005454 	.word	0x08005454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005454 	.word	0x08005454

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <KPAD_init>:

int KPAD_lastkey;
ADC_HandleTypeDef *KPAD_hadc;

void KPAD_init(ADC_HandleTypeDef *hadc)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	KPAD_lastkey = KPAD_KEYNONE;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <KPAD_init+0x20>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
	KPAD_hadc = hadc;
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <KPAD_init+0x24>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	20000078 	.word	0x20000078
 80002a4:	2000007c 	.word	0x2000007c

080002a8 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 80002b0:	e002      	b.n	80002b8 <Delay+0x10>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1f9      	bne.n	80002b2 <Delay+0xa>
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <lcd_delay>:
void lcd_delay(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	Delay(200);
 80002d0:	20c8      	movs	r0, #200	; 0xc8
 80002d2:	f7ff ffe9 	bl	80002a8 <Delay>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80002e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002f0:	4b5e      	ldr	r3, [pc, #376]	; (800046c <lcd_cmd+0x190>)
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80002f6:	4b5e      	ldr	r3, [pc, #376]	; (8000470 <lcd_cmd+0x194>)
 80002f8:	2220      	movs	r2, #32
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80002fc:	4b5c      	ldr	r3, [pc, #368]	; (8000470 <lcd_cmd+0x194>)
 80002fe:	2210      	movs	r2, #16
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000302:	4b5b      	ldr	r3, [pc, #364]	; (8000470 <lcd_cmd+0x194>)
 8000304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800030a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000312:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000314:	f7ff ffda 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000318:	4b54      	ldr	r3, [pc, #336]	; (800046c <lcd_cmd+0x190>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a53      	ldr	r2, [pc, #332]	; (800046c <lcd_cmd+0x190>)
 800031e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000322:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 0310 	and.w	r3, r3, #16
 800032a:	2b00      	cmp	r3, #0
 800032c:	d003      	beq.n	8000336 <lcd_cmd+0x5a>
 800032e:	4b50      	ldr	r3, [pc, #320]	; (8000470 <lcd_cmd+0x194>)
 8000330:	2220      	movs	r2, #32
 8000332:	619a      	str	r2, [r3, #24]
 8000334:	e003      	b.n	800033e <lcd_cmd+0x62>
 8000336:	4b4e      	ldr	r3, [pc, #312]	; (8000470 <lcd_cmd+0x194>)
 8000338:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800033c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	2b00      	cmp	r3, #0
 8000346:	d003      	beq.n	8000350 <lcd_cmd+0x74>
 8000348:	4b49      	ldr	r3, [pc, #292]	; (8000470 <lcd_cmd+0x194>)
 800034a:	2210      	movs	r2, #16
 800034c:	619a      	str	r2, [r3, #24]
 800034e:	e003      	b.n	8000358 <lcd_cmd+0x7c>
 8000350:	4b47      	ldr	r3, [pc, #284]	; (8000470 <lcd_cmd+0x194>)
 8000352:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000356:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800035e:	2b00      	cmp	r3, #0
 8000360:	d004      	beq.n	800036c <lcd_cmd+0x90>
 8000362:	4b43      	ldr	r3, [pc, #268]	; (8000470 <lcd_cmd+0x194>)
 8000364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000368:	619a      	str	r2, [r3, #24]
 800036a:	e003      	b.n	8000374 <lcd_cmd+0x98>
 800036c:	4b40      	ldr	r3, [pc, #256]	; (8000470 <lcd_cmd+0x194>)
 800036e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000372:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	da05      	bge.n	8000388 <lcd_cmd+0xac>
 800037c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000384:	619a      	str	r2, [r3, #24]
 8000386:	e004      	b.n	8000392 <lcd_cmd+0xb6>
 8000388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000390:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000392:	f7ff ff9b 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000396:	4b35      	ldr	r3, [pc, #212]	; (800046c <lcd_cmd+0x190>)
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800039c:	4b34      	ldr	r3, [pc, #208]	; (8000470 <lcd_cmd+0x194>)
 800039e:	2220      	movs	r2, #32
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003a2:	4b33      	ldr	r3, [pc, #204]	; (8000470 <lcd_cmd+0x194>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003a8:	4b31      	ldr	r3, [pc, #196]	; (8000470 <lcd_cmd+0x194>)
 80003aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80003ba:	f7ff ff87 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <lcd_cmd+0x190>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a2a      	ldr	r2, [pc, #168]	; (800046c <lcd_cmd+0x190>)
 80003c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c8:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d003      	beq.n	80003dc <lcd_cmd+0x100>
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <lcd_cmd+0x194>)
 80003d6:	2220      	movs	r2, #32
 80003d8:	619a      	str	r2, [r3, #24]
 80003da:	e003      	b.n	80003e4 <lcd_cmd+0x108>
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <lcd_cmd+0x194>)
 80003de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003e2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	f003 0302 	and.w	r3, r3, #2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d003      	beq.n	80003f6 <lcd_cmd+0x11a>
 80003ee:	4b20      	ldr	r3, [pc, #128]	; (8000470 <lcd_cmd+0x194>)
 80003f0:	2210      	movs	r2, #16
 80003f2:	619a      	str	r2, [r3, #24]
 80003f4:	e003      	b.n	80003fe <lcd_cmd+0x122>
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <lcd_cmd+0x194>)
 80003f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003fc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	2b00      	cmp	r3, #0
 8000406:	d004      	beq.n	8000412 <lcd_cmd+0x136>
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <lcd_cmd+0x194>)
 800040a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800040e:	619a      	str	r2, [r3, #24]
 8000410:	e003      	b.n	800041a <lcd_cmd+0x13e>
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <lcd_cmd+0x194>)
 8000414:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000418:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	2b00      	cmp	r3, #0
 8000422:	d005      	beq.n	8000430 <lcd_cmd+0x154>
 8000424:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800042c:	619a      	str	r2, [r3, #24]
 800042e:	e004      	b.n	800043a <lcd_cmd+0x15e>
 8000430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000438:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800043a:	f7ff ff47 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <lcd_cmd+0x190>)
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <lcd_cmd+0x194>)
 8000446:	2220      	movs	r2, #32
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <lcd_cmd+0x194>)
 800044c:	2210      	movs	r2, #16
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <lcd_cmd+0x194>)
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800045c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000460:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	48000800 	.word	0x48000800
 8000470:	48000400 	.word	0x48000400

08000474 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800047e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048c:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800048e:	4b5e      	ldr	r3, [pc, #376]	; (8000608 <lcd_char_cp+0x194>)
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000494:	4b5d      	ldr	r3, [pc, #372]	; (800060c <lcd_char_cp+0x198>)
 8000496:	2220      	movs	r2, #32
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800049a:	4b5c      	ldr	r3, [pc, #368]	; (800060c <lcd_char_cp+0x198>)
 800049c:	2210      	movs	r2, #16
 800049e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80004a0:	4b5a      	ldr	r3, [pc, #360]	; (800060c <lcd_char_cp+0x198>)
 80004a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80004a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b0:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80004b2:	f7ff ff0b 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80004b6:	4b54      	ldr	r3, [pc, #336]	; (8000608 <lcd_char_cp+0x194>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a53      	ldr	r2, [pc, #332]	; (8000608 <lcd_char_cp+0x194>)
 80004bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c0:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f003 0310 	and.w	r3, r3, #16
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d003      	beq.n	80004d4 <lcd_char_cp+0x60>
 80004cc:	4b4f      	ldr	r3, [pc, #316]	; (800060c <lcd_char_cp+0x198>)
 80004ce:	2220      	movs	r2, #32
 80004d0:	619a      	str	r2, [r3, #24]
 80004d2:	e003      	b.n	80004dc <lcd_char_cp+0x68>
 80004d4:	4b4d      	ldr	r3, [pc, #308]	; (800060c <lcd_char_cp+0x198>)
 80004d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004da:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f003 0320 	and.w	r3, r3, #32
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d003      	beq.n	80004ee <lcd_char_cp+0x7a>
 80004e6:	4b49      	ldr	r3, [pc, #292]	; (800060c <lcd_char_cp+0x198>)
 80004e8:	2210      	movs	r2, #16
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	e003      	b.n	80004f6 <lcd_char_cp+0x82>
 80004ee:	4b47      	ldr	r3, [pc, #284]	; (800060c <lcd_char_cp+0x198>)
 80004f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004f4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d004      	beq.n	800050a <lcd_char_cp+0x96>
 8000500:	4b42      	ldr	r3, [pc, #264]	; (800060c <lcd_char_cp+0x198>)
 8000502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000506:	619a      	str	r2, [r3, #24]
 8000508:	e003      	b.n	8000512 <lcd_char_cp+0x9e>
 800050a:	4b40      	ldr	r3, [pc, #256]	; (800060c <lcd_char_cp+0x198>)
 800050c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000510:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	da05      	bge.n	8000526 <lcd_char_cp+0xb2>
 800051a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000522:	619a      	str	r2, [r3, #24]
 8000524:	e004      	b.n	8000530 <lcd_char_cp+0xbc>
 8000526:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800052e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000530:	f7ff fecc 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000534:	4b34      	ldr	r3, [pc, #208]	; (8000608 <lcd_char_cp+0x194>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <lcd_char_cp+0x198>)
 800053c:	2220      	movs	r2, #32
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000540:	4b32      	ldr	r3, [pc, #200]	; (800060c <lcd_char_cp+0x198>)
 8000542:	2210      	movs	r2, #16
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <lcd_char_cp+0x198>)
 8000548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800054e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000556:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000558:	f7ff feb8 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <lcd_char_cp+0x194>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <lcd_char_cp+0x194>)
 8000562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000566:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b00      	cmp	r3, #0
 8000570:	d003      	beq.n	800057a <lcd_char_cp+0x106>
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <lcd_char_cp+0x198>)
 8000574:	2220      	movs	r2, #32
 8000576:	619a      	str	r2, [r3, #24]
 8000578:	e003      	b.n	8000582 <lcd_char_cp+0x10e>
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <lcd_char_cp+0x198>)
 800057c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000580:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <lcd_char_cp+0x120>
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <lcd_char_cp+0x198>)
 800058e:	2210      	movs	r2, #16
 8000590:	619a      	str	r2, [r3, #24]
 8000592:	e003      	b.n	800059c <lcd_char_cp+0x128>
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <lcd_char_cp+0x198>)
 8000596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800059a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d004      	beq.n	80005b0 <lcd_char_cp+0x13c>
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <lcd_char_cp+0x198>)
 80005a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ac:	619a      	str	r2, [r3, #24]
 80005ae:	e003      	b.n	80005b8 <lcd_char_cp+0x144>
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <lcd_char_cp+0x198>)
 80005b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005b6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d005      	beq.n	80005ce <lcd_char_cp+0x15a>
 80005c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	619a      	str	r2, [r3, #24]
 80005cc:	e004      	b.n	80005d8 <lcd_char_cp+0x164>
 80005ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005d6:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80005d8:	f7ff fe78 	bl	80002cc <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <lcd_char_cp+0x194>)
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <lcd_char_cp+0x198>)
 80005e4:	2220      	movs	r2, #32
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <lcd_char_cp+0x198>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <lcd_char_cp+0x198>)
 80005f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	48000800 	.word	0x48000800
 800060c:	48000400 	.word	0x48000400

08000610 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000618:	e008      	b.n	800062c <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff26 	bl	8000474 <lcd_char_cp>
        lcd_delay();
 8000628:	f7ff fe50 	bl	80002cc <lcd_delay>
	while(*out_char)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f2      	bne.n	800061a <lcd_out_cp+0xa>
	}

}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	460b      	mov	r3, r1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	4613      	mov	r3, r2
 800064e:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000650:	20fa      	movs	r0, #250	; 0xfa
 8000652:	f000 fde3 	bl	800121c <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8000656:	2002      	movs	r0, #2
 8000658:	f7ff fe40 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 800065c:	2032      	movs	r0, #50	; 0x32
 800065e:	f000 fddd 	bl	800121c <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	4313      	orrs	r3, r2
 8000668:	b2da      	uxtb	r2, r3
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	4313      	orrs	r3, r2
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fe30 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 800067c:	2032      	movs	r0, #50	; 0x32
 800067e:	f000 fdcd 	bl	800121c <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000682:	2006      	movs	r0, #6
 8000684:	f7ff fe2a 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 8000688:	2032      	movs	r0, #50	; 0x32
 800068a:	f000 fdc7 	bl	800121c <HAL_Delay>
    lcd_cmd(0x0E);
 800068e:	200e      	movs	r0, #14
 8000690:	f7ff fe24 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 8000694:	2032      	movs	r0, #50	; 0x32
 8000696:	f000 fdc1 	bl	800121c <HAL_Delay>
    lcd_cmd(0x0C);
 800069a:	200c      	movs	r0, #12
 800069c:	f7ff fe1e 	bl	80002dc <lcd_cmd>
    HAL_Delay(50);
 80006a0:	2032      	movs	r0, #50	; 0x32
 80006a2:	f000 fdbb 	bl	800121c <HAL_Delay>
    lcd_cmd(0x01);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff fe18 	bl	80002dc <lcd_cmd>
    HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f000 fdb5 	bl	800121c <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	460a      	mov	r2, r1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d106      	bne.n	80006de <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	337f      	adds	r3, #127	; 0x7f
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe00 	bl	80002dc <lcd_cmd>
 80006dc:	e008      	b.n	80006f0 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d105      	bne.n	80006f0 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	3b41      	subs	r3, #65	; 0x41
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fdf6 	bl	80002dc <lcd_cmd>
	}
    HAL_Delay(5);
 80006f0:	2005      	movs	r0, #5
 80006f2:	f000 fd93 	bl	800121c <HAL_Delay>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	4603      	mov	r3, r0
 8000706:	603a      	str	r2, [r7, #0]
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	460b      	mov	r3, r1
 800070c:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ffd0 	bl	80006ba <lcd_gotoxy>
	lcd_out_cp(out_char);
 800071a:	6838      	ldr	r0, [r7, #0]
 800071c:	f7ff ff78 	bl	8000610 <lcd_out_cp>
    HAL_Delay(5);
 8000720:	2005      	movs	r0, #5
 8000722:	f000 fd7b 	bl	800121c <HAL_Delay>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_clear>:
void lcd_clear(void) {
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fdd2 	bl	80002dc <lcd_cmd>
    HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f000 fd6f 	bl	800121c <HAL_Delay>

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <game>:

	} while (value > 4000);
}
// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------- Game ----------------------------------------------------------
void game() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	lcd_clear();
 8000748:	f7ff fff1 	bl	800072e <lcd_clear>
	while (1) {
		lcd_print(1, 1, "Test");
 800074c:	4a02      	ldr	r2, [pc, #8]	; (8000758 <game+0x14>)
 800074e:	2101      	movs	r1, #1
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ffd4 	bl	80006fe <lcd_print>
 8000756:	e7f9      	b.n	800074c <game+0x8>
 8000758:	08005494 	.word	0x08005494

0800075c <gameOver>:
	}

}
// ---------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------- Game over screen ----------------------------------------------------
void gameOver() {
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b096      	sub	sp, #88	; 0x58
 8000760:	af00      	add	r7, sp, #0

	 HAL_Delay(1500);
	 lcd_clear();
	 }*/

	lcd_clear();
 8000762:	f7ff ffe4 	bl	800072e <lcd_clear>

	sprintf(scoreText, "Score = %d", score);
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <gameOver+0x120>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	4944      	ldr	r1, [pc, #272]	; (8000880 <gameOver+0x124>)
 800076e:	4845      	ldr	r0, [pc, #276]	; (8000884 <gameOver+0x128>)
 8000770:	f004 f9cc 	bl	8004b0c <siprintf>
	int startCol = (16 - strlen(scoreText)) / 2 + 1;
 8000774:	4843      	ldr	r0, [pc, #268]	; (8000884 <gameOver+0x128>)
 8000776:	f7ff fd2b 	bl	80001d0 <strlen>
 800077a:	4603      	mov	r3, r0
 800077c:	f1c3 0310 	rsb	r3, r3, #16
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	3301      	adds	r3, #1
 8000784:	653b      	str	r3, [r7, #80]	; 0x50

	bool display = true;
 8000786:	2301      	movs	r3, #1
 8000788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	RTC_TimeTypeDef date;

	char string[16];

	do {
		HAL_Delay(500);
 800078c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000790:	f000 fd44 	bl	800121c <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000794:	483c      	ldr	r0, [pc, #240]	; (8000888 <gameOver+0x12c>)
 8000796:	f001 f899 	bl	80018cc <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 800079a:	210a      	movs	r1, #10
 800079c:	483a      	ldr	r0, [pc, #232]	; (8000888 <gameOver+0x12c>)
 800079e:	f001 f94f 	bl	8001a40 <HAL_ADC_PollForConversion>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d15f      	bne.n	8000868 <gameOver+0x10c>
			value = HAL_ADC_GetValue(&hadc1);
 80007a8:	4837      	ldr	r0, [pc, #220]	; (8000888 <gameOver+0x12c>)
 80007aa:	f001 fa21 	bl	8001bf0 <HAL_ADC_GetValue>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <gameOver+0x130>)
 80007b4:	801a      	strh	r2, [r3, #0]

			HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	4834      	ldr	r0, [pc, #208]	; (8000890 <gameOver+0x134>)
 80007c0:	f003 ff5a 	bl	8004678 <HAL_RTC_GetDate>
			HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80007c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	4830      	ldr	r0, [pc, #192]	; (8000890 <gameOver+0x134>)
 80007ce:	f003 fe70 	bl	80044b2 <HAL_RTC_GetTime>
			if (time.Seconds > 2) {
 80007d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d929      	bls.n	800082e <gameOver+0xd2>
				display = !display;
 80007da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80007f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				newTime = time;
 80007fe:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000802:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080a:	682b      	ldr	r3, [r5, #0]
 800080c:	6023      	str	r3, [r4, #0]
				newTime.Seconds = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				newTime.SecondFraction = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
				newTime.SubSeconds = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
				HAL_RTC_SetTime(&hrtc, &newTime, RTC_FORMAT_BIN);
 800081c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <gameOver+0x134>)
 8000826:	f003 fda7 	bl	8004378 <HAL_RTC_SetTime>
				lcd_clear();
 800082a:	f7ff ff80 	bl	800072e <lcd_clear>
			}
			if (display) {
 800082e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000832:	2b00      	cmp	r3, #0
 8000834:	d007      	beq.n	8000846 <gameOver+0xea>
				lcd_print(1, startCol, scoreText);
 8000836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <gameOver+0x128>)
 800083c:	4619      	mov	r1, r3
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff ff5d 	bl	80006fe <lcd_print>
 8000844:	e00b      	b.n	800085e <gameOver+0x102>
			} else if (!display) {
 8000846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800084a:	f083 0301 	eor.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d004      	beq.n	800085e <gameOver+0x102>
				lcd_print(1, 3, "Game Over :(");
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <gameOver+0x138>)
 8000856:	2103      	movs	r1, #3
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff50 	bl	80006fe <lcd_print>
			}
			lcd_print(2, 3, "Menu = PRESS");
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <gameOver+0x13c>)
 8000860:	2103      	movs	r1, #3
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff ff4b 	bl	80006fe <lcd_print>
		}

	} while (value > 4000);
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <gameOver+0x130>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000870:	d88c      	bhi.n	800078c <gameOver+0x30>
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3758      	adds	r7, #88	; 0x58
 8000878:	46bd      	mov	sp, r7
 800087a:	bdb0      	pop	{r4, r5, r7, pc}
 800087c:	2000010c 	.word	0x2000010c
 8000880:	0800549c 	.word	0x0800549c
 8000884:	20000110 	.word	0x20000110
 8000888:	20000080 	.word	0x20000080
 800088c:	20000108 	.word	0x20000108
 8000890:	200000e4 	.word	0x200000e4
 8000894:	080054a8 	.word	0x080054a8
 8000898:	080054b8 	.word	0x080054b8

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b098      	sub	sp, #96	; 0x60
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// ----------------------------------------------------- Custom characters variables ----------------------------------------------------
	char rightManHit[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x04, 0x1F, 0x1F };
 80008a2:	4a79      	ldr	r2, [pc, #484]	; (8000a88 <main+0x1ec>)
 80008a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ac:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftManHit[] = { 0x1F, 0x1F, 0x04, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 80008b0:	4a76      	ldr	r2, [pc, #472]	; (8000a8c <main+0x1f0>)
 80008b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ba:	e883 0003 	stmia.w	r3, {r0, r1}

	char rightMan[] = { 0x00, 0x00, 0x1F, 0x1D, 0x04, 0x00, 0x1F, 0x1F };
 80008be:	4a74      	ldr	r2, [pc, #464]	; (8000a90 <main+0x1f4>)
 80008c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c8:	e883 0003 	stmia.w	r3, {r0, r1}
	char leftMan[] = { 0x1F, 0x1F, 0x00, 0x04, 0x1D, 0x1F, 0x00, 0x00 };
 80008cc:	4a71      	ldr	r2, [pc, #452]	; (8000a94 <main+0x1f8>)
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d6:	e883 0003 	stmia.w	r3, {r0, r1}

	char branchRight[] = { 0x00, 0x02, 0x02, 0x02, 0x02, 0x03, 0x1F, 0x1F };
 80008da:	4a6f      	ldr	r2, [pc, #444]	; (8000a98 <main+0x1fc>)
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e4:	e883 0003 	stmia.w	r3, {r0, r1}
	char branchLeft[] = { 0x1F, 0x1F, 0x03, 0x02, 0x02, 0x02, 0x02, 0x00 };
 80008e8:	4a6c      	ldr	r2, [pc, #432]	; (8000a9c <main+0x200>)
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f2:	e883 0003 	stmia.w	r3, {r0, r1}

	char logRight[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F };
 80008f6:	4a6a      	ldr	r2, [pc, #424]	; (8000aa0 <main+0x204>)
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000900:	e883 0003 	stmia.w	r3, {r0, r1}
	char logLeft[] = { 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8000904:	4a67      	ldr	r2, [pc, #412]	; (8000aa4 <main+0x208>)
 8000906:	463b      	mov	r3, r7
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fc0f 	bl	8001132 <HAL_Init>

  /* USER CODE BEGIN Init */

	// ---------------------------------------------------- Initialization of LCD screen -----------------------------------------------------
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000914:	2208      	movs	r2, #8
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fe90 	bl	800063e <lcd_init>
	//LCD_init();
	// ---------------------------------------------------------------------------------------------------------------------------------------

	KPAD_init(&hadc1);
 800091e:	4862      	ldr	r0, [pc, #392]	; (8000aa8 <main+0x20c>)
 8000920:	f7ff fcae 	bl	8000280 <KPAD_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f8c2 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 fa0e 	bl	8000d48 <MX_GPIO_Init>
  MX_ADC1_Init();
 800092c:	f000 f906 	bl	8000b3c <MX_ADC1_Init>
  MX_RTC_Init();
 8000930:	f000 f97a 	bl	8000c28 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	lcd_clear();
 8000934:	f7ff fefb 	bl	800072e <lcd_clear>
	// lcd_print(1,1,"Hello World 2");

	// ------------------------------------------------ Assigning custom characters to memory ------------------------------------------------
	lcd_cmd(0x40);
 8000938:	2040      	movs	r0, #64	; 0x40
 800093a:	f7ff fccf 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000942:	e00a      	b.n	800095a <main+0xbe>
		lcd_char_cp(rightManHit[i]);
 8000944:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fd90 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000956:	3301      	adds	r3, #1
 8000958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800095a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095c:	2b07      	cmp	r3, #7
 800095e:	ddf1      	ble.n	8000944 <main+0xa8>
	lcd_cmd(0x40 + 8);
 8000960:	2048      	movs	r0, #72	; 0x48
 8000962:	f7ff fcbb 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000966:	2300      	movs	r3, #0
 8000968:	65bb      	str	r3, [r7, #88]	; 0x58
 800096a:	e00a      	b.n	8000982 <main+0xe6>
		lcd_char_cp(leftManHit[i]);
 800096c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000972:	4413      	add	r3, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd7c 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 800097c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800097e:	3301      	adds	r3, #1
 8000980:	65bb      	str	r3, [r7, #88]	; 0x58
 8000982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000984:	2b07      	cmp	r3, #7
 8000986:	ddf1      	ble.n	800096c <main+0xd0>
	lcd_cmd(0x40 + 16);
 8000988:	2050      	movs	r0, #80	; 0x50
 800098a:	f7ff fca7 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	657b      	str	r3, [r7, #84]	; 0x54
 8000992:	e00a      	b.n	80009aa <main+0x10e>
		lcd_char_cp(rightMan[i]);
 8000994:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fd68 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80009a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009a6:	3301      	adds	r3, #1
 80009a8:	657b      	str	r3, [r7, #84]	; 0x54
 80009aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	ddf1      	ble.n	8000994 <main+0xf8>
	lcd_cmd(0x40 + 24);
 80009b0:	2058      	movs	r0, #88	; 0x58
 80009b2:	f7ff fc93 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	653b      	str	r3, [r7, #80]	; 0x50
 80009ba:	e00a      	b.n	80009d2 <main+0x136>
		lcd_char_cp(leftMan[i]);
 80009bc:	f107 0220 	add.w	r2, r7, #32
 80009c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd54 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80009cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ce:	3301      	adds	r3, #1
 80009d0:	653b      	str	r3, [r7, #80]	; 0x50
 80009d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d4:	2b07      	cmp	r3, #7
 80009d6:	ddf1      	ble.n	80009bc <main+0x120>
	lcd_cmd(0x40 + 32);
 80009d8:	2060      	movs	r0, #96	; 0x60
 80009da:	f7ff fc7f 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009e2:	e00a      	b.n	80009fa <main+0x15e>
		lcd_char_cp(branchRight[i]);
 80009e4:	f107 0218 	add.w	r2, r7, #24
 80009e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fd40 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 80009f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f6:	3301      	adds	r3, #1
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	ddf1      	ble.n	80009e4 <main+0x148>
	lcd_cmd(0x40 + 40);
 8000a00:	2068      	movs	r0, #104	; 0x68
 8000a02:	f7ff fc6b 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a0a:	e00a      	b.n	8000a22 <main+0x186>
		lcd_char_cp(branchLeft[i]);
 8000a0c:	f107 0210 	add.w	r2, r7, #16
 8000a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fd2c 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a1e:	3301      	adds	r3, #1
 8000a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	ddf1      	ble.n	8000a0c <main+0x170>
	lcd_cmd(0x40 + 48);
 8000a28:	2070      	movs	r0, #112	; 0x70
 8000a2a:	f7ff fc57 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
 8000a32:	e00a      	b.n	8000a4a <main+0x1ae>
		lcd_char_cp(logRight[i]);
 8000a34:	f107 0208 	add.w	r2, r7, #8
 8000a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fd18 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a46:	3301      	adds	r3, #1
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
 8000a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	ddf1      	ble.n	8000a34 <main+0x198>
	lcd_cmd(0x40 + 56);
 8000a50:	2078      	movs	r0, #120	; 0x78
 8000a52:	f7ff fc43 	bl	80002dc <lcd_cmd>
	for (int i = 0; i < 8; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	643b      	str	r3, [r7, #64]	; 0x40
 8000a5a:	e009      	b.n	8000a70 <main+0x1d4>
		lcd_char_cp(logLeft[i]);
 8000a5c:	463a      	mov	r2, r7
 8000a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fd05 	bl	8000474 <lcd_char_cp>
	for (int i = 0; i < 8; i++)
 8000a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8000a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a72:	2b07      	cmp	r3, #7
 8000a74:	ddf2      	ble.n	8000a5c <main+0x1c0>

	lcd_cmd(0x80);
 8000a76:	2080      	movs	r0, #128	; 0x80
 8000a78:	f7ff fc30 	bl	80002dc <lcd_cmd>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/*menu();
		 game();*/
		gameOver();
 8000a7c:	f7ff fe6e 	bl	800075c <gameOver>
		game();
 8000a80:	f7ff fe60 	bl	8000744 <game>
		gameOver();
 8000a84:	e7fa      	b.n	8000a7c <main+0x1e0>
 8000a86:	bf00      	nop
 8000a88:	080054c8 	.word	0x080054c8
 8000a8c:	080054d0 	.word	0x080054d0
 8000a90:	080054d8 	.word	0x080054d8
 8000a94:	080054e0 	.word	0x080054e0
 8000a98:	080054e8 	.word	0x080054e8
 8000a9c:	080054f0 	.word	0x080054f0
 8000aa0:	080054f8 	.word	0x080054f8
 8000aa4:	08005500 	.word	0x08005500
 8000aa8:	20000080 	.word	0x20000080

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 f846 	bl	8004b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad2:	f002 f8ef 	bl	8002cb4 <HAL_PWREx_ControlVoltageScaling>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000adc:	f000 f9c2 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000ae0:	2318      	movs	r3, #24
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 f92f 	bl	8002d60 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000b08:	f000 f9ac 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fcf7 	bl	8003518 <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b30:	f000 f998 	bl	8000e64 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3758      	adds	r7, #88	; 0x58
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b60:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <MX_ADC1_Init+0xe4>)
 8000b62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b70:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bbe:	4817      	ldr	r0, [pc, #92]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000bc0:	f000 fd34 	bl	800162c <HAL_ADC_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bca:	f000 f94b 	bl	8000e64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000bda:	f001 fcb5 	bl	8002548 <HAL_ADCEx_MultiModeConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000be4:	f000 f93e 	bl	8000e64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_ADC1_Init+0xe8>)
 8000bea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bec:	2306      	movs	r3, #6
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bf4:	237f      	movs	r3, #127	; 0x7f
 8000bf6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_ADC1_Init+0xe0>)
 8000c06:	f001 f801 	bl	8001c0c <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000c10:	f000 f928 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000080 	.word	0x20000080
 8000c20:	50040000 	.word	0x50040000
 8000c24:	14f00020 	.word	0x14f00020

08000c28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b092      	sub	sp, #72	; 0x48
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	222c      	movs	r2, #44	; 0x2c
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 ff7f 	bl	8004b4c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c4e:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c50:	4a3c      	ldr	r2, [pc, #240]	; (8000d44 <MX_RTC_Init+0x11c>)
 8000c52:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c5c:	227f      	movs	r2, #127	; 0x7f
 8000c5e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c7e:	4830      	ldr	r0, [pc, #192]	; (8000d40 <MX_RTC_Init+0x118>)
 8000c80:	f003 faf2 	bl	8004268 <HAL_RTC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000c8a:	f000 f8eb 	bl	8000e64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ca8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cac:	2201      	movs	r2, #1
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4823      	ldr	r0, [pc, #140]	; (8000d40 <MX_RTC_Init+0x118>)
 8000cb2:	f003 fb61 	bl	8004378 <HAL_RTC_SetTime>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000cbc:	f000 f8d2 	bl	8000e64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4817      	ldr	r0, [pc, #92]	; (8000d40 <MX_RTC_Init+0x118>)
 8000ce2:	f003 fc42 	bl	800456a <HAL_RTC_SetDate>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000cec:	f000 f8ba 	bl	8000e64 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2201      	movs	r2, #1
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_RTC_Init+0x118>)
 8000d28:	f003 fcf3 	bl	8004712 <HAL_RTC_SetAlarm>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000d32:	f000 f897 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3748      	adds	r7, #72	; 0x48
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000e4 	.word	0x200000e4
 8000d44:	40002800 	.word	0x40002800

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a3d      	ldr	r2, [pc, #244]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a37      	ldr	r2, [pc, #220]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <MX_GPIO_Init+0x110>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000dac:	482b      	ldr	r0, [pc, #172]	; (8000e5c <MX_GPIO_Init+0x114>)
 8000dae:	f001 ff37 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	482a      	ldr	r0, [pc, #168]	; (8000e60 <MX_GPIO_Init+0x118>)
 8000db8:	f001 ff32 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f001 ff2b 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	481f      	ldr	r0, [pc, #124]	; (8000e60 <MX_GPIO_Init+0x118>)
 8000de2:	f001 fd73 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000de6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_GPIO_Init+0x114>)
 8000e00:	f001 fd64 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_GPIO_Init+0x118>)
 8000e1c:	f001 fd56 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8000e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f001 fd46 	bl	80028cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2028      	movs	r0, #40	; 0x28
 8000e46:	f001 fd0a 	bl	800285e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e4a:	2028      	movs	r0, #40	; 0x28
 8000e4c:	f001 fd23 	bl	8002896 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	48000800 	.word	0x48000800

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6613      	str	r3, [r2, #96]	; 0x60
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ac      	sub	sp, #176	; 0xb0
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2288      	movs	r2, #136	; 0x88
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fe37 	bl	8004b4c <memset>
  if(hadc->Instance==ADC1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_ADC_MspInit+0xc8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d147      	bne.n	8000f78 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ee8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000eee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000efe:	2308      	movs	r3, #8
 8000f00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fce9 	bl	80038f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f24:	f7ff ff9e 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LCD_Pin;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f5e:	230b      	movs	r3, #11
 8000f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f001 fcaa 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	37b0      	adds	r7, #176	; 0xb0
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	50040000 	.word	0x50040000
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0a4      	sub	sp, #144	; 0x90
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2288      	movs	r2, #136	; 0x88
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fdd7 	bl	8004b4c <memset>
  if(hrtc->Instance==RTC)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_RTC_MspInit+0x5c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d118      	bne.n	8000fda <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fc98 	bl	80038f0 <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fc6:	f7ff ff4d 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_RTC_MspInit+0x60>)
 8000fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_RTC_MspInit+0x60>)
 8000fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3790      	adds	r7, #144	; 0x90
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40002800 	.word	0x40002800
 8000fe8:	40021000 	.word	0x40021000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f8d0 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001044:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001048:	f001 fe02 	bl	8002c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f003 fd6c 	bl	8004b5c <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20018000 	.word	0x20018000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20000120 	.word	0x20000120
 80010b8:	20000270 	.word	0x20000270

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e4:	f7ff ffea 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	; (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	; (800112c <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f003 fd2b 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fbc3 	bl	800089c <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001124:	08005584 	.word	0x08005584
  ldr r2, =_sbss
 8001128:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800112c:	20000270 	.word	0x20000270

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>

08001132 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f001 fb83 	bl	8002848 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001142:	200f      	movs	r0, #15
 8001144:	f000 f80e 	bl	8001164 <HAL_InitTick>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	e001      	b.n	8001158 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001154:	f7ff fe8c 	bl	8000e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d023      	beq.n	80011c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_InitTick+0x70>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_InitTick+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fb8f 	bl	80028b2 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d809      	bhi.n	80011b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f001 fb59 	bl	800285e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_InitTick+0x74>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e001      	b.n	80011c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000124 	.word	0x20000124

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000124 	.word	0x20000124

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3360      	adds	r3, #96	; 0x60
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <LL_ADC_SetOffset+0x44>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	03fff000 	.word	0x03fff000

08001314 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3360      	adds	r3, #96	; 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3360      	adds	r3, #96	; 0x60
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3330      	adds	r3, #48	; 0x30
 80013ac:	461a      	mov	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	211f      	movs	r1, #31
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0e9b      	lsrs	r3, r3, #26
 80013d4:	f003 011f 	and.w	r1, r3, #31
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	431a      	orrs	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3314      	adds	r3, #20
 8001404:	461a      	mov	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	0e5b      	lsrs	r3, r3, #25
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0d1b      	lsrs	r3, r3, #20
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	2107      	movs	r1, #7
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0d1b      	lsrs	r3, r3, #20
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0318 	and.w	r3, r3, #24
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001470:	40d9      	lsrs	r1, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	400b      	ands	r3, r1
 8001476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147a:	431a      	orrs	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	0007ffff 	.word	0x0007ffff

08001494 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 031f 	and.w	r3, r3, #31
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6093      	str	r3, [r2, #8]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001504:	d101      	bne.n	800150a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800152c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001554:	d101      	bne.n	800155a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_IsEnabled+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_IsEnabled+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ca:	f043 0204 	orr.w	r2, r3, #4
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d101      	bne.n	80015f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b08      	cmp	r3, #8
 8001616:	d101      	bne.n	800161c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e130      	b.n	80018a8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fc2f 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff3f 	bl	80014f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff25 	bl	80014cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff5a 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff3e 	bl	8001518 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800169c:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <HAL_ADC_Init+0x284>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	4a84      	ldr	r2, [pc, #528]	; (80018b4 <HAL_ADC_Init+0x288>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	3301      	adds	r3, #1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff3c 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10d      	bne.n	80016ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f043 0210 	orr.w	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff75 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 80016f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80c9 	bne.w	8001896 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 80c5 	bne.w	8001896 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001714:	f043 0202 	orr.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff35 	bl	8001590 <LL_ADC_IsEnabled>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d115      	bne.n	8001758 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800172c:	4862      	ldr	r0, [pc, #392]	; (80018b8 <HAL_ADC_Init+0x28c>)
 800172e:	f7ff ff2f 	bl	8001590 <LL_ADC_IsEnabled>
 8001732:	4604      	mov	r4, r0
 8001734:	4861      	ldr	r0, [pc, #388]	; (80018bc <HAL_ADC_Init+0x290>)
 8001736:	f7ff ff2b 	bl	8001590 <LL_ADC_IsEnabled>
 800173a:	4603      	mov	r3, r0
 800173c:	431c      	orrs	r4, r3
 800173e:	4860      	ldr	r0, [pc, #384]	; (80018c0 <HAL_ADC_Init+0x294>)
 8001740:	f7ff ff26 	bl	8001590 <LL_ADC_IsEnabled>
 8001744:	4603      	mov	r3, r0
 8001746:	4323      	orrs	r3, r4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4619      	mov	r1, r3
 8001752:	485c      	ldr	r0, [pc, #368]	; (80018c4 <HAL_ADC_Init+0x298>)
 8001754:	f7ff fd86 	bl	8001264 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7e5b      	ldrb	r3, [r3, #25]
 800175c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001762:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001768:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800176e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001776:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d106      	bne.n	8001794 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	3b01      	subs	r3, #1
 800178c:	045b      	lsls	r3, r3, #17
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <HAL_ADC_Init+0x29c>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff1b 	bl	8001604 <LL_ADC_INJ_IsConversionOngoing>
 80017ce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d13d      	bne.n	8001852 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d13a      	bne.n	8001852 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f8:	f023 0302 	bic.w	r3, r3, #2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	69b9      	ldr	r1, [r7, #24]
 8001802:	430b      	orrs	r3, r1
 8001804:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800180c:	2b01      	cmp	r3, #1
 800180e:	d118      	bne.n	8001842 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800182c:	4311      	orrs	r1, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001832:	430a      	orrs	r2, r1
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	e007      	b.n	8001852 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10c      	bne.n	8001874 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f023 010f 	bic.w	r1, r3, #15
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
 8001872:	e007      	b.n	8001884 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020f 	bic.w	r2, r2, #15
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	f023 0303 	bic.w	r3, r3, #3
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	655a      	str	r2, [r3, #84]	; 0x54
 8001894:	e007      	b.n	80018a6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3724      	adds	r7, #36	; 0x24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	20000000 	.word	0x20000000
 80018b4:	053e2d63 	.word	0x053e2d63
 80018b8:	50040000 	.word	0x50040000
 80018bc:	50040100 	.word	0x50040100
 80018c0:	50040200 	.word	0x50040200
 80018c4:	50040300 	.word	0x50040300
 80018c8:	fff0c007 	.word	0xfff0c007

080018cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d4:	4857      	ldr	r0, [pc, #348]	; (8001a34 <HAL_ADC_Start+0x168>)
 80018d6:	f7ff fddd 	bl	8001494 <LL_ADC_GetMultimode>
 80018da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe7c 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 809c 	bne.w	8001a26 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_Start+0x30>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e097      	b.n	8001a2c <HAL_ADC_Start+0x160>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fd73 	bl	80023f0 <ADC_Enable>
 800190a:	4603      	mov	r3, r0
 800190c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 8083 	bne.w	8001a1c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a42      	ldr	r2, [pc, #264]	; (8001a38 <HAL_ADC_Start+0x16c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d002      	beq.n	800193a <HAL_ADC_Start+0x6e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e000      	b.n	800193c <HAL_ADC_Start+0x70>
 800193a:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <HAL_ADC_Start+0x170>)
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	4293      	cmp	r3, r2
 8001942:	d002      	beq.n	800194a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800195e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001962:	d106      	bne.n	8001972 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	f023 0206 	bic.w	r2, r3, #6
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	659a      	str	r2, [r3, #88]	; 0x58
 8001970:	e002      	b.n	8001978 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	221c      	movs	r2, #28
 800197e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <HAL_ADC_Start+0x16c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d002      	beq.n	8001998 <HAL_ADC_Start+0xcc>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	e000      	b.n	800199a <HAL_ADC_Start+0xce>
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_ADC_Start+0x170>)
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	4293      	cmp	r3, r2
 80019a0:	d008      	beq.n	80019b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d002      	beq.n	80019b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	2b09      	cmp	r3, #9
 80019b2:	d114      	bne.n	80019de <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fded 	bl	80015b6 <LL_ADC_REG_StartConversion>
 80019dc:	e025      	b.n	8001a2a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <HAL_ADC_Start+0x16c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d002      	beq.n	80019fa <HAL_ADC_Start+0x12e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e000      	b.n	80019fc <HAL_ADC_Start+0x130>
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_ADC_Start+0x170>)
 80019fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00f      	beq.n	8001a2a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
 8001a1a:	e006      	b.n	8001a2a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a24:	e001      	b.n	8001a2a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
 8001a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	50040300 	.word	0x50040300
 8001a38:	50040100 	.word	0x50040100
 8001a3c:	50040000 	.word	0x50040000

08001a40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a4a:	4866      	ldr	r0, [pc, #408]	; (8001be4 <HAL_ADC_PollForConversion+0x1a4>)
 8001a4c:	f7ff fd22 	bl	8001494 <LL_ADC_GetMultimode>
 8001a50:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d102      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e02a      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d002      	beq.n	8001a72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	d111      	bne.n	8001a96 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0a4      	b.n	8001bda <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a90:	2304      	movs	r3, #4
 8001a92:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a94:	e00f      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a96:	4853      	ldr	r0, [pc, #332]	; (8001be4 <HAL_ADC_PollForConversion+0x1a4>)
 8001a98:	f7ff fd0a 	bl	80014b0 <LL_ADC_GetMultiDMATransfer>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e093      	b.n	8001bda <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ab6:	f7ff fba5 	bl	8001204 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001abc:	e021      	b.n	8001b02 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d01d      	beq.n	8001b02 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ac6:	f7ff fb9d 	bl	8001204 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d302      	bcc.n	8001adc <HAL_ADC_PollForConversion+0x9c>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d112      	bne.n	8001b02 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10b      	bne.n	8001b02 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e06b      	b.n	8001bda <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0d6      	beq.n	8001abe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fc28 	bl	8001376 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01c      	beq.n	8001b66 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e5b      	ldrb	r3, [r3, #25]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d118      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d111      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <HAL_ADC_PollForConversion+0x1a8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d002      	beq.n	8001b76 <HAL_ADC_PollForConversion+0x136>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	e000      	b.n	8001b78 <HAL_ADC_PollForConversion+0x138>
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_ADC_PollForConversion+0x1ac>)
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d008      	beq.n	8001b92 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d002      	beq.n	8001b92 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b09      	cmp	r3, #9
 8001b90:	d104      	bne.n	8001b9c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	e00c      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_ADC_PollForConversion+0x1a8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d002      	beq.n	8001bac <HAL_ADC_PollForConversion+0x16c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	e000      	b.n	8001bae <HAL_ADC_PollForConversion+0x16e>
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_ADC_PollForConversion+0x1ac>)
 8001bae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d104      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e008      	b.n	8001bd8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d103      	bne.n	8001bd8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	50040300 	.word	0x50040300
 8001be8:	50040100 	.word	0x50040100
 8001bec:	50040000 	.word	0x50040000

08001bf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0b6      	sub	sp, #216	; 0xd8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x22>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e3c9      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x7b6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fccf 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 83aa 	bne.w	800239c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d824      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	3b02      	subs	r3, #2
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d81b      	bhi.n	8001c9a <HAL_ADC_ConfigChannel+0x8e>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <HAL_ADC_ConfigChannel+0x5c>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c81 	.word	0x08001c81
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c91 	.word	0x08001c91
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001c78:	230c      	movs	r3, #12
 8001c7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c7e:	e010      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001c80:	2312      	movs	r3, #18
 8001c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c86:	e00c      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001c88:	2318      	movs	r3, #24
 8001c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c8e:	e008      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c98:	e003      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ca0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001cb0:	f7ff fb74 	bl	800139c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fc90 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 8001cbe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fc9c 	bl	8001604 <LL_ADC_INJ_IsConversionOngoing>
 8001ccc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 81a4 	bne.w	8002022 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 819f 	bne.w	8002022 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6819      	ldr	r1, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f7ff fb7f 	bl	80013f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d00a      	beq.n	8001d2e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6919      	ldr	r1, [r3, #16]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d28:	f7ff fad0 	bl	80012cc <LL_ADC_SetOffset>
 8001d2c:	e179      	b.n	8002022 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff faed 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10a      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x14e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fae2 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	0e9b      	lsrs	r3, r3, #26
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	e01e      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x18c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fad7 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e004      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x1a4>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	e018      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1d6>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001dcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	e004      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d106      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff faa6 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa8a 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x214>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fa7f 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	f003 021f 	and.w	r2, r3, #31
 8001e1e:	e01e      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x252>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fa74 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e004      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x26a>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0e9b      	lsrs	r3, r3, #26
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	e018      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x29c>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e004      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d106      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fa43 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fa27 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x2da>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fa1c 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	0e9b      	lsrs	r3, r3, #26
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	e01e      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x318>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2102      	movs	r1, #2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fa11 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001f14:	2320      	movs	r3, #32
 8001f16:	e004      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x330>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	e014      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x35a>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e004      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2102      	movs	r1, #2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f9e4 	bl	8001340 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f9c8 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x398>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2103      	movs	r1, #3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f9bd 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	f003 021f 	and.w	r2, r3, #31
 8001fa2:	e017      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x3c8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2103      	movs	r1, #3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f9b2 	bl	8001314 <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fbe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x3e0>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0e9b      	lsrs	r3, r3, #26
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	e011      	b.n	8002010 <HAL_ADC_ConfigChannel+0x404>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002010:	429a      	cmp	r2, r3
 8002012:	d106      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	2103      	movs	r1, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f98f 	bl	8001340 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fab2 	bl	8001590 <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 8140 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	461a      	mov	r2, r3
 8002042:	f7ff fa03 	bl	800144c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4a8f      	ldr	r2, [pc, #572]	; (8002288 <HAL_ADC_ConfigChannel+0x67c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	f040 8131 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10b      	bne.n	800207a <HAL_ADC_ConfigChannel+0x46e>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	3301      	adds	r3, #1
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	2b09      	cmp	r3, #9
 8002070:	bf94      	ite	ls
 8002072:	2301      	movls	r3, #1
 8002074:	2300      	movhi	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	e019      	b.n	80020ae <HAL_ADC_ConfigChannel+0x4a2>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800208c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e003      	b.n	800209e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	bf94      	ite	ls
 80020a8:	2301      	movls	r3, #1
 80020aa:	2300      	movhi	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d079      	beq.n	80021a6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d107      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x4c2>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	3301      	adds	r3, #1
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020cc:	e015      	b.n	80020fa <HAL_ADC_ConfigChannel+0x4ee>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020de:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80020e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e003      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80020ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	069b      	lsls	r3, r3, #26
 80020f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_ADC_ConfigChannel+0x50e>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0e9b      	lsrs	r3, r3, #26
 800210c:	3301      	adds	r3, #1
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	e017      	b.n	800214a <HAL_ADC_ConfigChannel+0x53e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800212c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e003      	b.n	800213e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	ea42 0103 	orr.w	r1, r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x564>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	051b      	lsls	r3, r3, #20
 800216e:	e018      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x596>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e003      	b.n	8002194 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a2:	430b      	orrs	r3, r1
 80021a4:	e081      	b.n	80022aa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x5b6>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	3301      	adds	r3, #1
 80021ba:	069b      	lsls	r3, r3, #26
 80021bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c0:	e015      	b.n	80021ee <HAL_ADC_ConfigChannel+0x5e2>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ADC_ConfigChannel+0x602>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	3301      	adds	r3, #1
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	e017      	b.n	800223e <HAL_ADC_ConfigChannel+0x632>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61bb      	str	r3, [r7, #24]
  return result;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	ea42 0103 	orr.w	r1, r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_ADC_ConfigChannel+0x65e>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	3301      	adds	r3, #1
 8002256:	f003 021f 	and.w	r2, r3, #31
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3b1e      	subs	r3, #30
 8002262:	051b      	lsls	r3, r3, #20
 8002264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002268:	e01e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x69c>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	60fb      	str	r3, [r7, #12]
  return result;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	e006      	b.n	8002294 <HAL_ADC_ConfigChannel+0x688>
 8002286:	bf00      	nop
 8002288:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	051b      	lsls	r3, r3, #20
 80022a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7ff f8a0 	bl	80013f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_ADC_ConfigChannel+0x7c0>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d07a      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c0:	4843      	ldr	r0, [pc, #268]	; (80023d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80022c2:	f7fe fff5 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 80022c6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a41      	ldr	r2, [pc, #260]	; (80023d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d12c      	bne.n	800232e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d126      	bne.n	800232e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <HAL_ADC_ConfigChannel+0x7cc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0x6e8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_ADC_ConfigChannel+0x7d0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d15d      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022fc:	4619      	mov	r1, r3
 80022fe:	4834      	ldr	r0, [pc, #208]	; (80023d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002300:	f7fe ffc3 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	4a36      	ldr	r2, [pc, #216]	; (80023e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800231e:	e002      	b.n	8002326 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3b01      	subs	r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f9      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800232c:	e040      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2d      	ldr	r2, [pc, #180]	; (80023e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d118      	bne.n	800236a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d112      	bne.n	800236a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_ADC_ConfigChannel+0x74c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_ADC_ConfigChannel+0x7d0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d12d      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800235c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002360:	4619      	mov	r1, r3
 8002362:	481b      	ldr	r0, [pc, #108]	; (80023d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002364:	f7fe ff91 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002368:	e024      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_ADC_ConfigChannel+0x7e0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d120      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11a      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d115      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800238e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002392:	4619      	mov	r1, r3
 8002394:	480e      	ldr	r0, [pc, #56]	; (80023d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002396:	f7fe ff78 	bl	800128a <LL_ADC_SetCommonPathInternalCh>
 800239a:	e00c      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023ae:	e002      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	37d8      	adds	r7, #216	; 0xd8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	80080000 	.word	0x80080000
 80023d0:	50040300 	.word	0x50040300
 80023d4:	c7520000 	.word	0xc7520000
 80023d8:	50040000 	.word	0x50040000
 80023dc:	50040200 	.word	0x50040200
 80023e0:	20000000 	.word	0x20000000
 80023e4:	053e2d63 	.word	0x053e2d63
 80023e8:	cb840000 	.word	0xcb840000
 80023ec:	80000001 	.word	0x80000001

080023f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f8c5 	bl	8001590 <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d169      	bne.n	80024e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <ADC_Enable+0xfc>)
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e055      	b.n	80024e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f894 	bl	8001568 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002440:	482b      	ldr	r0, [pc, #172]	; (80024f0 <ADC_Enable+0x100>)
 8002442:	f7fe ff35 	bl	80012b0 <LL_ADC_GetCommonPathInternalCh>
 8002446:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <ADC_Enable+0x104>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <ADC_Enable+0x108>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800246a:	e002      	b.n	8002472 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	3b01      	subs	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f9      	bne.n	800246c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002478:	f7fe fec4 	bl	8001204 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800247e:	e028      	b.n	80024d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f883 	bl	8001590 <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f867 	bl	8001568 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800249a:	f7fe feb3 	bl	8001204 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d1cf      	bne.n	8002480 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	8000003f 	.word	0x8000003f
 80024f0:	50040300 	.word	0x50040300
 80024f4:	20000000 	.word	0x20000000
 80024f8:	053e2d63 	.word	0x053e2d63

080024fc <LL_ADC_IsEnabled>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <LL_ADC_IsEnabled+0x18>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_ADC_IsEnabled+0x1a>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_REG_IsConversionOngoing>:
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d101      	bne.n	800253a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b09f      	sub	sp, #124	; 0x7c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002562:	2302      	movs	r3, #2
 8002564:	e093      	b.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800256e:	2300      	movs	r3, #0
 8002570:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002572:	2300      	movs	r3, #0
 8002574:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a47      	ldr	r2, [pc, #284]	; (8002698 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e001      	b.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e072      	b.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ffb9 	bl	8002522 <LL_ADC_REG_IsConversionOngoing>
 80025b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffb3 	bl	8002522 <LL_ADC_REG_IsConversionOngoing>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d154      	bne.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d151      	bne.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80025ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02c      	beq.n	800262e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025e6:	035b      	lsls	r3, r3, #13
 80025e8:	430b      	orrs	r3, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f0:	4829      	ldr	r0, [pc, #164]	; (8002698 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025f2:	f7ff ff83 	bl	80024fc <LL_ADC_IsEnabled>
 80025f6:	4604      	mov	r4, r0
 80025f8:	4828      	ldr	r0, [pc, #160]	; (800269c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025fa:	f7ff ff7f 	bl	80024fc <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	431c      	orrs	r4, r3
 8002602:	4828      	ldr	r0, [pc, #160]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002604:	f7ff ff7a 	bl	80024fc <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	4323      	orrs	r3, r4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d137      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002618:	f023 030f 	bic.w	r3, r3, #15
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	6811      	ldr	r1, [r2, #0]
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	6892      	ldr	r2, [r2, #8]
 8002624:	430a      	orrs	r2, r1
 8002626:	431a      	orrs	r2, r3
 8002628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262c:	e028      	b.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800262e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002638:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800263a:	4817      	ldr	r0, [pc, #92]	; (8002698 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800263c:	f7ff ff5e 	bl	80024fc <LL_ADC_IsEnabled>
 8002640:	4604      	mov	r4, r0
 8002642:	4816      	ldr	r0, [pc, #88]	; (800269c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002644:	f7ff ff5a 	bl	80024fc <LL_ADC_IsEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	431c      	orrs	r4, r3
 800264c:	4815      	ldr	r0, [pc, #84]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800264e:	f7ff ff55 	bl	80024fc <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	4323      	orrs	r3, r4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d112      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002662:	f023 030f 	bic.w	r3, r3, #15
 8002666:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002668:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800266a:	e009      	b.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800267e:	e000      	b.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002680:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800268a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800268e:	4618      	mov	r0, r3
 8002690:	377c      	adds	r7, #124	; 0x7c
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}
 8002696:	bf00      	nop
 8002698:	50040000 	.word	0x50040000
 800269c:	50040100 	.word	0x50040100
 80026a0:	50040300 	.word	0x50040300
 80026a4:	50040200 	.word	0x50040200

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <__NVIC_EnableIRQ+0x38>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002814:	d301      	bcc.n	800281a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002816:	2301      	movs	r3, #1
 8002818:	e00f      	b.n	800283a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <SysTick_Config+0x40>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002822:	210f      	movs	r1, #15
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f7ff ff8e 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <SysTick_Config+0x40>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <SysTick_Config+0x40>)
 8002834:	2207      	movs	r2, #7
 8002836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000e010 	.word	0xe000e010

08002848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff29 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002870:	f7ff ff3e 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f7ff ff8e 	bl	800279c <NVIC_EncodePriority>
 8002880:	4602      	mov	r2, r0
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <__NVIC_SetPriority>
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff31 	bl	800270c <__NVIC_EnableIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffa2 	bl	8002804 <SysTick_Config>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028da:	e17f      	b.n	8002bdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8171 	beq.w	8002bd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d005      	beq.n	800290c <HAL_GPIO_Init+0x40>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002942:	2201      	movs	r2, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b03      	cmp	r3, #3
 8002978:	d118      	bne.n	80029ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	6939      	ldr	r1, [r7, #16]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80ac 	beq.w	8002bd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <HAL_GPIO_Init+0x330>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a82:	4a5e      	ldr	r2, [pc, #376]	; (8002bfc <HAL_GPIO_Init+0x330>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6613      	str	r3, [r2, #96]	; 0x60
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_GPIO_Init+0x330>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a96:	4a5a      	ldr	r2, [pc, #360]	; (8002c00 <HAL_GPIO_Init+0x334>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x242>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4f      	ldr	r2, [pc, #316]	; (8002c04 <HAL_GPIO_Init+0x338>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x23e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4e      	ldr	r2, [pc, #312]	; (8002c08 <HAL_GPIO_Init+0x33c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x23a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4d      	ldr	r2, [pc, #308]	; (8002c0c <HAL_GPIO_Init+0x340>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x236>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4c      	ldr	r2, [pc, #304]	; (8002c10 <HAL_GPIO_Init+0x344>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x232>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4b      	ldr	r2, [pc, #300]	; (8002c14 <HAL_GPIO_Init+0x348>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x22e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_GPIO_Init+0x34c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x22a>
 8002af2:	2306      	movs	r3, #6
 8002af4:	e00c      	b.n	8002b10 <HAL_GPIO_Init+0x244>
 8002af6:	2307      	movs	r3, #7
 8002af8:	e00a      	b.n	8002b10 <HAL_GPIO_Init+0x244>
 8002afa:	2305      	movs	r3, #5
 8002afc:	e008      	b.n	8002b10 <HAL_GPIO_Init+0x244>
 8002afe:	2304      	movs	r3, #4
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x244>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e004      	b.n	8002b10 <HAL_GPIO_Init+0x244>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_Init+0x244>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_Init+0x244>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	f002 0203 	and.w	r2, r2, #3
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	4093      	lsls	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b20:	4937      	ldr	r1, [pc, #220]	; (8002c00 <HAL_GPIO_Init+0x334>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b52:	4a32      	ldr	r2, [pc, #200]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b58:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b82:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd0:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <HAL_GPIO_Init+0x350>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f47f ae78 	bne.w	80028dc <HAL_GPIO_Init+0x10>
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010000 	.word	0x40010000
 8002c04:	48000400 	.word	0x48000400
 8002c08:	48000800 	.word	0x48000800
 8002c0c:	48000c00 	.word	0x48000c00
 8002c10:	48001000 	.word	0x48001000
 8002c14:	48001400 	.word	0x48001400
 8002c18:	48001800 	.word	0x48001800
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f806 	bl	8002c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40010400 	.word	0x40010400

08002c80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc2:	d130      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d038      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cda:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2232      	movs	r2, #50	; 0x32
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	e002      	b.n	8002d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d102      	bne.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f2      	bne.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d110      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e00f      	b.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d007      	beq.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	431bde83 	.word	0x431bde83

08002d60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e3ca      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b97      	ldr	r3, [pc, #604]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7c:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80e4 	beq.w	8002f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_RCC_OscConfig+0x4a>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	f040 808b 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 8087 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002daa:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e3a2      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <HAL_RCC_OscConfig+0x7c>
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dda:	e005      	b.n	8002de8 <HAL_RCC_OscConfig+0x88>
 8002ddc:	4b7c      	ldr	r3, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d223      	bcs.n	8002e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fd1d 	bl	8003830 <RCC_SetFlashLatencyFromMSIRange>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e383      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e00:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e06:	f043 0308 	orr.w	r3, r3, #8
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	496d      	ldr	r1, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1e:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	4968      	ldr	r1, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
 8002e32:	e025      	b.n	8002e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4960      	ldr	r1, [pc, #384]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	495b      	ldr	r1, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fcdd 	bl	8003830 <RCC_SetFlashLatencyFromMSIRange>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e343      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e80:	f000 fc4a 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	4950      	ldr	r1, [pc, #320]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_RCC_OscConfig+0x278>)
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea0:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f95d 	bl	8001164 <HAL_InitTick>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d052      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	e327      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d032      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f99a 	bl	8001204 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed4:	f7fe f996 	bl	8001204 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e310      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4931      	ldr	r1, [pc, #196]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	492c      	ldr	r1, [pc, #176]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	e01a      	b.n	8002f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f32:	f7fe f967 	bl	8001204 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3a:	f7fe f963 	bl	8001204 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e2dd      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x1da>
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d074      	beq.n	8003052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x21a>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d10b      	bne.n	8002f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d064      	beq.n	8003050 <HAL_RCC_OscConfig+0x2f0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d160      	bne.n	8003050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e2ba      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x24a>
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e026      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x280>
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a02      	ldr	r2, [pc, #8]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x298>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08005508 	.word	0x08005508
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	20000004 	.word	0x20000004
 8002fe0:	4ba0      	ldr	r3, [pc, #640]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a9f      	ldr	r2, [pc, #636]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b9d      	ldr	r3, [pc, #628]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a9c      	ldr	r2, [pc, #624]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe f900 	bl	8001204 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe f8fc 	bl	8001204 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e276      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301a:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x2a8>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f8ec 	bl	8001204 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe f8e8 	bl	8001204 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e262      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003042:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d0>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d060      	beq.n	8003120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x310>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d119      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d116      	bne.n	800309e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003070:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x328>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e23f      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b76      	ldr	r3, [pc, #472]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	4973      	ldr	r1, [pc, #460]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800309c:	e040      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d023      	beq.n	80030ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe f8a7 	bl	8001204 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fe f8a3 	bl	8001204 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e21d      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030cc:	4b65      	ldr	r3, [pc, #404]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b62      	ldr	r3, [pc, #392]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	495f      	ldr	r1, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e018      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80030f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe f883 	bl	8001204 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe f87f 	bl	8001204 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1f9      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01c      	beq.n	800316e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	4a4a      	ldr	r2, [pc, #296]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe f85e 	bl	8001204 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314c:	f7fe f85a 	bl	8001204 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1d4      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCC_OscConfig+0x3ec>
 800316c:	e01b      	b.n	80031a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003174:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe f841 	bl	8001204 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe f83d 	bl	8001204 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1b7      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ef      	bne.n	8003186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a6 	beq.w	8003300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f8:	f7fe f804 	bl	8001204 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fe f800 	bl	8001204 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e17a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x508>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_RCC_OscConfig+0x4d8>
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003236:	e029      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d115      	bne.n	800326c <HAL_RCC_OscConfig+0x50c>
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_RCC_OscConfig+0x504>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x52c>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
 800326c:	4b9c      	ldr	r3, [pc, #624]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a9b      	ldr	r2, [pc, #620]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327c:	4b98      	ldr	r3, [pc, #608]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a97      	ldr	r2, [pc, #604]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d016      	beq.n	80032c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fd ffb6 	bl	8001204 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fd ffb2 	bl	8001204 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e12a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ed      	beq.n	800329c <HAL_RCC_OscConfig+0x53c>
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fd ff9f 	bl	8001204 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd ff9b 	bl	8001204 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e113      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1ed      	bne.n	80032ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80fe 	beq.w	8003506 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2b02      	cmp	r3, #2
 8003310:	f040 80d0 	bne.w	80034b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003314:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	429a      	cmp	r2, r3
 8003326:	d130      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	3b01      	subs	r3, #1
 8003334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d127      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d11f      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003354:	2a07      	cmp	r2, #7
 8003356:	bf14      	ite	ne
 8003358:	2201      	movne	r2, #1
 800335a:	2200      	moveq	r2, #0
 800335c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d109      	bne.n	800338a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d06e      	beq.n	8003468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d069      	beq.n	8003464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0ad      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a4b      	ldr	r2, [pc, #300]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b8:	f7fd ff24 	bl	8001204 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd ff20 	bl	8001204 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e09a      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033de:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <HAL_RCC_OscConfig+0x784>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f8:	0212      	lsls	r2, r2, #8
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003400:	0852      	lsrs	r2, r2, #1
 8003402:	3a01      	subs	r2, #1
 8003404:	0552      	lsls	r2, r2, #21
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0652      	lsls	r2, r2, #25
 8003412:	4311      	orrs	r1, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003418:	0912      	lsrs	r2, r2, #4
 800341a:	0452      	lsls	r2, r2, #17
 800341c:	430a      	orrs	r2, r1
 800341e:	4930      	ldr	r1, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003424:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800343c:	f7fd fee2 	bl	8001204 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fd fede 	bl	8001204 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e058      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003462:	e050      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e04f      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d148      	bne.n	8003506 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800348c:	f7fd feba 	bl	8001204 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd feb6 	bl	8001204 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e030      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x734>
 80034b2:	e028      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <HAL_RCC_OscConfig+0x780>)
 80034c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd fe9d 	bl	8001204 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034cc:	e00c      	b.n	80034e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fd fe99 	bl	8001204 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d905      	bls.n	80034e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e013      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ec      	bne.n	80034ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4905      	ldr	r1, [pc, #20]	; (8003510 <HAL_RCC_OscConfig+0x7b0>)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x7b4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
 8003500:	e001      	b.n	8003506 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	feeefffc 	.word	0xfeeefffc

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0e7      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b75      	ldr	r3, [pc, #468]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4970      	ldr	r1, [pc, #448]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b6e      	ldr	r3, [pc, #440]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cf      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003574:	429a      	cmp	r2, r3
 8003576:	d908      	bls.n	800358a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4960      	ldr	r1, [pc, #384]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d04c      	beq.n	8003630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d121      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0a6      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d115      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09a      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ce:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e086      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b46      	ldr	r3, [pc, #280]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4943      	ldr	r1, [pc, #268]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003600:	f7fd fe00 	bl	8001204 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fd fdfc 	bl	8001204 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e06e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003648:	429a      	cmp	r2, r3
 800364a:	d208      	bcs.n	800365e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	492b      	ldr	r1, [pc, #172]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d210      	bcs.n	800368e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 0207 	bic.w	r2, r3, #7
 8003674:	4923      	ldr	r1, [pc, #140]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e036      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4918      	ldr	r1, [pc, #96]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4910      	ldr	r1, [pc, #64]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036cc:	f000 f824 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	490b      	ldr	r1, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1f4>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1fc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fd37 	bl	8001164 <HAL_InitTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036fa:	7afb      	ldrb	r3, [r7, #11]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	08005508 	.word	0x08005508
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d121      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11e      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e005      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003768:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d102      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e004      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 800379e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d134      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0xa6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0xac>
 80037bc:	e005      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c0:	617b      	str	r3, [r7, #20]
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 80037c6:	617b      	str	r3, [r7, #20]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	3301      	adds	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	fb03 f202 	mul.w	r2, r3, r2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	0e5b      	lsrs	r3, r3, #25
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	3301      	adds	r3, #1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003810:	69bb      	ldr	r3, [r7, #24]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	08005518 	.word	0x08005518
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003848:	f7ff fa26 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 800384c:	6178      	str	r0, [r7, #20]
 800384e:	e014      	b.n	800387a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	6593      	str	r3, [r2, #88]	; 0x58
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003868:	f7ff fa16 	bl	8002c98 <HAL_PWREx_GetVoltageRange>
 800386c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003878:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003880:	d10b      	bne.n	800389a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d919      	bls.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2ba0      	cmp	r3, #160	; 0xa0
 800388c:	d902      	bls.n	8003894 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800388e:	2302      	movs	r3, #2
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e013      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003894:	2301      	movs	r3, #1
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e010      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d902      	bls.n	80038a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038a0:	2303      	movs	r3, #3
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e00a      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d102      	bne.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ac:	2302      	movs	r3, #2
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e004      	b.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b70      	cmp	r3, #112	; 0x70
 80038b6:	d101      	bne.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b8:	2301      	movs	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 0207 	bic.w	r2, r3, #7
 80038c4:	4909      	ldr	r1, [pc, #36]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038cc:	4b07      	ldr	r3, [pc, #28]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d001      	beq.n	80038de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40022000 	.word	0x40022000

080038f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f8:	2300      	movs	r3, #0
 80038fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038fc:	2300      	movs	r3, #0
 80038fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003908:	2b00      	cmp	r3, #0
 800390a:	d041      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003910:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003914:	d02a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003916:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800391a:	d824      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800391c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003922:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003926:	d81e      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800392c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003930:	d010      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003932:	e018      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003934:	4b86      	ldr	r3, [pc, #536]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a85      	ldr	r2, [pc, #532]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003940:	e015      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fabb 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003952:	e00c      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3320      	adds	r3, #32
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fba6 	bl	80040ac <RCCEx_PLLSAI2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003964:	e003      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	74fb      	strb	r3, [r7, #19]
      break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800396c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003974:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003982:	4973      	ldr	r1, [pc, #460]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800398a:	e001      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d041      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a4:	d02a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039aa:	d824      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b0:	d008      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b6:	d81e      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c0:	d010      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039c2:	e018      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039c4:	4b62      	ldr	r3, [pc, #392]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a61      	ldr	r2, [pc, #388]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d0:	e015      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fa73 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e2:	e00c      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3320      	adds	r3, #32
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fb5e 	bl	80040ac <RCCEx_PLLSAI2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039f4:	e003      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	74fb      	strb	r3, [r7, #19]
      break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a04:	4b52      	ldr	r3, [pc, #328]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a12:	494f      	ldr	r1, [pc, #316]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a1a:	e001      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80a0 	beq.w	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a48:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	4a40      	ldr	r2, [pc, #256]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	6593      	str	r3, [r2, #88]	; 0x58
 8003a54:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a60:	2301      	movs	r3, #1
 8003a62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a64:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3a      	ldr	r2, [pc, #232]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a70:	f7fd fbc8 	bl	8001204 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a76:	e009      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fd fbc4 	bl	8001204 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d902      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	74fb      	strb	r3, [r7, #19]
        break;
 8003a8a:	e005      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a8c:	4b31      	ldr	r3, [pc, #196]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ef      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d15c      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01f      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d019      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fd fb83 	bl	8001204 <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b00:	e00b      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fd fb7f 	bl	8001204 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d902      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	74fb      	strb	r3, [r7, #19]
            break;
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ec      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3e:	4904      	ldr	r1, [pc, #16]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b46:	e009      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
 8003b4c:	e006      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5c:	7c7b      	ldrb	r3, [r7, #17]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b62:	4b9e      	ldr	r3, [pc, #632]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	4a9d      	ldr	r2, [pc, #628]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7a:	4b98      	ldr	r3, [pc, #608]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f023 0203 	bic.w	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	4994      	ldr	r1, [pc, #592]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b9c:	4b8f      	ldr	r3, [pc, #572]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 020c 	bic.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	498c      	ldr	r1, [pc, #560]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bbe:	4b87      	ldr	r3, [pc, #540]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	4983      	ldr	r1, [pc, #524]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003be0:	4b7e      	ldr	r3, [pc, #504]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	497b      	ldr	r1, [pc, #492]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c02:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	4972      	ldr	r1, [pc, #456]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c24:	4b6d      	ldr	r3, [pc, #436]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	496a      	ldr	r1, [pc, #424]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c46:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	4961      	ldr	r1, [pc, #388]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c68:	4b5c      	ldr	r3, [pc, #368]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	4959      	ldr	r1, [pc, #356]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c8a:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	4950      	ldr	r1, [pc, #320]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cac:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	4948      	ldr	r1, [pc, #288]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cce:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	493f      	ldr	r1, [pc, #252]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d028      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfe:	4937      	ldr	r1, [pc, #220]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d10:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a31      	ldr	r2, [pc, #196]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1a:	60d3      	str	r3, [r2, #12]
 8003d1c:	e011      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d26:	d10c      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f8c8 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d4e:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	491f      	ldr	r1, [pc, #124]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d78:	60d3      	str	r3, [r2, #12]
 8003d7a:	e011      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f899 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	4908      	ldr	r1, [pc, #32]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dca:	d109      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a02      	ldr	r2, [pc, #8]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd6:	60d3      	str	r3, [r2, #12]
 8003dd8:	e014      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2101      	movs	r1, #1
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f867 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d02f      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	4928      	ldr	r1, [pc, #160]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2e:	d10d      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f844 	bl	8003ec4 <RCCEx_PLLSAI1_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d014      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	74bb      	strb	r3, [r7, #18]
 8003e4a:	e011      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3320      	adds	r3, #32
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f925 	bl	80040ac <RCCEx_PLLSAI2_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e8a:	490d      	ldr	r1, [pc, #52]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eae:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ed2:	4b75      	ldr	r3, [pc, #468]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d018      	beq.n	8003f10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0203 	and.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d10d      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ef6:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
       ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d047      	beq.n	8003f9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
 8003f0e:	e044      	b.n	8003f9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d018      	beq.n	8003f4a <RCCEx_PLLSAI1_Config+0x86>
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d825      	bhi.n	8003f68 <RCCEx_PLLSAI1_Config+0xa4>
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d002      	beq.n	8003f26 <RCCEx_PLLSAI1_Config+0x62>
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d009      	beq.n	8003f38 <RCCEx_PLLSAI1_Config+0x74>
 8003f24:	e020      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f26:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11d      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f36:	e01a      	b.n	8003f6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f38:	4b5b      	ldr	r3, [pc, #364]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d116      	bne.n	8003f72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f48:	e013      	b.n	8003f72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f4a:	4b57      	ldr	r3, [pc, #348]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10f      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f56:	4b54      	ldr	r3, [pc, #336]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f66:	e006      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6c:	e004      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f76:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f7e:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	430b      	orrs	r3, r1
 8003f94:	4944      	ldr	r1, [pc, #272]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d17d      	bne.n	800409c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fac:	f7fd f92a 	bl	8001204 <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb2:	e009      	b.n	8003fc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fb4:	f7fd f926 	bl	8001204 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d902      	bls.n	8003fc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fc6:	e005      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc8:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ef      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d160      	bne.n	800409c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d111      	bne.n	8004004 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	0211      	lsls	r1, r2, #8
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68d2      	ldr	r2, [r2, #12]
 8003ff6:	0912      	lsrs	r2, r2, #4
 8003ff8:	0452      	lsls	r2, r2, #17
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	492a      	ldr	r1, [pc, #168]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	610b      	str	r3, [r1, #16]
 8004002:	e027      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d112      	bne.n	8004030 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800400a:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004012:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	0211      	lsls	r1, r2, #8
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6912      	ldr	r2, [r2, #16]
 8004020:	0852      	lsrs	r2, r2, #1
 8004022:	3a01      	subs	r2, #1
 8004024:	0552      	lsls	r2, r2, #21
 8004026:	430a      	orrs	r2, r1
 8004028:	491f      	ldr	r1, [pc, #124]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	610b      	str	r3, [r1, #16]
 800402e:	e011      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004038:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6892      	ldr	r2, [r2, #8]
 8004040:	0211      	lsls	r1, r2, #8
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6952      	ldr	r2, [r2, #20]
 8004046:	0852      	lsrs	r2, r2, #1
 8004048:	3a01      	subs	r2, #1
 800404a:	0652      	lsls	r2, r2, #25
 800404c:	430a      	orrs	r2, r1
 800404e:	4916      	ldr	r1, [pc, #88]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004054:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800405e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd f8d0 	bl	8001204 <HAL_GetTick>
 8004064:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004066:	e009      	b.n	800407c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004068:	f7fd f8cc 	bl	8001204 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d902      	bls.n	800407c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	73fb      	strb	r3, [r7, #15]
          break;
 800407a:	e005      	b.n	8004088 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ef      	beq.n	8004068 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4904      	ldr	r1, [pc, #16]	; (80040a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000

080040ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ba:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0203 	and.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d10d      	bne.n	80040f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
       ||
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040de:	4b61      	ldr	r3, [pc, #388]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
       ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d047      	beq.n	8004182 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e044      	b.n	8004182 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d018      	beq.n	8004132 <RCCEx_PLLSAI2_Config+0x86>
 8004100:	2b03      	cmp	r3, #3
 8004102:	d825      	bhi.n	8004150 <RCCEx_PLLSAI2_Config+0xa4>
 8004104:	2b01      	cmp	r3, #1
 8004106:	d002      	beq.n	800410e <RCCEx_PLLSAI2_Config+0x62>
 8004108:	2b02      	cmp	r3, #2
 800410a:	d009      	beq.n	8004120 <RCCEx_PLLSAI2_Config+0x74>
 800410c:	e020      	b.n	8004150 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800410e:	4b55      	ldr	r3, [pc, #340]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d11d      	bne.n	8004156 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411e:	e01a      	b.n	8004156 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	2b00      	cmp	r3, #0
 800412a:	d116      	bne.n	800415a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004130:	e013      	b.n	800415a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004132:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800413e:	4b49      	ldr	r3, [pc, #292]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800414e:	e006      	b.n	800415e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e004      	b.n	8004160 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004156:	bf00      	nop
 8004158:	e002      	b.n	8004160 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800415e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6819      	ldr	r1, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	430b      	orrs	r3, r1
 800417c:	4939      	ldr	r1, [pc, #228]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	4313      	orrs	r3, r2
 8004180:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d167      	bne.n	8004258 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a35      	ldr	r2, [pc, #212]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004194:	f7fd f836 	bl	8001204 <HAL_GetTick>
 8004198:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800419a:	e009      	b.n	80041b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800419c:	f7fd f832 	bl	8001204 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d902      	bls.n	80041b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	73fb      	strb	r3, [r7, #15]
        break;
 80041ae:	e005      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041b0:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ef      	bne.n	800419c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d14a      	bne.n	8004258 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d111      	bne.n	80041ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6892      	ldr	r2, [r2, #8]
 80041d8:	0211      	lsls	r1, r2, #8
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68d2      	ldr	r2, [r2, #12]
 80041de:	0912      	lsrs	r2, r2, #4
 80041e0:	0452      	lsls	r2, r2, #17
 80041e2:	430a      	orrs	r2, r1
 80041e4:	491f      	ldr	r1, [pc, #124]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	614b      	str	r3, [r1, #20]
 80041ea:	e011      	b.n	8004210 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041ec:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6892      	ldr	r2, [r2, #8]
 80041fc:	0211      	lsls	r1, r2, #8
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6912      	ldr	r2, [r2, #16]
 8004202:	0852      	lsrs	r2, r2, #1
 8004204:	3a01      	subs	r2, #1
 8004206:	0652      	lsls	r2, r2, #25
 8004208:	430a      	orrs	r2, r1
 800420a:	4916      	ldr	r1, [pc, #88]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fc fff2 	bl	8001204 <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004222:	e009      	b.n	8004238 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004224:	f7fc ffee 	bl	8001204 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d902      	bls.n	8004238 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	73fb      	strb	r3, [r7, #15]
          break;
 8004236:	e005      	b.n	8004244 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4904      	ldr	r1, [pc, #16]	; (8004264 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d079      	beq.n	800436e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fe7a 	bl	8000f88 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d058      	beq.n	800435c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	22ca      	movs	r2, #202	; 0xca
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2253      	movs	r2, #83	; 0x53
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fb7a 	bl	80049b4 <RTC_EnterInitMode>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d127      	bne.n	800431a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042dc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6899      	ldr	r1, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68d2      	ldr	r2, [r2, #12]
 8004304:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	041a      	lsls	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fb7e 	bl	8004a1c <RTC_ExitInitMode>
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0203 	bic.w	r2, r2, #3
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	22ff      	movs	r2, #255	; 0xff
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
 800435a:	e001      	b.n	8004360 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_RTC_SetTime+0x1a>
 800438e:	2302      	movs	r3, #2
 8004390:	e08b      	b.n	80044aa <HAL_RTC_SetTime+0x132>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	22ca      	movs	r2, #202	; 0xca
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2253      	movs	r2, #83	; 0x53
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fafe 	bl	80049b4 <RTC_EnterInitMode>
 80043b8:	4603      	mov	r3, r0
 80043ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d163      	bne.n	800448a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d126      	bne.n	8004416 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2200      	movs	r2, #0
 80043da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fb59 	bl	8004a98 <RTC_ByteToBcd2>
 80043e6:	4603      	mov	r3, r0
 80043e8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fb52 	bl	8004a98 <RTC_ByteToBcd2>
 80043f4:	4603      	mov	r3, r0
 80043f6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043f8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	789b      	ldrb	r3, [r3, #2]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fb4a 	bl	8004a98 <RTC_ByteToBcd2>
 8004404:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004406:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	78db      	ldrb	r3, [r3, #3]
 800440e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e018      	b.n	8004448 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004436:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800443c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	78db      	ldrb	r3, [r3, #3]
 8004442:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004452:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004456:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004466:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6899      	ldr	r1, [r3, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	431a      	orrs	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 facb 	bl	8004a1c <RTC_ExitInitMode>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	22ff      	movs	r2, #255	; 0xff
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004492:	7cfb      	ldrb	r3, [r7, #19]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}

080044b2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	0d9b      	lsrs	r3, r3, #22
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11a      	bne.n	8004560 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fad2 	bl	8004ad8 <RTC_Bcd2ToByte>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fac9 	bl	8004ad8 <RTC_Bcd2ToByte>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	789b      	ldrb	r3, [r3, #2]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fac0 	bl	8004ad8 <RTC_Bcd2ToByte>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800456a:	b590      	push	{r4, r7, lr}
 800456c:	b087      	sub	sp, #28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_RTC_SetDate+0x1a>
 8004580:	2302      	movs	r3, #2
 8004582:	e075      	b.n	8004670 <HAL_RTC_SetDate+0x106>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10e      	bne.n	80045b8 <HAL_RTC_SetDate+0x4e>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	f023 0310 	bic.w	r3, r3, #16
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	330a      	adds	r3, #10
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11c      	bne.n	80045f8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	78db      	ldrb	r3, [r3, #3]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fa68 	bl	8004a98 <RTC_ByteToBcd2>
 80045c8:	4603      	mov	r3, r0
 80045ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fa61 	bl	8004a98 <RTC_ByteToBcd2>
 80045d6:	4603      	mov	r3, r0
 80045d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80045da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	789b      	ldrb	r3, [r3, #2]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fa59 	bl	8004a98 <RTC_ByteToBcd2>
 80045e6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045e8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e00e      	b.n	8004616 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004604:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800460a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	22ca      	movs	r2, #202	; 0xca
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2253      	movs	r2, #83	; 0x53
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f9c4 	bl	80049b4 <RTC_EnterInitMode>
 800462c:	4603      	mov	r3, r0
 800462e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10c      	bne.n	8004650 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004644:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f9e8 	bl	8004a1c <RTC_ExitInitMode>
 800464c:	4603      	mov	r3, r0
 800464e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	22ff      	movs	r2, #255	; 0xff
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800466e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004670:	4618      	mov	r0, r3
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd90      	pop	{r4, r7, pc}

08004678 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004692:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	0b5b      	lsrs	r3, r3, #13
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11a      	bne.n	8004708 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	78db      	ldrb	r3, [r3, #3]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f9fe 	bl	8004ad8 <RTC_Bcd2ToByte>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f9f5 	bl	8004ad8 <RTC_Bcd2ToByte>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	789b      	ldrb	r3, [r3, #2]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f9ec 	bl	8004ad8 <RTC_Bcd2ToByte>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004712:	b590      	push	{r4, r7, lr}
 8004714:	b089      	sub	sp, #36	; 0x24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_RTC_SetAlarm+0x1a>
 8004728:	2302      	movs	r3, #2
 800472a:	e11b      	b.n	8004964 <HAL_RTC_SetAlarm+0x252>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d137      	bne.n	80047b2 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f99c 	bl	8004a98 <RTC_ByteToBcd2>
 8004760:	4603      	mov	r3, r0
 8004762:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f995 	bl	8004a98 <RTC_ByteToBcd2>
 800476e:	4603      	mov	r3, r0
 8004770:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004772:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	789b      	ldrb	r3, [r3, #2]
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f98d 	bl	8004a98 <RTC_ByteToBcd2>
 800477e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004780:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	78db      	ldrb	r3, [r3, #3]
 8004788:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800478a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f97f 	bl	8004a98 <RTC_ByteToBcd2>
 800479a:	4603      	mov	r3, r0
 800479c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800479e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e023      	b.n	80047fa <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047d2:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047d8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	78db      	ldrb	r3, [r3, #3]
 80047de:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047e0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047e8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	22ca      	movs	r2, #202	; 0xca
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2253      	movs	r2, #83	; 0x53
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	d14a      	bne.n	80048b6 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800482e:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004840:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004850:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004852:	f7fc fcd7 	bl	8001204 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004858:	e015      	b.n	8004886 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800485a:	f7fc fcd3 	bl	8001204 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004868:	d90d      	bls.n	8004886 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	22ff      	movs	r2, #255	; 0xff
 8004870:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2203      	movs	r2, #3
 8004876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e06e      	b.n	8004964 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0e2      	beq.n	800485a <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	e049      	b.n	800494a <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048c4:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80048d6:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e6:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80048e8:	f7fc fc8c 	bl	8001204 <HAL_GetTick>
 80048ec:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80048ee:	e015      	b.n	800491c <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048f0:	f7fc fc88 	bl	8001204 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048fe:	d90d      	bls.n	800491c <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2203      	movs	r2, #3
 800490c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e023      	b.n	8004964 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0e2      	beq.n	80048f0 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	22ff      	movs	r2, #255	; 0xff
 8004950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3724      	adds	r7, #36	; 0x24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd90      	pop	{r4, r7, pc}

0800496c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <HAL_RTC_WaitForSynchro+0x44>)
 800497a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800497c:	f7fc fc42 	bl	8001204 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004982:	e009      	b.n	8004998 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004984:	f7fc fc3e 	bl	8001204 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004992:	d901      	bls.n	8004998 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e007      	b.n	80049a8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ee      	beq.n	8004984 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	0003ff5f 	.word	0x0003ff5f

080049b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d120      	bne.n	8004a10 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295
 80049d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049d8:	f7fc fc14 	bl	8001204 <HAL_GetTick>
 80049dc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049de:	e00d      	b.n	80049fc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049e0:	f7fc fc10 	bl	8001204 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ee:	d905      	bls.n	80049fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2203      	movs	r2, #3
 80049f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <RTC_EnterInitMode+0x5c>
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d1e7      	bne.n	80049e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004a28:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <RTC_ExitInitMode+0x78>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <RTC_ExitInitMode+0x78>)
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a32:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <RTC_ExitInitMode+0x78>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10c      	bne.n	8004a5a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff93 	bl	800496c <HAL_RTC_WaitForSynchro>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01e      	beq.n	8004a8a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e017      	b.n	8004a8a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a5a:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <RTC_ExitInitMode+0x78>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <RTC_ExitInitMode+0x78>)
 8004a60:	f023 0320 	bic.w	r3, r3, #32
 8004a64:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff80 	bl	800496c <HAL_RTC_WaitForSynchro>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2203      	movs	r2, #3
 8004a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <RTC_ExitInitMode+0x78>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <RTC_ExitInitMode+0x78>)
 8004a84:	f043 0320 	orr.w	r3, r3, #32
 8004a88:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40002800 	.word	0x40002800

08004a98 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004aaa:	e005      	b.n	8004ab8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004ab2:	7afb      	ldrb	r3, [r7, #11]
 8004ab4:	3b0a      	subs	r3, #10
 8004ab6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	2b09      	cmp	r3, #9
 8004abc:	d8f6      	bhi.n	8004aac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b2db      	uxtb	r3, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	4413      	add	r3, r2
 8004afe:	b2db      	uxtb	r3, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <siprintf>:
 8004b0c:	b40e      	push	{r1, r2, r3}
 8004b0e:	b500      	push	{lr}
 8004b10:	b09c      	sub	sp, #112	; 0x70
 8004b12:	ab1d      	add	r3, sp, #116	; 0x74
 8004b14:	9002      	str	r0, [sp, #8]
 8004b16:	9006      	str	r0, [sp, #24]
 8004b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b1c:	4809      	ldr	r0, [pc, #36]	; (8004b44 <siprintf+0x38>)
 8004b1e:	9107      	str	r1, [sp, #28]
 8004b20:	9104      	str	r1, [sp, #16]
 8004b22:	4909      	ldr	r1, [pc, #36]	; (8004b48 <siprintf+0x3c>)
 8004b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b28:	9105      	str	r1, [sp, #20]
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	a902      	add	r1, sp, #8
 8004b30:	f000 f992 	bl	8004e58 <_svfiprintf_r>
 8004b34:	9b02      	ldr	r3, [sp, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	b01c      	add	sp, #112	; 0x70
 8004b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b40:	b003      	add	sp, #12
 8004b42:	4770      	bx	lr
 8004b44:	20000058 	.word	0x20000058
 8004b48:	ffff0208 	.word	0xffff0208

08004b4c <memset>:
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d100      	bne.n	8004b56 <memset+0xa>
 8004b54:	4770      	bx	lr
 8004b56:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5a:	e7f9      	b.n	8004b50 <memset+0x4>

08004b5c <__errno>:
 8004b5c:	4b01      	ldr	r3, [pc, #4]	; (8004b64 <__errno+0x8>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000058 	.word	0x20000058

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ba0 <__libc_init_array+0x38>)
 8004b6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ba4 <__libc_init_array+0x3c>)
 8004b6e:	1b64      	subs	r4, r4, r5
 8004b70:	10a4      	asrs	r4, r4, #2
 8004b72:	2600      	movs	r6, #0
 8004b74:	42a6      	cmp	r6, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	4d0b      	ldr	r5, [pc, #44]	; (8004ba8 <__libc_init_array+0x40>)
 8004b7a:	4c0c      	ldr	r4, [pc, #48]	; (8004bac <__libc_init_array+0x44>)
 8004b7c:	f000 fc6a 	bl	8005454 <_init>
 8004b80:	1b64      	subs	r4, r4, r5
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	2600      	movs	r6, #0
 8004b86:	42a6      	cmp	r6, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b90:	4798      	blx	r3
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9a:	4798      	blx	r3
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	0800557c 	.word	0x0800557c
 8004ba4:	0800557c 	.word	0x0800557c
 8004ba8:	0800557c 	.word	0x0800557c
 8004bac:	08005580 	.word	0x08005580

08004bb0 <__retarget_lock_acquire_recursive>:
 8004bb0:	4770      	bx	lr

08004bb2 <__retarget_lock_release_recursive>:
 8004bb2:	4770      	bx	lr

08004bb4 <_free_r>:
 8004bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb6:	2900      	cmp	r1, #0
 8004bb8:	d044      	beq.n	8004c44 <_free_r+0x90>
 8004bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbe:	9001      	str	r0, [sp, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bc6:	bfb8      	it	lt
 8004bc8:	18e4      	addlt	r4, r4, r3
 8004bca:	f000 f8df 	bl	8004d8c <__malloc_lock>
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <_free_r+0x94>)
 8004bd0:	9801      	ldr	r0, [sp, #4]
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	b933      	cbnz	r3, 8004be4 <_free_r+0x30>
 8004bd6:	6063      	str	r3, [r4, #4]
 8004bd8:	6014      	str	r4, [r2, #0]
 8004bda:	b003      	add	sp, #12
 8004bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be0:	f000 b8da 	b.w	8004d98 <__malloc_unlock>
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	d908      	bls.n	8004bfa <_free_r+0x46>
 8004be8:	6825      	ldr	r5, [r4, #0]
 8004bea:	1961      	adds	r1, r4, r5
 8004bec:	428b      	cmp	r3, r1
 8004bee:	bf01      	itttt	eq
 8004bf0:	6819      	ldreq	r1, [r3, #0]
 8004bf2:	685b      	ldreq	r3, [r3, #4]
 8004bf4:	1949      	addeq	r1, r1, r5
 8004bf6:	6021      	streq	r1, [r4, #0]
 8004bf8:	e7ed      	b.n	8004bd6 <_free_r+0x22>
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b10b      	cbz	r3, 8004c04 <_free_r+0x50>
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	d9fa      	bls.n	8004bfa <_free_r+0x46>
 8004c04:	6811      	ldr	r1, [r2, #0]
 8004c06:	1855      	adds	r5, r2, r1
 8004c08:	42a5      	cmp	r5, r4
 8004c0a:	d10b      	bne.n	8004c24 <_free_r+0x70>
 8004c0c:	6824      	ldr	r4, [r4, #0]
 8004c0e:	4421      	add	r1, r4
 8004c10:	1854      	adds	r4, r2, r1
 8004c12:	42a3      	cmp	r3, r4
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	d1e0      	bne.n	8004bda <_free_r+0x26>
 8004c18:	681c      	ldr	r4, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	6053      	str	r3, [r2, #4]
 8004c1e:	440c      	add	r4, r1
 8004c20:	6014      	str	r4, [r2, #0]
 8004c22:	e7da      	b.n	8004bda <_free_r+0x26>
 8004c24:	d902      	bls.n	8004c2c <_free_r+0x78>
 8004c26:	230c      	movs	r3, #12
 8004c28:	6003      	str	r3, [r0, #0]
 8004c2a:	e7d6      	b.n	8004bda <_free_r+0x26>
 8004c2c:	6825      	ldr	r5, [r4, #0]
 8004c2e:	1961      	adds	r1, r4, r5
 8004c30:	428b      	cmp	r3, r1
 8004c32:	bf04      	itt	eq
 8004c34:	6819      	ldreq	r1, [r3, #0]
 8004c36:	685b      	ldreq	r3, [r3, #4]
 8004c38:	6063      	str	r3, [r4, #4]
 8004c3a:	bf04      	itt	eq
 8004c3c:	1949      	addeq	r1, r1, r5
 8004c3e:	6021      	streq	r1, [r4, #0]
 8004c40:	6054      	str	r4, [r2, #4]
 8004c42:	e7ca      	b.n	8004bda <_free_r+0x26>
 8004c44:	b003      	add	sp, #12
 8004c46:	bd30      	pop	{r4, r5, pc}
 8004c48:	20000268 	.word	0x20000268

08004c4c <sbrk_aligned>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4e0e      	ldr	r6, [pc, #56]	; (8004c88 <sbrk_aligned+0x3c>)
 8004c50:	460c      	mov	r4, r1
 8004c52:	6831      	ldr	r1, [r6, #0]
 8004c54:	4605      	mov	r5, r0
 8004c56:	b911      	cbnz	r1, 8004c5e <sbrk_aligned+0x12>
 8004c58:	f000 fba6 	bl	80053a8 <_sbrk_r>
 8004c5c:	6030      	str	r0, [r6, #0]
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 fba1 	bl	80053a8 <_sbrk_r>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d00a      	beq.n	8004c80 <sbrk_aligned+0x34>
 8004c6a:	1cc4      	adds	r4, r0, #3
 8004c6c:	f024 0403 	bic.w	r4, r4, #3
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d007      	beq.n	8004c84 <sbrk_aligned+0x38>
 8004c74:	1a21      	subs	r1, r4, r0
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fb96 	bl	80053a8 <_sbrk_r>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d101      	bne.n	8004c84 <sbrk_aligned+0x38>
 8004c80:	f04f 34ff 	mov.w	r4, #4294967295
 8004c84:	4620      	mov	r0, r4
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	2000026c 	.word	0x2000026c

08004c8c <_malloc_r>:
 8004c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c90:	1ccd      	adds	r5, r1, #3
 8004c92:	f025 0503 	bic.w	r5, r5, #3
 8004c96:	3508      	adds	r5, #8
 8004c98:	2d0c      	cmp	r5, #12
 8004c9a:	bf38      	it	cc
 8004c9c:	250c      	movcc	r5, #12
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	db01      	blt.n	8004ca8 <_malloc_r+0x1c>
 8004ca4:	42a9      	cmp	r1, r5
 8004ca6:	d905      	bls.n	8004cb4 <_malloc_r+0x28>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	2600      	movs	r6, #0
 8004cae:	4630      	mov	r0, r6
 8004cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d88 <_malloc_r+0xfc>
 8004cb8:	f000 f868 	bl	8004d8c <__malloc_lock>
 8004cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	bb5c      	cbnz	r4, 8004d1c <_malloc_r+0x90>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	f7ff ffc0 	bl	8004c4c <sbrk_aligned>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	4604      	mov	r4, r0
 8004cd0:	d155      	bne.n	8004d7e <_malloc_r+0xf2>
 8004cd2:	f8d8 4000 	ldr.w	r4, [r8]
 8004cd6:	4626      	mov	r6, r4
 8004cd8:	2e00      	cmp	r6, #0
 8004cda:	d145      	bne.n	8004d68 <_malloc_r+0xdc>
 8004cdc:	2c00      	cmp	r4, #0
 8004cde:	d048      	beq.n	8004d72 <_malloc_r+0xe6>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	eb04 0903 	add.w	r9, r4, r3
 8004cea:	f000 fb5d 	bl	80053a8 <_sbrk_r>
 8004cee:	4581      	cmp	r9, r0
 8004cf0:	d13f      	bne.n	8004d72 <_malloc_r+0xe6>
 8004cf2:	6821      	ldr	r1, [r4, #0]
 8004cf4:	1a6d      	subs	r5, r5, r1
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f7ff ffa7 	bl	8004c4c <sbrk_aligned>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d037      	beq.n	8004d72 <_malloc_r+0xe6>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	442b      	add	r3, r5
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	f8d8 3000 	ldr.w	r3, [r8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d038      	beq.n	8004d82 <_malloc_r+0xf6>
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	42a2      	cmp	r2, r4
 8004d14:	d12b      	bne.n	8004d6e <_malloc_r+0xe2>
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	e00f      	b.n	8004d3c <_malloc_r+0xb0>
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	1b52      	subs	r2, r2, r5
 8004d20:	d41f      	bmi.n	8004d62 <_malloc_r+0xd6>
 8004d22:	2a0b      	cmp	r2, #11
 8004d24:	d917      	bls.n	8004d56 <_malloc_r+0xca>
 8004d26:	1961      	adds	r1, r4, r5
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	6025      	str	r5, [r4, #0]
 8004d2c:	bf18      	it	ne
 8004d2e:	6059      	strne	r1, [r3, #4]
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	bf08      	it	eq
 8004d34:	f8c8 1000 	streq.w	r1, [r8]
 8004d38:	5162      	str	r2, [r4, r5]
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f104 060b 	add.w	r6, r4, #11
 8004d42:	f000 f829 	bl	8004d98 <__malloc_unlock>
 8004d46:	f026 0607 	bic.w	r6, r6, #7
 8004d4a:	1d23      	adds	r3, r4, #4
 8004d4c:	1af2      	subs	r2, r6, r3
 8004d4e:	d0ae      	beq.n	8004cae <_malloc_r+0x22>
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	50a3      	str	r3, [r4, r2]
 8004d54:	e7ab      	b.n	8004cae <_malloc_r+0x22>
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	6862      	ldr	r2, [r4, #4]
 8004d5a:	d1dd      	bne.n	8004d18 <_malloc_r+0x8c>
 8004d5c:	f8c8 2000 	str.w	r2, [r8]
 8004d60:	e7ec      	b.n	8004d3c <_malloc_r+0xb0>
 8004d62:	4623      	mov	r3, r4
 8004d64:	6864      	ldr	r4, [r4, #4]
 8004d66:	e7ac      	b.n	8004cc2 <_malloc_r+0x36>
 8004d68:	4634      	mov	r4, r6
 8004d6a:	6876      	ldr	r6, [r6, #4]
 8004d6c:	e7b4      	b.n	8004cd8 <_malloc_r+0x4c>
 8004d6e:	4613      	mov	r3, r2
 8004d70:	e7cc      	b.n	8004d0c <_malloc_r+0x80>
 8004d72:	230c      	movs	r3, #12
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4638      	mov	r0, r7
 8004d78:	f000 f80e 	bl	8004d98 <__malloc_unlock>
 8004d7c:	e797      	b.n	8004cae <_malloc_r+0x22>
 8004d7e:	6025      	str	r5, [r4, #0]
 8004d80:	e7dc      	b.n	8004d3c <_malloc_r+0xb0>
 8004d82:	605b      	str	r3, [r3, #4]
 8004d84:	deff      	udf	#255	; 0xff
 8004d86:	bf00      	nop
 8004d88:	20000268 	.word	0x20000268

08004d8c <__malloc_lock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	; (8004d94 <__malloc_lock+0x8>)
 8004d8e:	f7ff bf0f 	b.w	8004bb0 <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	20000264 	.word	0x20000264

08004d98 <__malloc_unlock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__malloc_unlock+0x8>)
 8004d9a:	f7ff bf0a 	b.w	8004bb2 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	20000264 	.word	0x20000264

08004da4 <__ssputs_r>:
 8004da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	688e      	ldr	r6, [r1, #8]
 8004daa:	461f      	mov	r7, r3
 8004dac:	42be      	cmp	r6, r7
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	4682      	mov	sl, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	4690      	mov	r8, r2
 8004db6:	d82c      	bhi.n	8004e12 <__ssputs_r+0x6e>
 8004db8:	898a      	ldrh	r2, [r1, #12]
 8004dba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dbe:	d026      	beq.n	8004e0e <__ssputs_r+0x6a>
 8004dc0:	6965      	ldr	r5, [r4, #20]
 8004dc2:	6909      	ldr	r1, [r1, #16]
 8004dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dc8:	eba3 0901 	sub.w	r9, r3, r1
 8004dcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd0:	1c7b      	adds	r3, r7, #1
 8004dd2:	444b      	add	r3, r9
 8004dd4:	106d      	asrs	r5, r5, #1
 8004dd6:	429d      	cmp	r5, r3
 8004dd8:	bf38      	it	cc
 8004dda:	461d      	movcc	r5, r3
 8004ddc:	0553      	lsls	r3, r2, #21
 8004dde:	d527      	bpl.n	8004e30 <__ssputs_r+0x8c>
 8004de0:	4629      	mov	r1, r5
 8004de2:	f7ff ff53 	bl	8004c8c <_malloc_r>
 8004de6:	4606      	mov	r6, r0
 8004de8:	b360      	cbz	r0, 8004e44 <__ssputs_r+0xa0>
 8004dea:	6921      	ldr	r1, [r4, #16]
 8004dec:	464a      	mov	r2, r9
 8004dee:	f000 faeb 	bl	80053c8 <memcpy>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfc:	81a3      	strh	r3, [r4, #12]
 8004dfe:	6126      	str	r6, [r4, #16]
 8004e00:	6165      	str	r5, [r4, #20]
 8004e02:	444e      	add	r6, r9
 8004e04:	eba5 0509 	sub.w	r5, r5, r9
 8004e08:	6026      	str	r6, [r4, #0]
 8004e0a:	60a5      	str	r5, [r4, #8]
 8004e0c:	463e      	mov	r6, r7
 8004e0e:	42be      	cmp	r6, r7
 8004e10:	d900      	bls.n	8004e14 <__ssputs_r+0x70>
 8004e12:	463e      	mov	r6, r7
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	4632      	mov	r2, r6
 8004e18:	4641      	mov	r1, r8
 8004e1a:	f000 faab 	bl	8005374 <memmove>
 8004e1e:	68a3      	ldr	r3, [r4, #8]
 8004e20:	1b9b      	subs	r3, r3, r6
 8004e22:	60a3      	str	r3, [r4, #8]
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	4433      	add	r3, r6
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	462a      	mov	r2, r5
 8004e32:	f000 fad7 	bl	80053e4 <_realloc_r>
 8004e36:	4606      	mov	r6, r0
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d1e0      	bne.n	8004dfe <__ssputs_r+0x5a>
 8004e3c:	6921      	ldr	r1, [r4, #16]
 8004e3e:	4650      	mov	r0, sl
 8004e40:	f7ff feb8 	bl	8004bb4 <_free_r>
 8004e44:	230c      	movs	r3, #12
 8004e46:	f8ca 3000 	str.w	r3, [sl]
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e50:	81a3      	strh	r3, [r4, #12]
 8004e52:	f04f 30ff 	mov.w	r0, #4294967295
 8004e56:	e7e9      	b.n	8004e2c <__ssputs_r+0x88>

08004e58 <_svfiprintf_r>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	4698      	mov	r8, r3
 8004e5e:	898b      	ldrh	r3, [r1, #12]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	b09d      	sub	sp, #116	; 0x74
 8004e64:	4607      	mov	r7, r0
 8004e66:	460d      	mov	r5, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	d50e      	bpl.n	8004e8a <_svfiprintf_r+0x32>
 8004e6c:	690b      	ldr	r3, [r1, #16]
 8004e6e:	b963      	cbnz	r3, 8004e8a <_svfiprintf_r+0x32>
 8004e70:	2140      	movs	r1, #64	; 0x40
 8004e72:	f7ff ff0b 	bl	8004c8c <_malloc_r>
 8004e76:	6028      	str	r0, [r5, #0]
 8004e78:	6128      	str	r0, [r5, #16]
 8004e7a:	b920      	cbnz	r0, 8004e86 <_svfiprintf_r+0x2e>
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	e0d0      	b.n	8005028 <_svfiprintf_r+0x1d0>
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	616b      	str	r3, [r5, #20]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	2320      	movs	r3, #32
 8004e90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e98:	2330      	movs	r3, #48	; 0x30
 8004e9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005040 <_svfiprintf_r+0x1e8>
 8004e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ea2:	f04f 0901 	mov.w	r9, #1
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	469a      	mov	sl, r3
 8004eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eae:	b10a      	cbz	r2, 8004eb4 <_svfiprintf_r+0x5c>
 8004eb0:	2a25      	cmp	r2, #37	; 0x25
 8004eb2:	d1f9      	bne.n	8004ea8 <_svfiprintf_r+0x50>
 8004eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb8:	d00b      	beq.n	8004ed2 <_svfiprintf_r+0x7a>
 8004eba:	465b      	mov	r3, fp
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f7ff ff6f 	bl	8004da4 <__ssputs_r>
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f000 80a9 	beq.w	800501e <_svfiprintf_r+0x1c6>
 8004ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ece:	445a      	add	r2, fp
 8004ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80a1 	beq.w	800501e <_svfiprintf_r+0x1c6>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee6:	f10a 0a01 	add.w	sl, sl, #1
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	9307      	str	r3, [sp, #28]
 8004eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ef4:	4654      	mov	r4, sl
 8004ef6:	2205      	movs	r2, #5
 8004ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004efc:	4850      	ldr	r0, [pc, #320]	; (8005040 <_svfiprintf_r+0x1e8>)
 8004efe:	f7fb f96f 	bl	80001e0 <memchr>
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	b9d8      	cbnz	r0, 8004f3e <_svfiprintf_r+0xe6>
 8004f06:	06d0      	lsls	r0, r2, #27
 8004f08:	bf44      	itt	mi
 8004f0a:	2320      	movmi	r3, #32
 8004f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f10:	0711      	lsls	r1, r2, #28
 8004f12:	bf44      	itt	mi
 8004f14:	232b      	movmi	r3, #43	; 0x2b
 8004f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f20:	d015      	beq.n	8004f4e <_svfiprintf_r+0xf6>
 8004f22:	9a07      	ldr	r2, [sp, #28]
 8004f24:	4654      	mov	r4, sl
 8004f26:	2000      	movs	r0, #0
 8004f28:	f04f 0c0a 	mov.w	ip, #10
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f32:	3b30      	subs	r3, #48	; 0x30
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d94d      	bls.n	8004fd4 <_svfiprintf_r+0x17c>
 8004f38:	b1b0      	cbz	r0, 8004f68 <_svfiprintf_r+0x110>
 8004f3a:	9207      	str	r2, [sp, #28]
 8004f3c:	e014      	b.n	8004f68 <_svfiprintf_r+0x110>
 8004f3e:	eba0 0308 	sub.w	r3, r0, r8
 8004f42:	fa09 f303 	lsl.w	r3, r9, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	46a2      	mov	sl, r4
 8004f4c:	e7d2      	b.n	8004ef4 <_svfiprintf_r+0x9c>
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	9103      	str	r1, [sp, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bfbb      	ittet	lt
 8004f5a:	425b      	neglt	r3, r3
 8004f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f60:	9307      	strge	r3, [sp, #28]
 8004f62:	9307      	strlt	r3, [sp, #28]
 8004f64:	bfb8      	it	lt
 8004f66:	9204      	strlt	r2, [sp, #16]
 8004f68:	7823      	ldrb	r3, [r4, #0]
 8004f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f6c:	d10c      	bne.n	8004f88 <_svfiprintf_r+0x130>
 8004f6e:	7863      	ldrb	r3, [r4, #1]
 8004f70:	2b2a      	cmp	r3, #42	; 0x2a
 8004f72:	d134      	bne.n	8004fde <_svfiprintf_r+0x186>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	9203      	str	r2, [sp, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bfb8      	it	lt
 8004f80:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f84:	3402      	adds	r4, #2
 8004f86:	9305      	str	r3, [sp, #20]
 8004f88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005050 <_svfiprintf_r+0x1f8>
 8004f8c:	7821      	ldrb	r1, [r4, #0]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	4650      	mov	r0, sl
 8004f92:	f7fb f925 	bl	80001e0 <memchr>
 8004f96:	b138      	cbz	r0, 8004fa8 <_svfiprintf_r+0x150>
 8004f98:	9b04      	ldr	r3, [sp, #16]
 8004f9a:	eba0 000a 	sub.w	r0, r0, sl
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	4082      	lsls	r2, r0
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	3401      	adds	r4, #1
 8004fa6:	9304      	str	r3, [sp, #16]
 8004fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fac:	4825      	ldr	r0, [pc, #148]	; (8005044 <_svfiprintf_r+0x1ec>)
 8004fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fb2:	2206      	movs	r2, #6
 8004fb4:	f7fb f914 	bl	80001e0 <memchr>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d038      	beq.n	800502e <_svfiprintf_r+0x1d6>
 8004fbc:	4b22      	ldr	r3, [pc, #136]	; (8005048 <_svfiprintf_r+0x1f0>)
 8004fbe:	bb1b      	cbnz	r3, 8005008 <_svfiprintf_r+0x1b0>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	3307      	adds	r3, #7
 8004fc4:	f023 0307 	bic.w	r3, r3, #7
 8004fc8:	3308      	adds	r3, #8
 8004fca:	9303      	str	r3, [sp, #12]
 8004fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fce:	4433      	add	r3, r6
 8004fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd2:	e768      	b.n	8004ea6 <_svfiprintf_r+0x4e>
 8004fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd8:	460c      	mov	r4, r1
 8004fda:	2001      	movs	r0, #1
 8004fdc:	e7a6      	b.n	8004f2c <_svfiprintf_r+0xd4>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	3401      	adds	r4, #1
 8004fe2:	9305      	str	r3, [sp, #20]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f04f 0c0a 	mov.w	ip, #10
 8004fea:	4620      	mov	r0, r4
 8004fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff0:	3a30      	subs	r2, #48	; 0x30
 8004ff2:	2a09      	cmp	r2, #9
 8004ff4:	d903      	bls.n	8004ffe <_svfiprintf_r+0x1a6>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0c6      	beq.n	8004f88 <_svfiprintf_r+0x130>
 8004ffa:	9105      	str	r1, [sp, #20]
 8004ffc:	e7c4      	b.n	8004f88 <_svfiprintf_r+0x130>
 8004ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005002:	4604      	mov	r4, r0
 8005004:	2301      	movs	r3, #1
 8005006:	e7f0      	b.n	8004fea <_svfiprintf_r+0x192>
 8005008:	ab03      	add	r3, sp, #12
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	462a      	mov	r2, r5
 800500e:	4b0f      	ldr	r3, [pc, #60]	; (800504c <_svfiprintf_r+0x1f4>)
 8005010:	a904      	add	r1, sp, #16
 8005012:	4638      	mov	r0, r7
 8005014:	f3af 8000 	nop.w
 8005018:	1c42      	adds	r2, r0, #1
 800501a:	4606      	mov	r6, r0
 800501c:	d1d6      	bne.n	8004fcc <_svfiprintf_r+0x174>
 800501e:	89ab      	ldrh	r3, [r5, #12]
 8005020:	065b      	lsls	r3, r3, #25
 8005022:	f53f af2d 	bmi.w	8004e80 <_svfiprintf_r+0x28>
 8005026:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005028:	b01d      	add	sp, #116	; 0x74
 800502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502e:	ab03      	add	r3, sp, #12
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	462a      	mov	r2, r5
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <_svfiprintf_r+0x1f4>)
 8005036:	a904      	add	r1, sp, #16
 8005038:	4638      	mov	r0, r7
 800503a:	f000 f879 	bl	8005130 <_printf_i>
 800503e:	e7eb      	b.n	8005018 <_svfiprintf_r+0x1c0>
 8005040:	08005548 	.word	0x08005548
 8005044:	08005552 	.word	0x08005552
 8005048:	00000000 	.word	0x00000000
 800504c:	08004da5 	.word	0x08004da5
 8005050:	0800554e 	.word	0x0800554e

08005054 <_printf_common>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	4616      	mov	r6, r2
 800505a:	4699      	mov	r9, r3
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	690b      	ldr	r3, [r1, #16]
 8005060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005064:	4293      	cmp	r3, r2
 8005066:	bfb8      	it	lt
 8005068:	4613      	movlt	r3, r2
 800506a:	6033      	str	r3, [r6, #0]
 800506c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005070:	4607      	mov	r7, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b10a      	cbz	r2, 800507a <_printf_common+0x26>
 8005076:	3301      	adds	r3, #1
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	6833      	ldrmi	r3, [r6, #0]
 8005082:	3302      	addmi	r3, #2
 8005084:	6033      	strmi	r3, [r6, #0]
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	f015 0506 	ands.w	r5, r5, #6
 800508c:	d106      	bne.n	800509c <_printf_common+0x48>
 800508e:	f104 0a19 	add.w	sl, r4, #25
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	42ab      	cmp	r3, r5
 800509a:	dc26      	bgt.n	80050ea <_printf_common+0x96>
 800509c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a0:	1e13      	subs	r3, r2, #0
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	bf18      	it	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d42b      	bmi.n	8005104 <_printf_common+0xb0>
 80050ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b0:	4649      	mov	r1, r9
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c0      	blx	r8
 80050b6:	3001      	adds	r0, #1
 80050b8:	d01e      	beq.n	80050f8 <_printf_common+0xa4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6922      	ldr	r2, [r4, #16]
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	bf02      	ittt	eq
 80050c6:	68e5      	ldreq	r5, [r4, #12]
 80050c8:	6833      	ldreq	r3, [r6, #0]
 80050ca:	1aed      	subeq	r5, r5, r3
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	bf0c      	ite	eq
 80050d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d4:	2500      	movne	r5, #0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bfc4      	itt	gt
 80050da:	1a9b      	subgt	r3, r3, r2
 80050dc:	18ed      	addgt	r5, r5, r3
 80050de:	2600      	movs	r6, #0
 80050e0:	341a      	adds	r4, #26
 80050e2:	42b5      	cmp	r5, r6
 80050e4:	d11a      	bne.n	800511c <_printf_common+0xc8>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e008      	b.n	80050fc <_printf_common+0xa8>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4652      	mov	r2, sl
 80050ee:	4649      	mov	r1, r9
 80050f0:	4638      	mov	r0, r7
 80050f2:	47c0      	blx	r8
 80050f4:	3001      	adds	r0, #1
 80050f6:	d103      	bne.n	8005100 <_printf_common+0xac>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005100:	3501      	adds	r5, #1
 8005102:	e7c6      	b.n	8005092 <_printf_common+0x3e>
 8005104:	18e1      	adds	r1, r4, r3
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	2030      	movs	r0, #48	; 0x30
 800510a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800510e:	4422      	add	r2, r4
 8005110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005118:	3302      	adds	r3, #2
 800511a:	e7c7      	b.n	80050ac <_printf_common+0x58>
 800511c:	2301      	movs	r3, #1
 800511e:	4622      	mov	r2, r4
 8005120:	4649      	mov	r1, r9
 8005122:	4638      	mov	r0, r7
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d0e6      	beq.n	80050f8 <_printf_common+0xa4>
 800512a:	3601      	adds	r6, #1
 800512c:	e7d9      	b.n	80050e2 <_printf_common+0x8e>
	...

08005130 <_printf_i>:
 8005130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	7e0f      	ldrb	r7, [r1, #24]
 8005136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005138:	2f78      	cmp	r7, #120	; 0x78
 800513a:	4691      	mov	r9, r2
 800513c:	4680      	mov	r8, r0
 800513e:	460c      	mov	r4, r1
 8005140:	469a      	mov	sl, r3
 8005142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005146:	d807      	bhi.n	8005158 <_printf_i+0x28>
 8005148:	2f62      	cmp	r7, #98	; 0x62
 800514a:	d80a      	bhi.n	8005162 <_printf_i+0x32>
 800514c:	2f00      	cmp	r7, #0
 800514e:	f000 80d4 	beq.w	80052fa <_printf_i+0x1ca>
 8005152:	2f58      	cmp	r7, #88	; 0x58
 8005154:	f000 80c0 	beq.w	80052d8 <_printf_i+0x1a8>
 8005158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800515c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005160:	e03a      	b.n	80051d8 <_printf_i+0xa8>
 8005162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005166:	2b15      	cmp	r3, #21
 8005168:	d8f6      	bhi.n	8005158 <_printf_i+0x28>
 800516a:	a101      	add	r1, pc, #4	; (adr r1, 8005170 <_printf_i+0x40>)
 800516c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051dd 	.word	0x080051dd
 8005178:	08005159 	.word	0x08005159
 800517c:	08005159 	.word	0x08005159
 8005180:	08005159 	.word	0x08005159
 8005184:	08005159 	.word	0x08005159
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005159 	.word	0x08005159
 8005190:	08005159 	.word	0x08005159
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	080052e1 	.word	0x080052e1
 80051a0:	08005209 	.word	0x08005209
 80051a4:	0800529b 	.word	0x0800529b
 80051a8:	08005159 	.word	0x08005159
 80051ac:	08005159 	.word	0x08005159
 80051b0:	08005303 	.word	0x08005303
 80051b4:	08005159 	.word	0x08005159
 80051b8:	08005209 	.word	0x08005209
 80051bc:	08005159 	.word	0x08005159
 80051c0:	08005159 	.word	0x08005159
 80051c4:	080052a3 	.word	0x080052a3
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	602a      	str	r2, [r5, #0]
 80051d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051d8:	2301      	movs	r3, #1
 80051da:	e09f      	b.n	800531c <_printf_i+0x1ec>
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	682b      	ldr	r3, [r5, #0]
 80051e0:	0607      	lsls	r7, r0, #24
 80051e2:	f103 0104 	add.w	r1, r3, #4
 80051e6:	6029      	str	r1, [r5, #0]
 80051e8:	d501      	bpl.n	80051ee <_printf_i+0xbe>
 80051ea:	681e      	ldr	r6, [r3, #0]
 80051ec:	e003      	b.n	80051f6 <_printf_i+0xc6>
 80051ee:	0646      	lsls	r6, r0, #25
 80051f0:	d5fb      	bpl.n	80051ea <_printf_i+0xba>
 80051f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	da03      	bge.n	8005202 <_printf_i+0xd2>
 80051fa:	232d      	movs	r3, #45	; 0x2d
 80051fc:	4276      	negs	r6, r6
 80051fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005202:	485a      	ldr	r0, [pc, #360]	; (800536c <_printf_i+0x23c>)
 8005204:	230a      	movs	r3, #10
 8005206:	e012      	b.n	800522e <_printf_i+0xfe>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	1d19      	adds	r1, r3, #4
 800520e:	6029      	str	r1, [r5, #0]
 8005210:	0605      	lsls	r5, r0, #24
 8005212:	d501      	bpl.n	8005218 <_printf_i+0xe8>
 8005214:	681e      	ldr	r6, [r3, #0]
 8005216:	e002      	b.n	800521e <_printf_i+0xee>
 8005218:	0641      	lsls	r1, r0, #25
 800521a:	d5fb      	bpl.n	8005214 <_printf_i+0xe4>
 800521c:	881e      	ldrh	r6, [r3, #0]
 800521e:	4853      	ldr	r0, [pc, #332]	; (800536c <_printf_i+0x23c>)
 8005220:	2f6f      	cmp	r7, #111	; 0x6f
 8005222:	bf0c      	ite	eq
 8005224:	2308      	moveq	r3, #8
 8005226:	230a      	movne	r3, #10
 8005228:	2100      	movs	r1, #0
 800522a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800522e:	6865      	ldr	r5, [r4, #4]
 8005230:	60a5      	str	r5, [r4, #8]
 8005232:	2d00      	cmp	r5, #0
 8005234:	bfa2      	ittt	ge
 8005236:	6821      	ldrge	r1, [r4, #0]
 8005238:	f021 0104 	bicge.w	r1, r1, #4
 800523c:	6021      	strge	r1, [r4, #0]
 800523e:	b90e      	cbnz	r6, 8005244 <_printf_i+0x114>
 8005240:	2d00      	cmp	r5, #0
 8005242:	d04b      	beq.n	80052dc <_printf_i+0x1ac>
 8005244:	4615      	mov	r5, r2
 8005246:	fbb6 f1f3 	udiv	r1, r6, r3
 800524a:	fb03 6711 	mls	r7, r3, r1, r6
 800524e:	5dc7      	ldrb	r7, [r0, r7]
 8005250:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005254:	4637      	mov	r7, r6
 8005256:	42bb      	cmp	r3, r7
 8005258:	460e      	mov	r6, r1
 800525a:	d9f4      	bls.n	8005246 <_printf_i+0x116>
 800525c:	2b08      	cmp	r3, #8
 800525e:	d10b      	bne.n	8005278 <_printf_i+0x148>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	07de      	lsls	r6, r3, #31
 8005264:	d508      	bpl.n	8005278 <_printf_i+0x148>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	6861      	ldr	r1, [r4, #4]
 800526a:	4299      	cmp	r1, r3
 800526c:	bfde      	ittt	le
 800526e:	2330      	movle	r3, #48	; 0x30
 8005270:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005274:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005278:	1b52      	subs	r2, r2, r5
 800527a:	6122      	str	r2, [r4, #16]
 800527c:	f8cd a000 	str.w	sl, [sp]
 8005280:	464b      	mov	r3, r9
 8005282:	aa03      	add	r2, sp, #12
 8005284:	4621      	mov	r1, r4
 8005286:	4640      	mov	r0, r8
 8005288:	f7ff fee4 	bl	8005054 <_printf_common>
 800528c:	3001      	adds	r0, #1
 800528e:	d14a      	bne.n	8005326 <_printf_i+0x1f6>
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	b004      	add	sp, #16
 8005296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f043 0320 	orr.w	r3, r3, #32
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	4833      	ldr	r0, [pc, #204]	; (8005370 <_printf_i+0x240>)
 80052a4:	2778      	movs	r7, #120	; 0x78
 80052a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	6829      	ldr	r1, [r5, #0]
 80052ae:	061f      	lsls	r7, r3, #24
 80052b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80052b4:	d402      	bmi.n	80052bc <_printf_i+0x18c>
 80052b6:	065f      	lsls	r7, r3, #25
 80052b8:	bf48      	it	mi
 80052ba:	b2b6      	uxthmi	r6, r6
 80052bc:	07df      	lsls	r7, r3, #31
 80052be:	bf48      	it	mi
 80052c0:	f043 0320 	orrmi.w	r3, r3, #32
 80052c4:	6029      	str	r1, [r5, #0]
 80052c6:	bf48      	it	mi
 80052c8:	6023      	strmi	r3, [r4, #0]
 80052ca:	b91e      	cbnz	r6, 80052d4 <_printf_i+0x1a4>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	f023 0320 	bic.w	r3, r3, #32
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	2310      	movs	r3, #16
 80052d6:	e7a7      	b.n	8005228 <_printf_i+0xf8>
 80052d8:	4824      	ldr	r0, [pc, #144]	; (800536c <_printf_i+0x23c>)
 80052da:	e7e4      	b.n	80052a6 <_printf_i+0x176>
 80052dc:	4615      	mov	r5, r2
 80052de:	e7bd      	b.n	800525c <_printf_i+0x12c>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	6826      	ldr	r6, [r4, #0]
 80052e4:	6961      	ldr	r1, [r4, #20]
 80052e6:	1d18      	adds	r0, r3, #4
 80052e8:	6028      	str	r0, [r5, #0]
 80052ea:	0635      	lsls	r5, r6, #24
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	d501      	bpl.n	80052f4 <_printf_i+0x1c4>
 80052f0:	6019      	str	r1, [r3, #0]
 80052f2:	e002      	b.n	80052fa <_printf_i+0x1ca>
 80052f4:	0670      	lsls	r0, r6, #25
 80052f6:	d5fb      	bpl.n	80052f0 <_printf_i+0x1c0>
 80052f8:	8019      	strh	r1, [r3, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	4615      	mov	r5, r2
 8005300:	e7bc      	b.n	800527c <_printf_i+0x14c>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	681d      	ldr	r5, [r3, #0]
 800530a:	6862      	ldr	r2, [r4, #4]
 800530c:	2100      	movs	r1, #0
 800530e:	4628      	mov	r0, r5
 8005310:	f7fa ff66 	bl	80001e0 <memchr>
 8005314:	b108      	cbz	r0, 800531a <_printf_i+0x1ea>
 8005316:	1b40      	subs	r0, r0, r5
 8005318:	6060      	str	r0, [r4, #4]
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	2300      	movs	r3, #0
 8005320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005324:	e7aa      	b.n	800527c <_printf_i+0x14c>
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	462a      	mov	r2, r5
 800532a:	4649      	mov	r1, r9
 800532c:	4640      	mov	r0, r8
 800532e:	47d0      	blx	sl
 8005330:	3001      	adds	r0, #1
 8005332:	d0ad      	beq.n	8005290 <_printf_i+0x160>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	079b      	lsls	r3, r3, #30
 8005338:	d413      	bmi.n	8005362 <_printf_i+0x232>
 800533a:	68e0      	ldr	r0, [r4, #12]
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	4298      	cmp	r0, r3
 8005340:	bfb8      	it	lt
 8005342:	4618      	movlt	r0, r3
 8005344:	e7a6      	b.n	8005294 <_printf_i+0x164>
 8005346:	2301      	movs	r3, #1
 8005348:	4632      	mov	r2, r6
 800534a:	4649      	mov	r1, r9
 800534c:	4640      	mov	r0, r8
 800534e:	47d0      	blx	sl
 8005350:	3001      	adds	r0, #1
 8005352:	d09d      	beq.n	8005290 <_printf_i+0x160>
 8005354:	3501      	adds	r5, #1
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	9903      	ldr	r1, [sp, #12]
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	42ab      	cmp	r3, r5
 800535e:	dcf2      	bgt.n	8005346 <_printf_i+0x216>
 8005360:	e7eb      	b.n	800533a <_printf_i+0x20a>
 8005362:	2500      	movs	r5, #0
 8005364:	f104 0619 	add.w	r6, r4, #25
 8005368:	e7f5      	b.n	8005356 <_printf_i+0x226>
 800536a:	bf00      	nop
 800536c:	08005559 	.word	0x08005559
 8005370:	0800556a 	.word	0x0800556a

08005374 <memmove>:
 8005374:	4288      	cmp	r0, r1
 8005376:	b510      	push	{r4, lr}
 8005378:	eb01 0402 	add.w	r4, r1, r2
 800537c:	d902      	bls.n	8005384 <memmove+0x10>
 800537e:	4284      	cmp	r4, r0
 8005380:	4623      	mov	r3, r4
 8005382:	d807      	bhi.n	8005394 <memmove+0x20>
 8005384:	1e43      	subs	r3, r0, #1
 8005386:	42a1      	cmp	r1, r4
 8005388:	d008      	beq.n	800539c <memmove+0x28>
 800538a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800538e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005392:	e7f8      	b.n	8005386 <memmove+0x12>
 8005394:	4402      	add	r2, r0
 8005396:	4601      	mov	r1, r0
 8005398:	428a      	cmp	r2, r1
 800539a:	d100      	bne.n	800539e <memmove+0x2a>
 800539c:	bd10      	pop	{r4, pc}
 800539e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053a6:	e7f7      	b.n	8005398 <memmove+0x24>

080053a8 <_sbrk_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d06      	ldr	r5, [pc, #24]	; (80053c4 <_sbrk_r+0x1c>)
 80053ac:	2300      	movs	r3, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fb fe4c 	bl	8001050 <_sbrk>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_sbrk_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_sbrk_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000260 	.word	0x20000260

080053c8 <memcpy>:
 80053c8:	440a      	add	r2, r1
 80053ca:	4291      	cmp	r1, r2
 80053cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d0:	d100      	bne.n	80053d4 <memcpy+0xc>
 80053d2:	4770      	bx	lr
 80053d4:	b510      	push	{r4, lr}
 80053d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053de:	4291      	cmp	r1, r2
 80053e0:	d1f9      	bne.n	80053d6 <memcpy+0xe>
 80053e2:	bd10      	pop	{r4, pc}

080053e4 <_realloc_r>:
 80053e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e8:	4680      	mov	r8, r0
 80053ea:	4614      	mov	r4, r2
 80053ec:	460e      	mov	r6, r1
 80053ee:	b921      	cbnz	r1, 80053fa <_realloc_r+0x16>
 80053f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f4:	4611      	mov	r1, r2
 80053f6:	f7ff bc49 	b.w	8004c8c <_malloc_r>
 80053fa:	b92a      	cbnz	r2, 8005408 <_realloc_r+0x24>
 80053fc:	f7ff fbda 	bl	8004bb4 <_free_r>
 8005400:	4625      	mov	r5, r4
 8005402:	4628      	mov	r0, r5
 8005404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005408:	f000 f81b 	bl	8005442 <_malloc_usable_size_r>
 800540c:	4284      	cmp	r4, r0
 800540e:	4607      	mov	r7, r0
 8005410:	d802      	bhi.n	8005418 <_realloc_r+0x34>
 8005412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005416:	d812      	bhi.n	800543e <_realloc_r+0x5a>
 8005418:	4621      	mov	r1, r4
 800541a:	4640      	mov	r0, r8
 800541c:	f7ff fc36 	bl	8004c8c <_malloc_r>
 8005420:	4605      	mov	r5, r0
 8005422:	2800      	cmp	r0, #0
 8005424:	d0ed      	beq.n	8005402 <_realloc_r+0x1e>
 8005426:	42bc      	cmp	r4, r7
 8005428:	4622      	mov	r2, r4
 800542a:	4631      	mov	r1, r6
 800542c:	bf28      	it	cs
 800542e:	463a      	movcs	r2, r7
 8005430:	f7ff ffca 	bl	80053c8 <memcpy>
 8005434:	4631      	mov	r1, r6
 8005436:	4640      	mov	r0, r8
 8005438:	f7ff fbbc 	bl	8004bb4 <_free_r>
 800543c:	e7e1      	b.n	8005402 <_realloc_r+0x1e>
 800543e:	4635      	mov	r5, r6
 8005440:	e7df      	b.n	8005402 <_realloc_r+0x1e>

08005442 <_malloc_usable_size_r>:
 8005442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005446:	1f18      	subs	r0, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	bfbc      	itt	lt
 800544c:	580b      	ldrlt	r3, [r1, r0]
 800544e:	18c0      	addlt	r0, r0, r3
 8005450:	4770      	bx	lr
	...

08005454 <_init>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr

08005460 <_fini>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr
